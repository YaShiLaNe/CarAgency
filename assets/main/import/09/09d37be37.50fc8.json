[1,["baIUdvKGZPgZxNbjWTFuRI","1brw/JvvpFnIvdrxpFCgMZ","92tIbYOC9PA6rOYuyKCwZ2","40OS5P1udDhqfepdaMmeS/@a4b16","12Y9dMgWdJKJGmTiZyQR9H@2e76e","8egqqp4cJAAKGnj44Sg9eG","12Y9dMgWdJKJGmTiZyQR9H@a804a","d3x4IMKphEKYvHuEU7yaxB","93GhlzlcFM3puqTdSWs6P9","73+XCNrRRFbKASaiaTCN0h","f6SJZOjTJB/JrJeh5xTdF7","61SH+UTe9MOJD9p/LaNZ2G","40OS5P1udDhqfepdaMmeS/@827ec","edFmOmLFtOooUFuqoO8E4s@f9941","720GKVw71Du762amer7lPV@55735","c8ayC8+axDybaNMMNvZeKD","8fA1tByoZGioAd4Lx5H7sV@4a3f5","b1L7FDkZJBq6UBlTUodEyx","1fBH8R6KVMV6lQK+Pxon4Y@f9941","df1C2dlQVIv4Giyd3HoOSr@0ece8","fa5Iubhd5IqbVuQLDI5N3D@db1a9","7a0maCdq9DgK1fD8xT5/1P@f9941","a4hwQzScxLi7EyJM1eIbD5@f9941","3ewkEdW0FOpZqjET9yssfG@ecc4a","55SMnbp2pBzpyVm9ad5J2S@ef86a","25fRS+BMtPjZdUPlDpsHij","6a7ufJFEtLfYdjR4hJF/hA","66aw7RwMdG45GUH4tGM1pH","beoiyuBcNLAaIdtQAEKPs9@b47c0","a98kiTCsdKN5Qh4YuArhtC","7cPUEpPGBFApOf718XIr89@2deab","3ewkEdW0FOpZqjET9yssfG@328ce","40OS5P1udDhqfepdaMmeS/@38e4c","80M1cXbEhMULqLaNuxNZyt@3b4ad","95EkngnxZFbYuFpsqVTaFr@f9941","3enOn2/mND9rx5sL0wPOJQ","83o0Q1TlJNvqpWhQwGa1fw@fcbb2","57Fogeo7FDpJU9sJKPNPVs","37tDqRYVRDQYLjPjOfYSD8","40OS5P1udDhqfepdaMmeS/@cb0e3","893eHxOWtJ7bFDk0IqjN/E@f9941","3ewkEdW0FOpZqjET9yssfG@09065","e8EW2UdLxEi5D4BTysGKK6@6c48a","a3zQCfCrBCDZJ4uf2rk5u8","f03uq4pWVN/oTUpJvhyYka","db6+s/AbRPDq2NJVyPw5Ss","bcnZjiaOlDg4NbDG/63O9H","21otwysvNOuZ5nlcxD25QF@f9941","c42zTfOMhMfqxDaHO+i33A","24wocXuhtJmZo4+gSJMb1g@c1b8f","8fgb7YkL9NcJgis/lZcMT+@6c48a","05NL20BhtBNr5EcB7rFubK@6c48a","5bwKL2eYFN4aiVwlD+muhl@6c48a","aebvjlP45OLaNSjdXCaJck","81vZqa3EpMlovx/cDY8s4J@6c48a","5fcdIWg8tFDaumRed2bYDz@6c48a","3ewkEdW0FOpZqjET9yssfG@cf5ee","952Yk/0UdCW66qgcsRA/BD@6c48a","63MZgcO9pG8bcpIj+POmhu@a62fe","20g1ukYUVPvKWKBRznAKo+@f9941","cd5ZFJwtVBMaqYUlEbLSAD@2deab","ebLjRNMjFFhqMcJpz2eCtY@2deab","b3RNL9zVpI64fiYywEYQeW@f3aa8","b3RNL9zVpI64fiYywEYQeW@30732","b3RNL9zVpI64fiYywEYQeW@ca88b","b3RNL9zVpI64fiYywEYQeW@f1394","b3RNL9zVpI64fiYywEYQeW@0dca5","b3RNL9zVpI64fiYywEYQeW@75ee4","b3RNL9zVpI64fiYywEYQeW@01402","b3RNL9zVpI64fiYywEYQeW@a72ab","b3RNL9zVpI64fiYywEYQeW@c2202","b3RNL9zVpI64fiYywEYQeW@2224c","4ffKme9o9O5p4osgYc7DUO@6c48a","40OS5P1udDhqfepdaMmeS/@bc186","40OS5P1udDhqfepdaMmeS/@b3b37","b0QWAlYptN7YEoum/zqzl+@6c48a","8eeKLeq99FP48M5tvxcLjW@6c48a","80M1cXbEhMULqLaNuxNZyt@7d902","80M1cXbEhMULqLaNuxNZyt@6ec10","80M1cXbEhMULqLaNuxNZyt@3620d","80M1cXbEhMULqLaNuxNZyt@cbffa","80M1cXbEhMULqLaNuxNZyt@3c0d1","80M1cXbEhMULqLaNuxNZyt@6745b","80M1cXbEhMULqLaNuxNZyt@f2dff","80M1cXbEhMULqLaNuxNZyt@1d4eb","80M1cXbEhMULqLaNuxNZyt@c05bc","80M1cXbEhMULqLaNuxNZyt@9fa2a","80M1cXbEhMULqLaNuxNZyt@014cb","80M1cXbEhMULqLaNuxNZyt@a1eb8","80M1cXbEhMULqLaNuxNZyt@dde3d","80M1cXbEhMULqLaNuxNZyt@b67ca","80M1cXbEhMULqLaNuxNZyt@b832b","fdDSnMx6NOOqvhKTS7TZm+","80M1cXbEhMULqLaNuxNZyt@c43e3","80M1cXbEhMULqLaNuxNZyt@e1277","80M1cXbEhMULqLaNuxNZyt@177c0","80M1cXbEhMULqLaNuxNZyt@33144","80M1cXbEhMULqLaNuxNZyt@cc2fd","80M1cXbEhMULqLaNuxNZyt@ec86b","80M1cXbEhMULqLaNuxNZyt@8a5c1","80M1cXbEhMULqLaNuxNZyt@42479","80M1cXbEhMULqLaNuxNZyt@5678e","80M1cXbEhMULqLaNuxNZyt@85206","94mn5hjkBLypWMpr7UqelJ","80M1cXbEhMULqLaNuxNZyt@2eb1f","80M1cXbEhMULqLaNuxNZyt@254ce","80M1cXbEhMULqLaNuxNZyt@d8011","80M1cXbEhMULqLaNuxNZyt@3e64b","df1C2dlQVIv4Giyd3HoOSr@8eb22","df1C2dlQVIv4Giyd3HoOSr@8b1ad","df1C2dlQVIv4Giyd3HoOSr@ddd4d","df1C2dlQVIv4Giyd3HoOSr@cbffa","df1C2dlQVIv4Giyd3HoOSr@3c0d1","df1C2dlQVIv4Giyd3HoOSr@6745b","df1C2dlQVIv4Giyd3HoOSr@b832b","df1C2dlQVIv4Giyd3HoOSr@f2dff","df1C2dlQVIv4Giyd3HoOSr@939f0","df1C2dlQVIv4Giyd3HoOSr@ed8f5","df1C2dlQVIv4Giyd3HoOSr@5291f","df1C2dlQVIv4Giyd3HoOSr@4642b","df1C2dlQVIv4Giyd3HoOSr@40845","df1C2dlQVIv4Giyd3HoOSr@8951d","df1C2dlQVIv4Giyd3HoOSr@e92ec","df1C2dlQVIv4Giyd3HoOSr@6e594","df1C2dlQVIv4Giyd3HoOSr@f742b","df1C2dlQVIv4Giyd3HoOSr@e1277","df1C2dlQVIv4Giyd3HoOSr@177c0","df1C2dlQVIv4Giyd3HoOSr@33144","df1C2dlQVIv4Giyd3HoOSr@cc2fd","df1C2dlQVIv4Giyd3HoOSr@ec86b","df1C2dlQVIv4Giyd3HoOSr@2fbfc","df1C2dlQVIv4Giyd3HoOSr@e18ce","df1C2dlQVIv4Giyd3HoOSr@743ae","df1C2dlQVIv4Giyd3HoOSr@2dc97","df1C2dlQVIv4Giyd3HoOSr@54202","df1C2dlQVIv4Giyd3HoOSr@254ce","df1C2dlQVIv4Giyd3HoOSr@d8011","df1C2dlQVIv4Giyd3HoOSr@3e64b","11t0da30ZIdLZfn6Q7/UrH","55SMnbp2pBzpyVm9ad5J2S@4c2b0","cd5ZFJwtVBMaqYUlEbLSAD@86bd8","3aVSRz2XlLO5MWwGj/+0Vs","8azLJIrQxIObWip7gc76/5","a7NlCHLBFDD5wNDzSt2lJL","06/KZfZoJMc4zHBJP9Pg+F@befa4","02RJp644dPCKFPvhRftLkN","63MZgcO9pG8bcpIj+POmhu@1d175","32IVDdSCdPCoHCZiDA8357@6c48a","83o0Q1TlJNvqpWhQwGa1fw@2deab","3ewkEdW0FOpZqjET9yssfG@ac5bf","7faUeccE9OcbIO4hRI5Uyw@f9941","c8PJYJRBFFC7u4n4UvETux@f9941","5bNUq32W5BA7JHdHzTadAi@657d1","5by3bFKMxMLYtMnNbRLrhK@63d30","1cpx5mZQZEWbZ5PvMKegLI","5aCMo0t3pAjb4fSUIJy7MX","96wBEwhtNPyqa1RmuSEEBD","d93KyYT3NCya4bEUTwPAbw","7d+fGPE0xISY0pKynjdCCz@f9941","b1IfcZcg1LIbyAVrgqSl+q@a62fe","83Ch1dYeFMAaB+Lvln9hJc@6c48a","06/KZfZoJMc4zHBJP9Pg+F@2deab","06/KZfZoJMc4zHBJP9Pg+F@a62fe","1fBH8R6KVMV6lQK+Pxon4Y@6c48a","20g1ukYUVPvKWKBRznAKo+@6c48a","21otwysvNOuZ5nlcxD25QF@6c48a","adUBzmxj5E06iwE7DBLrTt@6c48a","7be3LStT5D85mZ/TsOj6Vb@6c48a","86wT5mxl1B1qCHntgpxZ4i@6c48a","3ewkEdW0FOpZqjET9yssfG@bb7f2","3ewkEdW0FOpZqjET9yssfG@30eb1","3ewkEdW0FOpZqjET9yssfG@30732","3ewkEdW0FOpZqjET9yssfG@92eea","3ewkEdW0FOpZqjET9yssfG@f1394","3ewkEdW0FOpZqjET9yssfG@4c68d","3ewkEdW0FOpZqjET9yssfG@75ee4","3ewkEdW0FOpZqjET9yssfG@995f7","3ewkEdW0FOpZqjET9yssfG@a72ab","3ewkEdW0FOpZqjET9yssfG@90c6a","3ewkEdW0FOpZqjET9yssfG@2224c","3ewkEdW0FOpZqjET9yssfG@5ae43","3ewkEdW0FOpZqjET9yssfG@512ac","154ZOWLatIT6l6EyU7OOhE@6c48a","76TbFmnI1McZ5AjDr/aQg8@6c48a","40OS5P1udDhqfepdaMmeS/@99d6c","40OS5P1udDhqfepdaMmeS/@6ec10","40OS5P1udDhqfepdaMmeS/@3620d","40OS5P1udDhqfepdaMmeS/@cbffa","40OS5P1udDhqfepdaMmeS/@6f845","40OS5P1udDhqfepdaMmeS/@d4109","40OS5P1udDhqfepdaMmeS/@520b8","40OS5P1udDhqfepdaMmeS/@f2dff","40OS5P1udDhqfepdaMmeS/@ee24a","40OS5P1udDhqfepdaMmeS/@e8df9","40OS5P1udDhqfepdaMmeS/@61fca","40OS5P1udDhqfepdaMmeS/@c05bc","40OS5P1udDhqfepdaMmeS/@be7dd","40OS5P1udDhqfepdaMmeS/@9fa2a","40OS5P1udDhqfepdaMmeS/@8e0d6","40OS5P1udDhqfepdaMmeS/@ea712","40OS5P1udDhqfepdaMmeS/@dde3d","40OS5P1udDhqfepdaMmeS/@b67ca","40OS5P1udDhqfepdaMmeS/@c43e3","40OS5P1udDhqfepdaMmeS/@0bf24","40OS5P1udDhqfepdaMmeS/@865f5","40OS5P1udDhqfepdaMmeS/@177c0","40OS5P1udDhqfepdaMmeS/@33144","40OS5P1udDhqfepdaMmeS/@cc2fd","40OS5P1udDhqfepdaMmeS/@ec86b","40OS5P1udDhqfepdaMmeS/@2fbfc","40OS5P1udDhqfepdaMmeS/@e18ce","40OS5P1udDhqfepdaMmeS/@8d0c3","40OS5P1udDhqfepdaMmeS/@2dc97","40OS5P1udDhqfepdaMmeS/@54202","40OS5P1udDhqfepdaMmeS/@254ce","40OS5P1udDhqfepdaMmeS/@d8011","40OS5P1udDhqfepdaMmeS/@3e64b","40OS5P1udDhqfepdaMmeS/@d2258","40OS5P1udDhqfepdaMmeS/@5a499","40OS5P1udDhqfepdaMmeS/@7b128","40OS5P1udDhqfepdaMmeS/@3dea4","40OS5P1udDhqfepdaMmeS/@c5c5d","40OS5P1udDhqfepdaMmeS/@a58c3","40OS5P1udDhqfepdaMmeS/@7e93c","40OS5P1udDhqfepdaMmeS/@c7023","40OS5P1udDhqfepdaMmeS/@4cc2d","40OS5P1udDhqfepdaMmeS/@e056c","40OS5P1udDhqfepdaMmeS/@fff23","40OS5P1udDhqfepdaMmeS/@3ef54","40OS5P1udDhqfepdaMmeS/@0cca1","40OS5P1udDhqfepdaMmeS/@f69c7","c5eCanu6pPHoJuLkE9kmAC@6c48a","38gWca3GFJP43M2HPJIh27@3c318","d9DbtTTpFCn4bXeOA/YTfJ@6c48a","1avt0w9sVANYM+4j67rejj@6c48a","54TknWPwVPqJqeCR+Y/Czo@6c48a","55SMnbp2pBzpyVm9ad5J2S@af631","55SMnbp2pBzpyVm9ad5J2S@30732","55SMnbp2pBzpyVm9ad5J2S@73d63","55SMnbp2pBzpyVm9ad5J2S@f1394","55SMnbp2pBzpyVm9ad5J2S@24642","55SMnbp2pBzpyVm9ad5J2S@75ee4","55SMnbp2pBzpyVm9ad5J2S@3626b","55SMnbp2pBzpyVm9ad5J2S@a72ab","55SMnbp2pBzpyVm9ad5J2S@f42b8","55SMnbp2pBzpyVm9ad5J2S@2224c","55SMnbp2pBzpyVm9ad5J2S@d0cee","55SMnbp2pBzpyVm9ad5J2S@62756","55SMnbp2pBzpyVm9ad5J2S@5a5e2","55SMnbp2pBzpyVm9ad5J2S@7d08b","9aGa4JnGJISq1ZGIK5z4Ag@6c48a","7cPUEpPGBFApOf718XIr89@62af6","edZvKBII1CvY/FuJrEOK7d","9e9h3y46JEUqztbU+XBI8A","7b5KOGgn1G6aahTvCO+Rty","9cfkGbMdhBPalwZhajEqZk","caTKijYQxG+5du/sp979dC","7fk9TeLvNDxZmVCM980lSh","3ccKMpCUdIQbuY8ToOnvoj","72rMnmLx5J+7mAepeXKPUN@75fa2","bbvjNaqt9LAZFDIEHiJMvc","b1bm0cy+RAP7vloma2DPgD","c5BCT+xHRP3aC7qDAinPGz@6c48a","63MZgcO9pG8bcpIj+POmhu@2deab","36jZyGxd9DN4AzvT+FmyqA@6c48a","bbo/4IjN9BMqegCevdmcGe@6c48a","b2NW5Rh9tN2YEV47EXRopT@6c48a","22BQt7LPFNtZuOrV9XBJfn@6c48a","6fg30RVQ9ELJ8Q/RySk9pR@6c48a","d07RocJOlCQ5dyYkk89Cck@a62fe","72rMnmLx5J+7mAepeXKPUN@be7dd","72rMnmLx5J+7mAepeXKPUN@920f4","72rMnmLx5J+7mAepeXKPUN@c5f65","720GKVw71Du762amer7lPV@4f17a","989UoQmkJHAJQ3clWeAmzm@6c48a","85ua9NqMFFYIoqdbg7p9M8@6c48a","7a0maCdq9DgK1fD8xT5/1P@6c48a","7cPUEpPGBFApOf718XIr89@fdcd4","296Rh8FhJFyLusD7J3DFIC@6c48a","7d+fGPE0xISY0pKynjdCCz@6c48a","d6iEaSDy9EAqDba4HgFN9a@6c48a","7faUeccE9OcbIO4hRI5Uyw@6c48a","82ofxm3gBEM6zfDLivxALS@6c48a","83o0Q1TlJNvqpWhQwGa1fw@ec167","893eHxOWtJ7bFDk0IqjN/E@6c48a","ddgf5BmHVHVpvMPazTrLl4@6c48a","01N4Nz3X5N67Dno/2I7G6o@6c48a","956T85fi1Lt78jYiIvvXX3@6c48a","f0H2rWtNJJcYQ4GL7GiL1q@6c48a","3dEcNUScpK67/RZgpwOWAr@6c48a","a7bIi0i8xPkakaM0I3TKg0@6c48a","a3lCeRcaFCeLzGz58+WJmo@6c48a","95EkngnxZFbYuFpsqVTaFr@6c48a","96jA2OMfxAq4bUjc0nFOq4@27c27","96jA2OMfxAq4bUjc0nFOq4@c71dd","37HHg/pJxAPa9UShiyZ9EL@6c48a","4az3eIQkBFfoSfoI1MTmR9","60I5Xl/zlMRIaBiiIE5Y1Q@6c48a","9efJgmoPhE1rk0nGo253Ax@6c48a","a1LhRZnOdP06jSG9Ti0aB+@6c48a","d4ls1N+N5JG4JlUz/qKMXy","54TknWPwVPqJqeCR+Y/Czo@f9941","55SMnbp2pBzpyVm9ad5J2S@da3de","a978ZcqQdD1ZUeoMdDHbpP","a85rVC4YVLSJ7L7Va9CIvb","41PH3CLX1AvqEdadWpGkYa","374jVQ7ulNoZb+N2Mj2alF","cfUcjnODlONqMRoBi1uC+p","4aPpe65shIHKiVPm1riq+u","adux/WB0hLKrS42IF+S1l2","43odbxDeZM6rQ7UtPUAzBU","c8Jlg5ZcRAVpa2hej7h0TY","74ZQoBSbhBYqF7mbVWOo1q","7coKETQlpJ2ZBWefQ1YyRL","4aAX4G9pZDurL9/ByiJQhm","40OS5P1udDhqfepdaMmeS/@626bf","71JQjDWT5Kg7qWeoTFF/Ui","5eQ7G3sitBTpEEfKQPLeza","705zptvdhEEqj5CWiacAE8","ebP4kChlZI8JKo8Hz78Cat","f7PbIN1mBE2YDbj0BMoEvo","dbs0fhI0NDt63wG0lxx/uB@ed4df","7epu1el79Kh70SiSUHbc96","ebLjRNMjFFhqMcJpz2eCtY@b619d","787VwHQBBDYL5V8E4axRDI","28h9UupolK6KAEn9vaJNG9","3foWoHZCtE0a/n2In7P0qm","96jA2OMfxAq4bUjc0nFOq4@47286","6bStnrhAdNLbpjKNU1Soaf","9clNlnoBlNqLu6Uev0D33w","0dSwfaKIBKA6Ky1qhon4hP@b47c0","92wxY6oAhOQav9vrJhWMUD","e9YH2qJJVMepmQW5LStNc7","a4hwQzScxLi7EyJM1eIbD5@6c48a","c1ZKLVx21IjphDtVDmoAR+@6c48a","26aK0QG1lCL4/yek+pRQT1","a6amN4DSdMjbM83YRv/S/0@6c48a","c8PJYJRBFFC7u4n4UvETux@6c48a","feTrcn1yBPkr1eM8JRsCYz@6c48a","4d3/1fxa5Bt4d9KOhFjbeU@6c48a","ecH+vSAOpKWaGAdq5ovoUH@6c48a","28YzPuPylDZYGIZx52YP6A@6c48a","cd5ZFJwtVBMaqYUlEbLSAD@22c64","24wocXuhtJmZo4+gSJMb1g@30eb1","24wocXuhtJmZo4+gSJMb1g@30732","24wocXuhtJmZo4+gSJMb1g@92eea","24wocXuhtJmZo4+gSJMb1g@f1394","24wocXuhtJmZo4+gSJMb1g@4c68d","24wocXuhtJmZo4+gSJMb1g@75ee4","24wocXuhtJmZo4+gSJMb1g@995f7","24wocXuhtJmZo4+gSJMb1g@a72ab","24wocXuhtJmZo4+gSJMb1g@90c6a","24wocXuhtJmZo4+gSJMb1g@2224c","b5Hcd42+ZINoXWCto3vtVZ","82ofxm3gBEM6zfDLivxALS@f9941","9efJgmoPhE1rk0nGo253Ax@f9941","6fg30RVQ9ELJ8Q/RySk9pR@f9941","63McV1tOdNDrDWH4qN9Dtb@6c48a","dbs0fhI0NDt63wG0lxx/uB@2deab","dbs0fhI0NDt63wG0lxx/uB@a62fe","8087G5/VRAwapovN1mKRm3@6c48a","34yCVFm6xGEpJXkKX/98Gd@6c48a","df1C2dlQVIv4Giyd3HoOSr@05a41","ebLjRNMjFFhqMcJpz2eCtY@6ec10","ebLjRNMjFFhqMcJpz2eCtY@3620d","ebLjRNMjFFhqMcJpz2eCtY@99d6c","edFmOmLFtOooUFuqoO8E4s@6c48a","29FQpLd+xDzr6G6CZAyYC4@6c48a","20dIgOGWxAbbdK1uVpFcvu@6c48a","95PEkJa1tKEpQgIuDDdjCw@6c48a","4cVn8wB9JJ4bJXdTiQ2dsu@6c48a"],["node","_mesh","value","_parent","targetInfo","_effectAsset","_material","root","mainTexture","asset","_spriteFrame","_skeleton","data","_normalSprite","normalMap","_textureSource","_target","metallicRoughnessMap","_clip","_hoverSprite","_pressedSprite","_disabledSprite","occlusionMap","target","source","toggle","_checkMark","reflEnvMap","reflLightMap","coatNormal","flakeMask","flakeNormal","_defaultClip","rigidBody","mainCamera","scene","Camera_no_UBA","msgLabel","Poster_mtl","_envmapHDR","_envmapLDR","_targetTexture","_cameraComponent","bendGrassButton","bendGrassToggle","qualityToggle","fpsToggle","debugToggle","lodToggle","jumpWidget","controlBg","control"],[["cc.Node",["_name","_layer","_objFlags","_id","_active","__editorExtras__","_parent","_components","_lpos","_prefab","_children","_lscale","_lrot","_euler"],-3,1,9,5,4,2,5,5,5],"cc.ImageAsset","cc.SpriteFrame",["cc.Sprite",["_sizeMode","_type","_name","_isTrimmedMode","node","_spriteFrame","__prefab","_color"],-1,1,6,4,5],["cc.BoxCollider",["_isTrigger","_material","node","_size","__prefab","_center"],2,6,1,5,4,5],["cc.MeshRenderer",["_name","_shadowReceivingMode","_enabled","node","_materials","lightmapSettings","_mesh","__prefab"],0,1,3,4,6,4],["cc.CapsuleCollider",["_radius","_cylinderHeight","_material","_center","node","__prefab"],1,6,5,1,4],["cc.AudioSource",["_playOnAwake","_loop","node","_clip","__prefab"],1,1,6,4],["cc.Node",["_name","_id","_objFlags","_layer","_parent","_lpos","_prefab","_lrot","_euler","_components","_children","_lscale","__editorExtras__"],-1,1,5,4,5,5,2,9,5,11],["cc.PrefabInstance",["fileId","propertyOverrides","mountedComponents","mountedChildren","removedComponents","prefabRootNode"],2,9,9,9,9,1],["cc.Label",["_string","_actualFontSize","_fontSize","_overflow","_enableWrapText","_horizontalAlign","_verticalAlign","node","_color","__prefab"],-4,1,5,4],["cc.Widget",["_alignFlags","_left","_bottom","_right","_originalWidth","_top","_isAbsRight","_isAbsBottom","_originalHeight","_alignMode","node","__prefab"],-7,1,4],["cc.Material",["_states","_defines","_name","_techIdx","_props"],-1,12],["cc.Node",["_name","_layer","_active","_objFlags","_parent","_components","_prefab","_lpos","_children"],-1,1,12,4,5,2],["cc.UITransform",["_name","node","_contentSize","__prefab","_anchorPoint"],2,1,5,4,5],["cc.Button",["_transition","_interactable","node","_normalColor","_target","_normalSprite","_hoverSprite","_pressedSprite","_disabledSprite","__prefab","clickEvents"],1,1,5,1,6,6,6,6,4,9],["cc.Camera",["_visibility","_far","_clearFlags","_name","_fov","_projection","_priority","_orthoHeight","node","_color","__prefab"],-5,1,5,4],"cc.TextureCube",["cc.PrefabInfo",["fileId","root","asset","nestedPrefabInstanceRoots","targetOverrides"],2,1,1,2,9],["cc.PrefabInstance",["fileId","prefabRootNode","propertyOverrides","mountedComponents","mountedChildren"],1,9,9,9],["cc.Prefab",["_name"],2],["cc.ModelLightmapSettings",["_castShadow"],2],["cc.SkinnedMeshRenderer",["_shadowCastingMode","node","__prefab","_materials","lightmapSettings","_skinningRoot","_mesh","_skeleton"],2,1,4,3,4,1,6,6],["CCPropertyOverrideInfo",["propertyPath","value","targetInfo"],1,4],["cc.TargetOverrideInfo",["propertyPath","source","target","targetInfo","sourceInfo"],2,1,1,4,4],["75021RAEFlO6L9sHk+IyS9C",["runSpeed","idle_anim","run_anim","walk_anim","node","orbitCamera","msgLabel","Camera_no_UBA"],-1,1,1,1,4],["02c9anVPBhAz6XicLB/YNhw",["_string","node","_material","__prefab"],2,1,6,4],["cc.Toggle",["_isChecked","node","__prefab","_normalColor","_target","checkEvents"],2,1,4,5,1,9],"cc.RenderTexture",["cc.Material",["_name","_props","_defines"],0],["cc.Mesh",["_native","_hash","_struct"],1,11],["cc.PrefabInfo",["fileId","root","instance","asset"],2,1,4,6],["cc.MeshRenderer",["_materials","node","__prefab","lightmapSettings","_mesh"],2,1,4,4,6],["cc.CompPrefabInfo",["fileId"],2],["cc.SkeletalAnimation",["playOnLoad","node","__prefab","_clips"],2,1,4,12],["cc.SkeletalAnimation",["node","__prefab","_clips","_defaultClip"],3,1,4,3,6],["cc.Skeleton",["_name","_hash","_joints","_bindposes"],0,12],["cc.AudioClip",["_name","_native","_duration"],0],["cc.EffectAsset",["_name","shaders","techniques"],0],["cc.TargetInfo",["localID"],2],["CCPropertyOverrideInfo",["value","propertyPath","targetInfo"],1,1],["CCPropertyOverrideInfo",["propertyPath","targetInfo","value"],2,1,8],["CCPropertyOverrideInfo",["propertyPath","targetInfo","value"],2,1,6],["CCPropertyOverrideInfo",["propertyPath","targetInfo","value"],2,4,8],["CCPropertyOverrideInfo",["propertyPath","targetInfo","value"],2,4,6],["CCPropertyOverrideInfo",["propertyPath","targetInfo","value"],2,4,1],["CCPropertyOverrideInfo",["propertyPath","targetInfo","value"],2,1,1],["cc.SceneAsset",["_name"],2],["cc.Scene",["_name","_children","_prefab","_globals"],2,2,4,4],["cc.SceneGlobals",["ambient","shadows","_skybox","fog","octree"],3,4,4,4,4,4],["cc.AmbientInfo",["_skyIllumHDR","_skyIllumLDR","_skyColorHDR","_groundAlbedoHDR","_skyColorLDR"],1,5,5,5],["cc.ShadowsInfo",["_enabled","_type","_distance","_shadowColor","_size"],0,5,5],["cc.SkyboxInfo",["_envLightingType","_enabled","_envmapHDR","_envmapLDR"],1,6,6],["cc.FogInfo",[],3],["cc.OctreeInfo",[],3],["cc.MountedChildrenInfo",["targetInfo","nodes"],3,4,2],["cc.MountedChildrenInfo",["targetInfo","nodes"],3,4,9],["cc.MountedComponentsInfo",["targetInfo","components"],3,4,9],["cc.MountedComponentsInfo",["targetInfo","components"],3,4,12],["7f5430jupZHI7dZB76XWDDm",["Dance_Panel","node"],2,1],["cc.ClickEvent",["_componentId","handler","target"],1,1],["cc.WebView",["_url","node"],2,1],["88dd3bqDfNHc7qAxHLLC5+N",["mainCamera"],3,1],["6be7d8BhlpJFobtMkxMXvVa",["enableTouch","enableScaleRadius","autoRotateSpeed","radiusScaleSpeed","minRadius","maxRadius","followTargetRotationY","_targetRadius","node","xRotationRange","_startRotation"],-5,1,5,5],["cc.RichText",["_string","_fontSize","node"],1,1],["8773757JIdFVaHBVSWwoEdC",["node","Poster_mtl"],3,1,6],["cc.RigidBody",["_mass","node","_angularFactor"],2,1,5],["78fbaYmXk5OLp1dz1v3xq57",["_enabled","node","lookAtOffset"],2,1,5],["cc.DirectionalLight",["_colorTemperature","_illuminanceHDR","_shadowEnabled","_shadowPcf","_shadowDistance","_csmLevel","_shadowFar","_shadowOrthoSize","node","_staticSettings"],-5,1,4],["cc.StaticLightSettings",[],3],["cc.PhysicsMaterial",["_friction","_rollingFriction","_spinningFriction"],0],["cc.Canvas",["node","__prefab","_cameraComponent"],3,1,4,1],["6ac746xf9JIFYsJZes7ZclD",["node","__prefab"],3,1,4],["cc.Layout",["_resizeMode","_layoutType","_spacingX","node","__prefab"],0,1,4],["1cc41vvS9ROubh3cG3gNNZI",["node","__prefab","settings","lodToggle","debugToggle","fpsToggle","qualityToggle","bendGrassToggle","bendGrassButton"],3,1,4,1,1,1,1,1,1,1],["5bf5eeCKY5Az4a5MEEQZzAo",["node","__prefab","toggle"],3,1,4,1],["0df005HeCFHbLgcmwtx6QL2",["maxRadius","node","__prefab","control","controlBg","jumpBtn","jumpWidget"],2,1,4,1,1,1,1],["cc.BlockInputEvents",["node","__prefab"],3,1,4]],[[18,0,1,2,2],[33,0,2],[39,0,2],[21,1],[5,3,7,4,5,6,1],[0,0,6,10,9,8,12,11,13,2],[30,0,1,2,3],[41,0,1,2,2],[0,0,6,7,9,8,12,13,2],[44,0,1,2,2],[0,0,6,9,8,2],[8,0,4,10,6,5,7,11,8,2],[0,0,6,7,9,2],[40,0,1,2,3],[23,1,0,2,3],[12,2,0,1,4,4],[43,0,1,2,2],[0,0,6,7,8,12,11,13,2],[42,0,1,2,2],[31,0,1,2,3,2],[0,2,5,6,9,3],[5,0,3,4,5,6,2],[14,1,2,1],[0,0,6,7,9,12,13,2],[14,1,3,2,1],[22,1,2,3,4,5,6,7,1],[36,0,1,2,3,4],[5,0,2,3,4,5,6,3],[0,0,6,7,9,8,2],[4,2,1,1],[0,0,10,9,8,12,11,13,2],[9,0,1,2],[12,2,3,0,1,4,5],[4,2,3,1,1],[20,1],[20,0,2],[57,0,1,1],[60,0,1,2,3],[0,0,10,9,2],[45,0,1,2,2],[55,0,1,1],[12,0,1,4,3],[0,0,4,6,7,9,3],[0,0,2,1,6,7,4],[0,0,6,7,8,2],[0,0,10,9,8,2],[0,0,6,10,9,8,2],[9,0,5,1,2],[46,0,1,2,2],[3,1,0,4,5,3],[15,0,2,10,3,4,5,6,7,8,2],[0,0,10,7,9,8,12,11,13,2],[13,0,1,4,8,5,6,7,3],[37,0,1,2,4],[10,0,1,2,3,4,7,6],[0,0,6,10,9,8,12,13,2],[0,0,1,6,10,7,9,8,3],[0,0,2,1,6,7,9,8,4],[8,0,4,10,6,5,2],[4,3,1,1],[3,4,6,7,5,1],[3,0,3,4,6,5,3],[15,0,2,9,3,4,5,2],[10,0,1,2,7,4],[10,0,5,1,2,3,4,7,9,8,7],[75,0,1,2,1],[0,0,2,1,6,10,7,8,4],[0,0,2,6,7,8,12,11,13,3],[0,0,2,1,6,7,8,4],[8,2,4,6,12,2],[19,0,1,4,3,2,3],[24,0,1,2,3,2],[3,4,6,5,1],[11,0,10,11,2],[0,0,6,10,9,2],[0,0,6,7,9,8,12,11,13,2],[0,0,2,4,1,6,10,7,11,5],[0,0,2,1,6,7,8,11,4],[13,0,2,1,4,5,6,4],[34,0,1,2,3,2],[4,0,2,4,5,3,1,2],[4,0,2,4,3,1,2],[6,4,5,2,1],[7,1,0,2,4,3,3],[38,0,1,2,4],[59,0,1,2],[14,0,1,2,2],[3,4,6,1],[27,0,1,2,3,4,5,2],[0,0,10,7,9,2],[0,0,6,10,7,9,2],[0,0,6,7,9,12,11,13,2],[0,0,2,6,8,3],[0,0,2,1,6,10,7,11,4],[0,0,6,7,8,11,2],[0,0,2,3,6,7,8,12,11,13,4],[0,0,7,8,12,11,13,2],[0,0,1,6,7,9,3],[13,0,1,4,5,6,3],[5,3,4,5,1],[5,3,4,5,6,1],[32,0,1,2,3,4,2],[35,0,1,2,3,1],[4,2,4,5,3,1,1],[6,0,1,4,3,2,3],[7,0,2,4,2],[7,0,2,3,2],[22,0,1,2,3,4,5,6,7,2],[9,0,3,2,1,2],[9,0,1,4,2],[23,0,2,2],[58,0,1,1],[14,1,3,2,4,1],[3,2,1,0,4,5,4],[3,0,4,6,2],[10,0,1,2,3,4,7,8,6],[64,0,1,2,3],[26,0,1,2,2],[66,0,1,2,2],[27,1,2,3,4,5,1],[12,3,0,1,4,4],[29,0,1,2,4],[0,0,3,10,3],[0,0,3,6,10,8,3],[0,0,2,3,6,10,8,4],[0,0,2,1,10,7,8,12,11,13,4],[0,0,4,1,6,10,7,8,4],[0,0,1,6,10,7,8,11,3],[0,0,1,6,10,7,8,3],[0,0,1,6,10,7,11,3],[0,0,2,3,6,10,4],[0,0,2,6,7,8,11,3],[0,0,3,6,7,8,3],[0,0,3,6,10,8,11,3],[0,0,3,6,7,8,12,13,3],[0,0,7,8,11,2],[0,0,1,10,7,9,8,3],[0,0,4,1,6,10,7,9,8,4],[0,0,1,6,7,9,8,3],[0,0,1,7,9,8,3],[0,0,1,6,10,7,9,8,11,3],[0,0,6,10,7,9,12,13,2],[0,0,6,7,9,8,11,2],[8,0,1,4,9,5,7,8,3],[8,0,4,9,5,7,11,8,2],[8,0,3,4,9,6,5,3],[13,0,3,2,1,4,5,7,5],[18,0,1,2,3,2],[18,0,4,3,2],[5,0,1,3,4,5,6,3],[5,3,7,4,5,1],[21,0,2],[4,2,4,3,1,1],[4,5,3,1,1],[4,0,2,5,1,2],[6,4,3,2,1],[6,3,2,1],[6,0,3,2,2],[6,1,3,2,2],[6,4,5,3,2,1],[7,1,0,2,3],[7,1,2,3,2],[7,1,0,2,3,3],[7,0,2,4,3,2],[9,0,3,2,1,4,2],[9,0,2,1,2],[19,0,1,3,2,3],[19,0,1,2,3],[47,0,2],[48,0,1,2,3,2],[24,0,1,4,2,3,2],[49,0,1,2,3,4,1],[50,0,1,2,3,4,3],[51,0,1,2,3,4,4],[52,0,1,2,3,3],[53,1],[54,1],[56,0,1,1],[3,2,1,0,4,4],[3,1,0,4,7,5,3],[3,4,5,1],[3,0,4,5,2],[15,1,0,2,3,4,5,6,7,8,3],[15,0,2,9,3,4,2],[61,0,1,2],[62,0,1],[63,0,1,2,3,4,5,6,7,8,9,10,9],[25,0,1,2,3,4,5,5],[25,0,1,2,3,4,5,6,7,5],[10,0,5,6,1,2,8,6],[16,1],[16,1,2,0,8,4],[16,3,4,0,8,9,4],[16,5,6,7,1,2,0,8,10,9,7],[26,0,1,3,2,2],[65,0,1,1],[67,0,1,2,2],[68,0,1,2,3,4,5,6,7,8,9,9],[69,1],[70,0,1,2,4],[71,0,1,2,1],[11,0,1,3,5,2,6,7,4,8,10,11,10],[11,0,1,10,11,3],[11,0,1,2,9,10,11,5],[11,0,1,3,2,4,10,11,6],[72,0,1,1],[73,0,1,2,3,4,4],[74,0,1,2,3,4,5,6,7,8,1],[76,0,1,2,3,4,5,6,2],[77,0,1,1]],[[[{"fmt":"1","w":0,"h":0},-1],[1],0,[],[],[]],[[[15,"Chair",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_ALBEDO_MAP":true},{},{}],[[[{},"mainColor",8,[4,4284778938],"mainTexture",6,0],{},{}],11,0,0]]],0,0,[0,0],[8,5],[160,1]],[[[15,"Default_Material",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":0}],[[[{"transparencyFactor":0,"albedoScale":1},"mainColor",8,[4,4294967295],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[5],[10]],[[[6,".bin",358733642,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":32088,"length":4416,"count":1104,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":32088,"count":573,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.37602490186691284,-0.33206796646118164,-7.82310962677002e-8],"maxPosition",8,[1,0.3760250210762024,0.33206772804260254,1.3926523923873901]]],-1],0,0,[],[],[]],[[[34],[38,"Chair_Simple",[-2],[0,"0e4mXNjKJcP512XmSuo2DT",-1,0]],[23,"Chair_Simple",1,[[4,-3,[1,"9dRxiNVCxfJLN4+zlxmZEH"],[0],[3],1]],[0,"1emOf3jTdY1Y3nMhpUOu3M",1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]]],0,[0,7,1,0,-1,2,0,0,2,0,12,1,3],[0,0],[-1,1],[161,162]],[[{"base":"2,2,0,0,2,0","rgbe":false,"mipmaps":[{"front":"0d4b07da-2880-4a03-a2b2-d6a8689f884f@b47c0@e9a6d","back":"0d4b07da-2880-4a03-a2b2-d6a8689f884f@b47c0@40c10","left":"0d4b07da-2880-4a03-a2b2-d6a8689f884f@b47c0@8fd34","right":"0d4b07da-2880-4a03-a2b2-d6a8689f884f@b47c0@74afd","top":"0d4b07da-2880-4a03-a2b2-d6a8689f884f@b47c0@bb97f","bottom":"0d4b07da-2880-4a03-a2b2-d6a8689f884f@b47c0@7d38f"}]}],[17],0,[],[],[]],[[{"fmt":"1","w":0,"h":0},-1],[1],0,[],[],[]],[[{"fmt":"1","w":0,"h":0},-1],[1],0,[],[],[]],[[{"fmt":"1","w":0,"h":0},-1],[1],0,[],[],[]],[[{"fmt":"1","w":0,"h":0},-1],[1],0,[],[],[]],[[{"fmt":"1","w":0,"h":0},-1],[1],0,[],[],[]],[[{"fmt":"1","w":0,"h":0},-1],[1],0,[],[],[]],[[[6,".bin",3219909449,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":6776,"length":2400,"count":600,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":6776,"count":121,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-5,0,-5],"maxPosition",8,[1,5,0,5]]],-1],0,0,[],[],[]],[[[6,".bin",3434579268,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1344,"length":144,"count":36,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1344,"count":24,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.5,-0.5,-0.5],"maxPosition",8,[1,0.5,0.5,0.5]]],-1],0,0,[],[],[]],[[[35,"SR_Girl"],[51,"SR_Girl",[-6,-7,-8,-9,-10,-11],[[79,true,-2,[1,"c2ZYi1RLtUULrfguAP26B/"],[[null,17,null],0,6,0]],[80,true,-3,[1,"30itUdW7tKs72wqoGyijVP"],[1,0,0,1.5],[1,1.5,1,1],18],[82,-4,[1,"caYIydLvNFArI8lFbXVlcj"],19],[105,false,-5,[1,"9cv3SLM4lGBo6t9sUb2RRh"]]],[0,"56h8lGGPFQU53Ba9Dor6fB",-1,0],[1,212.662,0,-115.352],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,3,3,3],[1,0,-90,0]],[30,"mixamorig:RightHand",[-12,-13,-14,-15,-16],[0,"9clnOie8RVNrvEbJQq8v0G",1,0],[1,-0.0000034432430311426288,0.000006639084858761635,0.24298104643821716],[3,0.01360794689334438,-0.034225589866867225,0.07317042209627833,0.9966391132751439],[1,1.0000035762786865,1.0000513792037964,1.0000189542770386],[1,1.8610563502341224,-4.069220824717699,8.33250351650913]],[30,"mixamorig:LeftHand",[-17,-18,-19,-20,-21],[0,"70PTV00hBWBZzlsXIXZydA",1,0],[1,-0.0000014225752238417044,-0.000011036961041099858,0.24313096702098846],[3,0.016454573840333213,0.028110362793747026,-0.0802140465250583,0.9962453318552679],[1,0.9999858140945435,1.0000828504562378,1.0000077486038208],[1,2.164876145566908,3.405613008914394,-9.143091827417996]],[55,"mixamorig:Hips",1,[-22,-23,-24],[0,"55NX289clQzY3dcHvCHYap",1,0],[1,0,0.7598279714584351,-0.02771100029349327],[3,0,0.7071067811865476,0.7071067811865476,8.659560751628624e-17],[1,-90.00000000000003,180,7.016709451900449e-15]],[45,"mixamorig:Spine2",[-25,-26,-27],[0,"fbaZlJsG1Wq6DtuEYWMahW",1,0],[1,-6.571454692342039e-19,0.000004227554654789856,0.1153070330619812]],[12,"Karen_body",1,[[107,1,-28,[1,"d0CW+ZNTtRQr7wEtIZOTtU"],[0,1,2],[3],1,3,4]],[0,"14ghY5xypRz4JzZoPu36/c",1,0]],[12,"Karen_hair",1,[[25,-29,[1,"d28SIqOt1b+ZtvOsJXXh6W"],[5],[3],1,6,7]],[0,"0aw+oDm5ZTDaRDKmkoyatQ",1,0]],[12,"Karen_pants",1,[[25,-30,[1,"3esK7eLGRafom4zgN4qVW+"],[8],[3],1,9,10]],[0,"b6uyTYC59btqS8FODFpsGc",1,0]],[12,"Karen_shoes",1,[[25,-31,[1,"bbPIOeWd1Zf5lUD6rr8+Ao"],[11],[3],1,12,13]],[0,"37Y/XoqZlYuJXBOXk7vFb3",1,0]],[12,"Karen_tshirt",1,[[25,-32,[1,"01h0KrnUFecKntzvVY4bPw"],[14],[3],1,15,16]],[0,"c925QNBw5XwLpBGL+4HksE",1,0]],[5,"mixamorig:Spine",4,[-33],[0,"c6DS1+8CRRW4TF1ZFMbBDN",1,0],[1,-4.927978647109298e-19,0.004023999907076359,0.08638399839401245],[3,-0.023256715663660554,3.748385206406917e-33,8.719871725416944e-35,0.9997295260101803],[1,1,0.999981701374054,0.999981701374054],[1,-2.665263604887311,4.29649513659828e-31,3.811234230531542e-40]],[46,"mixamorig:Spine1",11,[5],[0,"22XCxSnchX2YyWpqdzqDJx",1,0],[1,-5.750941155526188e-19,0.0000044715634430758655,0.10089319199323654]],[5,"mixamorig:Neck",5,[-34],[0,"f6SqrywK5dQImUjayZ/mh8",1,0],[1,-7.39319297345235e-19,0.0000050754856601997744,0.12971892952919006],[3,0.023256715663660554,-2.8482302098926363e-18,1.2243603317803223e-16,0.9997295260101803],[1,1,1.0000182390213013,1.0000182390213013],[1,2.665263604887311,-6.525897439471037e-16,1.4018750536119725e-14]],[58,"mixamorig:Head",13,[[10,"mixamorig:HeadTop_End",-35,[0,"d95o+vlQlURI9AzSCc5eyS",1,0],[1,-6.939706195268755e-18,0.05666700005531311,0.3004800081253052]]],[0,"002fciVQZel6lGs939GzzM",1,0],[1,2.0796952213341377e-18,0.016982000321149826,0.09004700183868408]],[5,"mixamorig:RightShoulder",5,[-36],[0,"96m3mML8xYma8ovSNMUnD6",1,0],[1,0.045917998999357224,0.0007866040687076747,0.1135755106806755],[3,0.5816024528988893,-0.5717965351807134,0.4056466808882289,-0.4125991752557072],[1,1.0000628232955933,0.9999746084213257,0.9999850988388062],[1,-109.31027250051311,-0.01567830944859292,-89.02598293762216]],[5,"mixamorig:RightArm",15,[-37],[0,"9bngOQYRtbh6w3rSykac42",1,0],[1,0.000006249770649446873,0.000005086226792627713,0.09753921627998352],[3,0.1305643758250226,0.02527631243286411,-0.003381620138266603,0.9911118082438828],[1,0.9999703764915466,0.9999983310699463,0.9999900460243225],[1,15.009472847216758,2.922569396180545,-0.005887450073719543]],[5,"mixamorig:RightForeArm",16,[2],[0,"baiECjP39daJsVRrwIjWk+",1,0],[1,-0.000007147949872887693,-3.3064247872971464e-7,0.20756368339061737],[3,0.06362503011317068,-0.10821657609726618,0.007007633324171273,0.9920644743544024],[1,0.9999561905860901,1.0000345706939697,1.0000081062316895],[1,7.3399941585837,-12.451162506688474,0.007647973286588901]],[5,"mixamorig:RightHandIndex1",2,[-38],[0,"a9y0BdABxe+IV09LXanHV+",1,0],[1,-0.029763730242848396,-0.0002482774725649506,0.10437147319316864],[3,-0.003487278742590059,-0.038228225349527134,-0.0001424063244334014,0.999262939067609],[1,1.00008225440979,0.999967098236084,0.9999818801879883],[1,-0.3999452466257097,-4.3817299137112435,-0.0010300503079290796]],[5,"mixamorig:RightHandIndex2",18,[-39],[0,"71jOZJbf5UdoQLAur9FXE7",1,0],[1,-0.000002398016022198135,-0.0000011596857802942395,0.026979636400938034],[3,0.0015092614242356026,2.7755544003813748e-17,-4.1890419584123057e-20,0.999998861064328],[1,1,1.0000226497650146,1.000029444694519],[1,0.1729486852403547,3.1805546814635164e-15,0]],[11,"mixamorig:RightHandIndex3",19,[[10,"mixamorig:RightHandIndex4",-40,[0,"d4x7i1VJBS3pgrp5/ef5pE",1,0],[1,0.0000011132145800729631,4.6465348191304656e-7,0.021967468783259392]]],[0,"d1iq/L0GJZUbADJOj/W0hu",1,0],[1,0.0000016153761634996044,5.846828798894421e-7,0.027087954804301262],[3,-0.00015021949196708843,1.0423571170584707e-21,-6.938893825616049e-18,0.999999988717052],[1,1,0.999976634979248,0.9999774694442749],[1,-0.0172138858453682,0,-7.951386703658791e-16]],[5,"mixamorig:RightHandMiddle1",2,[-41],[0,"726HiAd/JQgpGuUuGEwNg2",1,0],[1,-0.011648532003164291,0.00013709474296774715,0.10247785598039627],[3,0.012839652043351872,0.03090228789828215,-0.0003852716294482395,0.999439864876236],[1,1.0000580549240112,0.9999222755432129,0.9999593496322632],[1,1.472017841469981,3.541980270797305,0.001342875410895994]],[5,"mixamorig:RightHandMiddle2",21,[-42],[0,"8en0oGBJBVJoF2Zv+dJPTx",1,0],[1,-0.000014644689144915901,0.0000016605879409326008,0.031247776001691818],[3,0.020683530593314826,2.774963794579242e-17,-5.740832973809236e-19,0.9997860728986954],[1,1,1.0000306367874146,1.000033974647522],[1,2.3703270449953466,3.1805546814635168e-15,0]],[11,"mixamorig:RightHandMiddle3",22,[[10,"mixamorig:RightHandMiddle4",-43,[0,"6ap5RRntlVd4tPIckcInAE",1,0],[1,0.00007599249511258677,2.847425548679894e-7,0.022624170407652855]]],[0,"38WVCk7dRddaq+rjU7iEpl",1,0],[1,-0.00005877185321878642,-0.00000127793157389533,0.029726898297667503],[3,-0.1387503260762911,2.8519306011326626e-7,-0.000049748722272360416,0.9903273926024191],[1,0.9999899864196777,0.9999740719795227,1.000014066696167],[1,-15.951078979518858,-0.0007586209836771267,-0.00565017667204615]],[5,"mixamorig:RightHandPinky1",2,[-44],[0,"43qNmicwla6phgl2IeI1M9",1,0],[1,0.03001558966934681,-0.0003140551852993667,0.08637554943561554],[3,0.004475062762682214,0.10303793216833522,-0.0004836367496868171,0.9946672430733999],[1,1.0000056028366089,0.99998939037323,0.9999727010726929],[1,0.515787157498333,11.828400894719055,-0.0022868371743805438]],[5,"mixamorig:RightHandPinky2",24,[-45],[0,"83VC3Fx49bTY41y/j1OUNf",1,0],[1,0.000007871652996982448,0.0000025668534817668842,0.03206361085176468],[3,0.007210736090344364,-3.319253046368626e-18,2.0841157776164954e-17,0.9999740023045776],[1,1,0.9999679923057556,0.9999836683273315],[1,0.826296650934089,-3.975693225808975e-16,2.385416009337135e-15]],[11,"mixamorig:RightHandPinky3",25,[[10,"mixamorig:RightHandPinky4",-46,[0,"b2o2hUF6FU36GLpwAn2Sur",1,0],[1,-0.00001135389811679488,1.323222562632509e-7,0.021798497065901756]]],[0,"e9OCvRUA5TtZxrJv+J54/m",1,0],[1,0.0000021988546450302238,-4.806747710972559e-7,0.02561076544225216],[3,0.02857194943497133,0,0,0.9995917385140222],[1,1,0.9999516010284424,1.0000333786010742],[1,3.274549866498169,0,0]],[5,"mixamorig:RightHandRing1",2,[-47],[0,"ceWJ7DG0lTaJfpioZzEskk",1,0],[1,0.011412135325372219,0.0011368828127160668,0.0986737608909607],[3,0.021652395072328433,0.043156717304734,-0.0009673492824602478,0.998833187161138],[1,1.0000206232070923,0.9999784231185913,0.9999752640724182],[1,2.483848488583375,4.948173949025551,-0.0036410635730759044]],[5,"mixamorig:RightHandRing2",27,[-48],[0,"ffjS+OjhNUJJfnJbEOo+hI",1,0],[1,-0.000011713743333530147,5.519517571883625e-7,0.029158152639865875],[3,-0.009696567566961276,0.000004845425860049317,0.00004949996651941377,0.9999529859466866],[1,1.0000102519989014,0.9999268054962158,0.9999900460243225],[1,-1.1111622392603622,0.000610220432267118,0.005666627697922006]],[11,"mixamorig:RightHandRing3",28,[[10,"mixamorig:RightHandRing4",-49,[0,"08ROW/o2ldBokDnObgNpS9",1,0],[1,0.000036169341910863295,9.222274002240738e-7,0.022989900782704353]]],[0,"94dBbT0tpVxayosThVPrqH",1,0],[1,-0.000019211698599974625,-3.108218606939772e-7,0.0298824030905962],[3,-0.0837850264772313,-1.3247615849928268e-17,-8.077246552015625e-18,0.9964838530243275],[1,1,1.000034213066101,1.0000275373458862],[1,-9.612325566665929,-1.5902773171181014e-15,-7.951386723513313e-16]],[5,"mixamorig:RightHandThumb1",2,[-50],[0,"208JDcx0NYIYrIUlnm87iB",1,0],[1,-0.024590039625763893,0.0063820346258580685,0.023592239245772362],[3,-0.08225713034060318,-0.5163709589633649,-0.049925599907966176,0.8509419673051822],[1,0.9999960660934448,0.999976396560669,1.0000698566436768],[1,-11.043391355230465,-62.5007543766444,-0.000984906316673703]],[5,"mixamorig:RightHandThumb2",30,[-51],[0,"7dFRQXC+BWtIJKCMrNL9W9",1,0],[1,0.0076600732281804085,-2.0586772109254525e-7,0.026657773181796074],[3,-0.12545940333971844,0.000009914809240337083,-0.000048994839955336003,0.992098752954989],[1,1.0000019073486328,0.9999578595161438,1.0000046491622925],[1,-14.414573017089847,0.0004227977626295748,-0.005712575515257973]],[11,"mixamorig:RightHandThumb3",31,[[10,"mixamorig:RightHandThumb4",-52,[0,"d3qaMg6dNYf5risXrIpNB9",1,0],[1,-0.0017108344472944736,-0.0000013352492942431127,0.023537851870059967]]],[0,"34DJMkitNaxZfuGlsRcF1N",1,0],[1,-0.005949236452579498,-4.894905032415409e-7,0.02967561036348343],[3,0.07716618672457172,-0.000012280389764543246,0.00004845975976480807,0.9970182431265899],[1,0.9999980330467224,0.9999845623970032,0.9999697208404541],[1,8.851393052328786,-0.0018315429658644893,0.005427931000428848]],[5,"mixamorig:LeftShoulder",5,[-53],[0,"dex9wvACBc06s2PtYD8C5R",1,0],[1,-0.045917998999357224,0.000727666774764657,0.11357276886701584],[3,0.5812614001474695,0.572204593524874,-0.40587216876783794,-0.4122922149002193],[1,1.0000416040420532,0.9999879598617554,1.0000181198120117],[1,-109.32009693390246,0.016976713720142443,89.10045527598827]],[5,"mixamorig:LeftArm",33,[-54],[0,"9dUAXVCfFVrqjBv4Rv4H28",1,0],[1,-0.000002451075033604866,-0.0000037109746244823327,0.09753599017858505],[3,0.1306511754224147,-0.02453842003680856,0.003278119475665819,0.9911192613583603],[1,0.9999566674232483,1.0000516176223755,0.9999527931213379],[1,15.01919752328849,-2.837161862260435,0.004931325427835162]],[5,"mixamorig:LeftForeArm",34,[3],[0,"a6x8bY4OFQkojjBPeWci0I",1,0],[1,0.00000787410135671962,-4.848506591770274e-7,0.20756512880325317],[3,0.0635964416672215,0.10972452047308809,-0.007030929829852314,0.9919004931140756],[1,1.000046730041504,0.9999332427978516,0.9999863505363464],[1,7.3370285936579425,12.624815136733513,0.00047054737035761657]],[5,"mixamorig:LeftHandMiddle1",3,[-55],[0,"249kdekT9QIaYc6XuQKbWq",1,0],[1,0.009820107370615005,0.00037238109507597983,0.09805892407894135],[3,0.011886837664349031,-0.013498637566465146,0.00018986184659106954,0.9998382138259517],[1,0.9999863505363464,0.9999533295631409,1.000006914138794],[1,1.3623329355106237,-1.547026253809614,0.0033661288963316945]],[5,"mixamorig:LeftHandMiddle2",36,[-56],[0,"14T34BcDZYh4UomiYT3BQp",1,0],[1,0.00003054197077290155,5.620260026262258e-7,0.032401829957962036],[3,-0.0005063483213213758,-7.026994560141105e-21,1.3877786028760893e-17,0.9999998718056805],[1,1,1.0000090599060059,1.0000207424163818],[1,-0.05802324602991467,0,1.5902773407317584e-15]],[11,"mixamorig:LeftHandMiddle3",37,[[10,"mixamorig:LeftHandMiddle4",-57,[0,"0f3RhteFFX/4vRlMvWMCoD",1,0],[1,-0.00005090103149996139,-5.491865522344597e-7,0.02431681752204895]]],[0,"06jsHI5jpbA6I1nlmlOjfN",1,0],[1,0.00002325664354430046,-0.0000010947272812700248,0.030516570433974266],[3,-0.0638993687072106,-0.0000016959782162719405,-0.00004964806481748518,0.9979563458443527],[1,1.0000113248825073,0.9999697208404541,1.0000203847885132],[1,-7.327320497902626,-0.0005574870461849502,-0.005665203792373803]],[5,"mixamorig:LeftHandPinky1",3,[-58],[0,"b6w1KLUt9fX5rs7vrsKPa2",1,0],[1,-0.031042784452438354,0.0003660395450424403,0.08977702260017395],[3,0.018947411289655783,-0.08729319256504521,0.001630472365213429,0.9960011223372637],[1,1.0000258684158325,0.999998927116394,0.9999939799308777],[1,2.1793661920635197,-10.017561693274246,-0.0034409228640732295]],[5,"mixamorig:LeftHandPinky2",39,[-59],[0,"14xGH9IidSk43yRlMPoCdC",1,0],[1,0.000006635598765569739,-3.3664400689303875e-7,0.030946988612413406],[3,-0.018801572195526025,0.000003816219839772204,0.00004947068840965181,0.9998232335873496],[1,0.9999877214431763,0.9999216794967651,0.9999878406524658],[1,-2.154628455464339,0.0005438139534737432,0.005659699193671753]],[11,"mixamorig:LeftHandPinky3",40,[[10,"mixamorig:LeftHandPinky4",-60,[0,"0bQA0d2KhQMKLnoakRImDJ",1,0],[1,0.000006559500889125047,-5.561059310821292e-7,0.020343994721770287]]],[0,"7aH0NGNo9We7/tVrmm3cQC",1,0],[1,-0.00001035764034895692,0.0000013294798009155784,0.024655021727085114],[3,0.021734323215036794,-0.000003961457853107807,-0.00004946579033987483,0.9997637804660793],[1,1.0000122785568237,1.0000604391098022,1.0000360012054443],[1,2.4907660928791415,-0.00033064438872240583,-0.005676889352970554]],[5,"mixamorig:LeftHandRing1",3,[-61],[0,"d5fGnbyqRbe6z9IVs9OEZs",1,0],[1,-0.010574562475085258,0.0004123144317418337,0.09733209758996964],[3,0.007356237470430902,-0.05039464952326853,0.0004065826568908986,0.9987022077477593],[1,1.000030279159546,0.9999841451644897,1.0000061988830566],[1,0.8442472157949733,-5.777435322778097,0.004049664316991417]],[5,"mixamorig:LeftHandRing2",42,[-62],[0,"aciGYVQoFVwqKHr2XJstNc",1,0],[1,0.000009358907846035436,-6.017040732331225e-7,0.030585160478949547],[3,-0.007070530040537308,-0.0000036904506533237365,-0.00004950938339458734,0.9999750022576301],[1,1.0000118017196655,0.9999583959579468,1.0000152587890625],[1,-0.8102298353788766,-0.000462997568874963,-0.005670225529515161]],[11,"mixamorig:LeftHandRing3",43,[[10,"mixamorig:LeftHandRing4",-63,[0,"29OaL+x79bFKb2DZEnSqRK",1,0],[1,-0.000013564610526373144,-1.669732938580637e-7,0.02451709657907486]]],[0,"88DV+DBDNdh4W+r2darbUI",1,0],[1,0.000006248490535654128,-8.687352988090424e-7,0.029886307194828987],[3,-0.022128559412822844,-1.3720841720674955e-17,-7.244290563108099e-18,0.9997551334493427],[1,1,1.0000181198120117,1.0000280141830444],[1,-2.5359531155283492,-1.5902773237499461e-15,-7.951387062959283e-16]],[5,"mixamorig:LeftHandThumb1",3,[-64],[0,"10Y9VfrudePoRgfqSl3YJr",1,0],[1,0.024633940309286118,0.007799278013408184,0.022856174036860466],[3,-0.10070449270482891,0.5198182544499136,0.06184524393909123,0.846063090609573],[1,1.000097632408142,0.9999443888664246,0.9999347925186157],[1,-13.574015055393739,63.13253106659413,-0.0026419526813703724]],[5,"mixamorig:LeftHandThumb2",45,[-65],[0,"09qQhSsdtaY7rMDMSryI25",1,0],[1,-0.007403497118502855,-6.831232326476311e-7,0.026585761457681656],[3,-0.08914843955414743,-1.3513235263008926e-17,-4.692816063236513e-18,0.9960183510985431],[1,1,1.0000098943710327,1.0000258684158325],[1,-10.229238692781918,-1.5902773093344222e-15,-3.975693498890071e-16]],[11,"mixamorig:LeftHandThumb3",46,[[10,"mixamorig:LeftHandThumb4",-66,[0,"23xD7LF8dZbb0E5Y0K1vEm",1,0],[1,0.0020763862412422895,-0.0000010571753819021978,0.024049684405326843]]],[0,"1bqlVMc71agbZRtEWNdlvL",1,0],[1,0.005323044024407864,0.0000019810706817224855,0.028939666226506233],[3,0.0021868930043691544,-7.587309268257245e-21,-3.4694386556269145e-18,0.9999976087466347],[1,1,0.9999953508377075,1.0000134706497192],[1,0.2505996785432146,0,-3.975693351829396e-16]],[5,"mixamorig:LeftHandIndex1",3,[-67],[0,"d6Gg2z3JJbeKqsO2BSXMMP",1,0],[1,0.03179012984037399,-0.0008816058398224413,0.09924770891666412],[3,-0.031069420973786722,0.021896193294284043,0.0006714019259837009,0.9992771372442315],[1,0.9999608397483826,0.9999880194664001,1.0000636577606201],[1,-3.5616978699014386,2.5104987995548314,-0.001075493650964419]],[5,"mixamorig:LeftHandIndex2",48,[-68],[0,"c6ig3AW8BRF6Y5aOR+5kTn",1,0],[1,-0.00001156820962933125,9.660933528721216e-7,0.030536191537976265],[3,0.01363844297741823,9.463570883479371e-20,6.938248532035605e-18,0.9999069921113422],[1,1,0.9999374151229858,0.9999372959136963],[1,1.5628988977478036,0,7.951386703658791e-16]],[11,"mixamorig:LeftHandIndex3",49,[[10,"mixamorig:LeftHandIndex4",-69,[0,"40sjxYD5JfQIPmdoMzGNKC",1,0],[1,0.000005422420144896023,0.0000012069104968759348,0.021943993866443634]]],[0,"a3/MW4GCZb5YS2CirqKm26",1,0],[1,0.000007706039468757808,-5.215513283474138e-7,0.027638649567961693],[3,0.0008554050512051797,-5.551706677003217e-17,-6.891406648987607e-18,0.9999996341410324],[1,1,0.9999837875366211,1.0000252723693848],[1,0.09802221037055961,-6.361109395390841e-15,-7.951386478074579e-16]],[5,"mixamorig:LeftUpLeg",4,[-70],[0,"c9Bap+dXBQUaqEZptn8eFu",1,0],[1,-0.07677999883890152,0.00021100000594742596,-0.04799799993634224],[3,-0.00007468013070496029,0.9996471414030361,-0.026409238600668555,0.002852932552581915],[1,1.0000163316726685,0.9999948740005493,1.0000110864639282],[1,3.0265910545602526,179.6734175878133,-0.017188454012337415]],[5,"mixamorig:LeftLeg",51,[-71],[0,"b6TSJ7E59bU7wKPJUBZDcx",1,0],[1,0.00001683535083429888,0.000010538574315432925,0.34423330426216125],[3,0.0003494797255532236,0.004956277991795624,-0.000013442729978037921,0.9999876564196593],[1,0.9999925494194031,1.0000371932983398,1.0000298023223877],[1,0.040054570310631955,0.5679504511077268,-0.00134191819245242]],[5,"mixamorig:LeftFoot",52,[-72],[0,"10FVnudhJR4KZAHY8LD1cm",1,0],[1,0.000006139491233625449,0.00000873165117809549,0.28511571884155273],[3,-0.479616336575581,-0.001541030453026191,0.0027543296612546277,0.8774726255462781],[1,1.0000195503234863,0.999971330165863,0.9999681711196899],[1,-57.320995376818274,-0.0035742433276755854,0.36164789105303075]],[11,"mixamorig:LeftToeBase",53,[[10,"mixamorig:LeftToe_End",-73,[0,"a0gLO5dv5Wr4m/QjMvqXVS",1,0],[1,-0.000001384120992042881,0.000002341124854865484,0.048779554665088654]]],[0,"5bbwz21dNR9ZSc4RBFPNz7",1,0],[1,0.000008686407454661094,-0.0000032168320558412233,0.12623876333236694],[3,-0.31799137674227834,-0.0030799596649769604,0.009330061288369638,0.9480426931960226],[1,0.9999279975891113,0.9999603629112244,1.0000324249267578],[1,-37.08489869316374,0.005380628778315759,1.1258998107590064]],[5,"mixamorig:RightUpLeg",4,[-74],[0,"2baNazTWlch5nt/ua+2mdz",1,0],[1,0.07677999883890152,-0.00036199999158270657,-0.04799799993634224],[3,0.00008153291822983612,0.9997076948098107,-0.024007918216792646,-0.00285274487706512],[1,1.0000163316726685,0.9999527335166931,0.999968945980072],[1,2.7513313465673668,-179.67341759424372,0.017188453527047984]],[5,"mixamorig:RightLeg",55,[-75],[0,"f8jFWg7PJa5INdAX+CHpg8",1,0],[1,-0.000016344867617590353,-0.000010120271326741204,0.3441654145717621],[3,0.006007375718430104,-0.004956683191124799,0.00001767518204803354,0.9999696707482224],[1,0.9999925494194031,1.0000488758087158,1.0000414848327637],[1,0.688400272746128,-0.5679982987167566,-0.001386788453889698]],[5,"mixamorig:RightFoot",56,[-76],[0,"c43IJ3/9FcSLc2N5A63gFN",1,0],[1,-0.0000057656980061437935,-1.1231261964894657e-7,0.28523045778274536],[3,-0.48660981981094087,0.0014567952700690447,-0.0026837645744010002,0.8736140786519034],[1,1.00001859664917,1.0000110864639282,1.0000088214874268],[1,-58.236303957409795,-0.003812456441181038,-0.34990353554362036]],[11,"mixamorig:RightToeBase",57,[[10,"mixamorig:RightToe_End",-77,[0,"dcToFvCSRfL75obdU1koPQ",1,0],[1,6.738453635080077e-7,0.0000021420198663690826,0.04878755286335945]]],[0,"32/l5xuoZW94seooiqrnHk",1,0],[1,0.000006049368039384717,0.0000036953574635845143,0.12793463468551636],[3,-0.3135044591226993,0.0031613882331682215,-0.009535586511579304,0.9495335867279806],[1,0.9999389052391052,0.9999600648880005,1.0000230073928833],[1,-36.543000812664296,0.001420696842498502,-1.1512034056824716]]],0,[0,7,1,0,0,1,0,0,1,0,0,1,0,0,1,0,-1,6,0,-2,7,0,-3,8,0,-4,9,0,-5,10,0,-6,4,0,-1,18,0,-2,21,0,-3,24,0,-4,27,0,-5,30,0,-1,36,0,-2,39,0,-3,42,0,-4,45,0,-5,48,0,-1,11,0,-2,51,0,-3,55,0,-1,13,0,-2,15,0,-3,33,0,0,6,0,0,7,0,0,8,0,0,9,0,0,10,0,-1,12,0,-1,14,0,3,14,0,-1,16,0,-1,17,0,-1,19,0,-1,20,0,3,20,0,-1,22,0,-1,23,0,3,23,0,-1,25,0,-1,26,0,3,26,0,-1,28,0,-1,29,0,3,29,0,-1,31,0,-1,32,0,3,32,0,-1,34,0,-1,35,0,-1,37,0,-1,38,0,3,38,0,-1,40,0,-1,41,0,3,41,0,-1,43,0,-1,44,0,3,44,0,-1,46,0,-1,47,0,3,47,0,-1,49,0,-1,50,0,3,50,0,-1,52,0,-1,53,0,-1,54,0,3,54,0,-1,56,0,-1,57,0,-1,58,0,3,58,0,12,1,2,3,17,3,3,35,5,3,12,77],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,-2,-3,1,11,-1,1,11,-1,1,11,-1,1,11,-1,1,11,-2,6,6],[14,14,14,62,63,14,64,65,14,66,67,14,68,69,14,70,71,41,0,0]],[[{"name":"Button","rect":{"x":810,"y":733,"width":301,"height":84},"offset":{"x":0.5,"y":-235},"originalSize":{"width":1920,"height":1080},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-150.5,-42,0,150.5,-42,0,-150.5,42,0,150.5,42,0],"indexes":[0,1,2,2,1,3],"uv":[810,347,1111,347,810,263,1111,263],"nuv":[0.421875,0.24351851851851852,0.5786458333333333,0.24351851851851852,0.421875,0.3212962962962963,0.5786458333333333,0.3212962962962963],"minPos":{"x":-150.5,"y":-42,"z":0},"maxPos":{"x":150.5,"y":42,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[2],0,[0],[15],[163]],[[{"name":"default_btn_normal","rect":{"x":0,"y":0,"width":40,"height":40},"offset":{"x":0,"y":0},"originalSize":{"width":40,"height":40},"rotated":false,"capInsets":[12,12,12,12],"vertices":{"rawPosition":[-20,-20,0,20,-20,0,-20,20,0,20,20,0],"indexes":[0,1,2,2,1,3],"uv":[0,40,40,40,0,0,40,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-20,"y":-20,"z":0},"maxPos":{"x":20,"y":20,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[2],0,[0],[15],[164]],[[{"name":"Canvas","rect":{"x":656,"y":203,"width":608,"height":682},"offset":{"x":0,"y":-4},"originalSize":{"width":1920,"height":1080},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-304,-341,0,304,-341,0,-304,341,0,304,341,0],"indexes":[0,1,2,2,1,3],"uv":[656,877,1264,877,656,195,1264,195],"nuv":[0.3416666666666667,0.18055555555555555,0.6583333333333333,0.18055555555555555,0.3416666666666667,0.812037037037037,0.6583333333333333,0.812037037037037],"minPos":{"x":-304,"y":-341,"z":0},"maxPos":{"x":304,"y":341,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[2],0,[0],[15],[165]],[[[26,"Skin-4",827093697,["mixamorig:Hips","mixamorig:Hips/mixamorig:Spine","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:Neck","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:Neck/mixamorig:Head","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm","mixamorig:Hips/mixamorig:LeftUpLeg","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm","mixamorig:Hips/mixamorig:RightUpLeg"],[[[7,-1,-1.2246468525851679e-16,1.2246468525851679e-16,0,1.2246468525851679e-16,-1.2246468525851679e-16,1,0,-1.2246468525851679e-16,1,1.2246468525851679e-16,0,-0.000018000000636675395,0.011030999943614006,-0.7311469912528992,1],[7,-1,-1.230981732588344e-16,1.2182456657840895e-16,0,1.2246468525851679e-16,-0.005199859384447336,0.999972939491272,0,-1.2246468525851679e-16,0.999972939491272,0.005199859384447336,0,-0.000018000000636675395,0.014835095964372158,-0.82405686378479,1],[7,-1,-1.230981732588344e-16,1.2182456657840895e-16,0,1.2246468525851679e-16,-0.005199859384447336,0.999972939491272,0,-1.2246468525851679e-16,0.999972939491272,0.005199859384447336,0,-0.000018000000636675395,0.014837212860584259,-0.9325408339500427,1],[7,-1,1.2246468525851679e-16,1.2246468525851679e-16,0,1.2246468525851679e-16,-1.2246468525851679e-16,1,0,1.2246468525851679e-16,1,1.2246468525851679e-16,0,-0.000018000000636675395,0.008623999543488026,-1.196079969406128,1],[7,-1,-1.2246468525851679e-16,1.2246468525851679e-16,0,1.2246468525851679e-16,-1.2246468525851679e-16,1,0,-1.2246468525851679e-16,1,1.2246468525851679e-16,0,-0.000018000000636675395,-0.007664999924600124,-1.280729055404663,1],[7,-1,-1.230981732588344e-16,1.2182456657840895e-16,0,1.2246468525851679e-16,-0.005199859384447336,0.999972939491272,0,-1.2246468525851679e-16,0.999972939491272,0.005199859384447336,0,-0.000018000000636675395,0.014839918352663517,-1.0565228462219238,1],[7,0.0003999891341663897,0.2725062966346741,-0.9621146321296692,0,0.005199858453124762,-0.9621848464012146,-0.27247726917266846,0,-0.9999728202819824,-0.004894358571618795,-0.0018017275724560022,0,-0.014843973331153393,1.1505576372146606,0.2631690502166748,1],[7,0.02989771217107773,0.08377767354249954,-0.9960726499557495,0,0.01349896751344204,-0.9964461326599121,-0.08340636640787125,0,-0.9994235634803772,-0.010952547192573547,-0.03092402033507824,0,-0.018966203555464745,1.1553386449813843,-0.0862056091427803,1],[7,-0.1856049746274948,-0.04205372929573059,-0.981752336025238,0,-0.004800128750503063,-0.9990644454956055,0.043702542781829834,0,-0.9826263785362244,0.012823815457522869,0.18522639572620392,0,-0.07847239077091217,1.1117013692855835,-0.41286036372184753,1],[7,-0.003399868728592992,-0.272509902715683,0.962199866771698,0,-0.0051997993141412735,-0.9621723890304565,-0.27252909541130066,0,0.9999613761901855,-0.005929830018430948,0.0018543280893936753,0,0.014842749573290348,1.150525689125061,0.2632911801338196,1],[7,0.031998228281736374,-0.08375004678964615,0.9959444403648376,0,-0.01519915834069252,-0.9964129328727722,-0.08329562842845917,0,0.9993446469306946,-0.01247295830398798,-0.03315620869398117,0,0.019841093569993973,1.1552884578704834,-0.08627022057771683,1],[7,0.9997628927230835,-0.0000338334430125542,0.020906250923871994,0,0.020899225026369095,-0.022297831252217293,-0.9995656609535217,0,0.0004999814555048943,0.9997026920318604,-0.022294066846370697,0,-0.08674037456512451,0.02748180367052555,0.6773518919944763,1],[7,-0.18268699944019318,0.042496584355831146,0.9822012782096863,0,0.0030997793655842543,-0.999071478843689,0.043795544654130936,0,0.9831300377845764,0.011046834290027618,0.18237632513046265,0,0.0790591686964035,1.111517310142517,-0.413185179233551,1],[7,0.9997628927230835,-0.00004146539868088439,-0.020906513556838036,0,-0.020899225026369095,-0.025898166000843048,-0.9994920492172241,0,-0.0004999814555048943,0.9996291399002075,-0.025895481929183006,0,0.08677563816308975,0.029379840940237045,0.677270770072937,1]],8,8,8,8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[26,"Skin-0",815998734,["mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandIndex1/mixamorig:LeftHandIndex2/mixamorig:LeftHandIndex3","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandMiddle1","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandMiddle1/mixamorig:LeftHandMiddle2","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandMiddle1/mixamorig:LeftHandMiddle2/mixamorig:LeftHandMiddle3","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandPinky1","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandPinky1/mixamorig:LeftHandPinky2","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandPinky1/mixamorig:LeftHandPinky2/mixamorig:LeftHandPinky3","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandRing1","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandRing1/mixamorig:LeftHandRing2","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandRing1/mixamorig:LeftHandRing2/mixamorig:LeftHandRing3","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandThumb1","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandThumb1/mixamorig:LeftHandThumb2","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandThumb1/mixamorig:LeftHandThumb2/mixamorig:LeftHandThumb3","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:Neck","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:Neck/mixamorig:Head","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandIndex1","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandIndex1/mixamorig:RightHandIndex2","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandIndex1/mixamorig:RightHandIndex2/mixamorig:RightHandIndex3","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandMiddle1","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandMiddle1/mixamorig:RightHandMiddle2","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandMiddle1/mixamorig:RightHandMiddle2/mixamorig:RightHandMiddle3","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandPinky1","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandPinky1/mixamorig:RightHandPinky2","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandPinky1/mixamorig:RightHandPinky2/mixamorig:RightHandPinky3","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandRing1","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandRing1/mixamorig:RightHandRing2","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandRing1/mixamorig:RightHandRing2/mixamorig:RightHandRing3","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandThumb1","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandThumb1/mixamorig:RightHandThumb2","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandThumb1/mixamorig:RightHandThumb2/mixamorig:RightHandThumb3","mixamorig:Hips/mixamorig:LeftUpLeg","mixamorig:Hips/mixamorig:LeftUpLeg/mixamorig:LeftLeg","mixamorig:Hips/mixamorig:LeftUpLeg/mixamorig:LeftLeg/mixamorig:LeftFoot","mixamorig:Hips/mixamorig:LeftUpLeg/mixamorig:LeftLeg/mixamorig:LeftFoot/mixamorig:LeftToeBase","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm","mixamorig:Hips/mixamorig:RightUpLeg","mixamorig:Hips/mixamorig:RightUpLeg/mixamorig:RightLeg","mixamorig:Hips/mixamorig:RightUpLeg/mixamorig:RightLeg/mixamorig:RightFoot","mixamorig:Hips/mixamorig:RightUpLeg/mixamorig:RightLeg/mixamorig:RightFoot/mixamorig:RightToeBase","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandIndex1","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandIndex1/mixamorig:LeftHandIndex2"],[[[7,-0.28629088401794434,-0.09903641045093536,0.9530132412910461,0,0.11189643293619156,-0.9912779927253723,-0.06940118968486786,0,0.951569676399231,0.08676952868700027,0.29488617181777954,0,-0.010842005722224712,1.2087291479110718,-0.6736346483230591,1],[7,-0.22408518195152283,0.0633598119020462,0.9725187420845032,0,0.11659228801727295,-0.9889393448829651,0.09130318462848663,0,0.9675360321998596,0.13384586572647095,0.214236781001091,0,-0.03905876353383064,1.0808947086334229,-0.807231605052948,1],[7,-0.22408518195152283,0.07486864924430847,0.9716836810112,0,0.11659228801727295,-0.9878419041633606,0.102999746799469,0,0.9675360321998596,0.13637910783290863,0.2126338928937912,0,-0.03908922150731087,1.070942759513855,-0.8522895574569702,1],[7,-0.22408518195152283,-0.03189750760793686,0.9740845561027527,0,0.11659228801727295,-0.9931257367134094,-0.005700456909835339,0,0.9675360321998596,0.11228837072849274,0.2262887805700302,0,-0.039124418050050735,1.1611956357955933,-0.7617326378822327,1],[7,-0.09490855783224106,0.08564632385969162,0.9917934536933899,0,0.12471123784780502,-0.987446665763855,0.09719919413328171,0,0.9876890182495117,0.13291053473949432,0.08303003013134003,0,-0.09859112650156021,1.0629849433898926,-0.8197846412658691,1],[7,-0.09490855783224106,0.08454117923974991,0.9918789267539978,0,0.12471123784780502,-0.9875624179840088,0.09609735757112503,0,0.9876890182495117,0.13281895220279694,0.0831773653626442,0,-0.09860416501760483,1.0639368295669556,-0.8466644287109375,1],[7,-0.09490855783224106,0.014159169979393482,0.9953683018684387,0,0.12471123784780502,-0.9918060898780823,0.025999095290899277,0,0.9876890182495117,0.12659165263175964,0.09236367791891098,0,-0.09861627221107483,1.1228171586990356,-0.7938486337661743,1],[7,-0.18080736696720123,0.02647634968161583,0.9831307530403137,0,0.11960487812757492,-0.991651713848114,0.04869692027568817,0,0.976239800453186,0.12639671564102173,0.17611747980117798,0,-0.051674582064151764,1.1118284463882446,-0.7656757831573486,1],[7,-0.18080736696720123,0.05087507516145706,0.9822103381156921,0,0.11960487812757492,-0.9901264905929565,0.07330101728439331,0,0.976239800453186,0.13072867691516876,0.17293262481689453,0,-0.05166363716125488,1.0917026996612549,-0.8238525390625,1],[7,-0.18080736696720123,-0.004445417318493128,0.9835197329521179,0,0.11960487812757492,-0.992635190486908,0.01750037632882595,0,0.976239800453186,0.12079025059938431,0.1800116002559662,0,-0.05168386176228523,1.1378953456878662,-0.7902763485908508,1],[7,-0.9714690446853638,-0.011126245371997356,0.2368462085723877,0,-0.009899684228003025,-0.9961439967155457,-0.08740359544754028,0,0.2368924468755722,-0.08725611120462418,0.9676268696784973,0,0.6063570380210876,1.1436806917190552,-0.10749055445194244,1],[7,-0.9714670777320862,-0.0594804622232914,0.2295266091823578,0,-0.009999661706387997,-0.9568716287612915,-0.29030272364616394,0,0.2368919849395752,-0.28431397676467896,0.9290083646774292,0,0.6149728298187256,1.1469615697860718,0.10272403806447983,1],[7,-0.9714690446853638,-0.0663003996014595,0.22765833139419556,0,-0.009899684228003025,-0.9479590058326721,-0.31833818554878235,0,0.2368924468755722,-0.31150540709495544,0.9202976822853088,0,0.6087509393692017,1.1444565057754517,0.10559186339378357,1],[7,-1,1.2246468525851679e-16,1.2246468525851679e-16,0,1.2246468525851679e-16,-1.2246468525851679e-16,1,0,1.2246468525851679e-16,1,1.2246468525851679e-16,0,-0.000018000000636675395,0.008623999543488026,-1.196079969406128,1],[7,-1,-1.2246468525851679e-16,1.2246468525851679e-16,0,1.2246468525851679e-16,-1.2246468525851679e-16,1,0,-1.2246468525851679e-16,1,1.2246468525851679e-16,0,-0.000018000000636675395,-0.007664999924600124,-1.280729055404663,1],[7,-1,-1.230981732588344e-16,1.2182456657840895e-16,0,1.2246468525851679e-16,-0.005199859384447336,0.999972939491272,0,-1.2246468525851679e-16,0.999972939491272,0.005199859384447336,0,-0.000018000000636675395,0.014839918352663517,-1.0565228462219238,1],[7,0.0003999891341663897,0.2725062966346741,-0.9621146321296692,0,0.005199858453124762,-0.9621848464012146,-0.27247726917266846,0,-0.9999728202819824,-0.004894358571618795,-0.0018017275724560022,0,-0.014843973331153393,1.1505576372146606,0.2631690502166748,1],[7,0.02989771217107773,0.08377767354249954,-0.9960726499557495,0,0.01349896751344204,-0.9964461326599121,-0.08340636640787125,0,-0.9994235634803772,-0.010952547192573547,-0.03092402033507824,0,-0.018966203555464745,1.1553386449813843,-0.0862056091427803,1],[7,-0.1856049746274948,-0.04205372929573059,-0.981752336025238,0,-0.004800128750503063,-0.9990644454956055,0.043702542781829834,0,-0.9826263785362244,0.012823815457522869,0.18522639572620392,0,-0.07847239077091217,1.1117013692855835,-0.41286036372184753,1],[7,-0.25958681106567383,-0.0485389418900013,-0.9644732475280762,0,-0.11049439013004303,-0.9906747341156006,0.07959546893835068,0,-0.9593513011932373,0.12723605334758759,0.25180524587631226,0,-0.0038435175083577633,1.094832181930542,-0.6852062940597534,1],[7,-0.2886214554309845,0.03443633019924164,-0.9568630456924438,0,-0.10800802707672119,-0.9941930770874023,-0.0032002327498048544,0,-0.9513707160949707,0.10242249816656113,0.29065099358558655,0,0.004592475946992636,1.160217523574829,-0.6960731148719788,1],[7,-0.2886214554309845,-0.031378310173749924,-0.9569666385650635,0,-0.10800802707672119,-0.9920372366905212,0.0651044175028801,0,-0.9513707160949707,0.12214422225952148,0.28292790055274963,0,0.004589254967868328,1.1076366901397705,-0.8030646443367004,1],[7,-0.2886214554309845,0.12716594338417053,-0.948935329914093,0,-0.10800802707672119,-0.9891732335090637,-0.09969428181648254,0,-0.9513707160949707,0.07372082769870758,0.29920080304145813,0,0.004660799168050289,1.2297357320785522,-0.6365599632263184,1],[7,-0.21709716320037842,-0.013850345276296139,-0.9760139584541321,0,-0.11379850655794144,-0.9927467703819275,0.03939688578248024,0,-0.9694873094558716,0.11963021010160446,0.2139342576265335,0,0.04169261083006859,1.1230114698410034,-0.7528533339500427,1],[7,-0.003399868728592992,-0.272509902715683,0.962199866771698,0,-0.0051997993141412735,-0.9621723890304565,-0.27252909541130066,0,0.9999613761901855,-0.005929830018430948,0.0018543280893936753,0,0.014842749573290348,1.150525689125061,0.2632911801338196,1],[7,-0.21709716320037842,-0.08450650423765182,-0.9724730849266052,0,-0.11379850655794144,-0.987225353717804,0.11119701713323593,0,-0.9694873094558716,0.1348041296005249,0.20471343398094177,0,0.0416584275662899,1.0632210969924927,-0.8631526827812195,1],[7,-0.21709716320037842,-0.05251341313123703,-0.9747776389122009,0,-0.11379850655794144,-0.9903654456138611,0.07870651036500931,0,-0.9694873094558716,0.12800851464271545,0.2090432345867157,0,0.04168904200196266,1.0920311212539673,-0.858361005783081,1],[7,-0.10009884834289551,-0.03865232691168785,-0.9942538738250732,0,-0.12179859727621078,-0.9912081956863403,0.05080278962850571,0,-0.9874886274337769,0.12617544829845428,0.0945185124874115,0,0.09115853160619736,1.1023327112197876,-0.768347978591919,1],[7,-0.10009641200304031,-0.08469389379024506,-0.9913382530212402,0,-0.12189562618732452,-0.9878442883491516,0.09669428318738937,0,-0.9874646067619324,0.13052767515182495,0.08855283260345459,0,0.0912519097328186,1.06422758102417,-0.8480936288833618,1],[7,-0.10009641200304031,-0.07596441358327866,-0.9920476078987122,0,-0.12189562618732452,-0.9886696338653564,0.087995246052742,0,-0.9874646067619324,0.12974467873573303,0.08969858288764954,0,0.09126424044370651,1.0718775987625122,-0.8627884984016418,1],[7,-0.1417018622159958,0.010831422172486782,-0.9898965358734131,0,-0.11920157074928284,-0.992897629737854,0.006200604606419802,0,-0.9827129244804382,0.11887512356042862,0.14198558032512665,0,0.08036985248327255,1.1412372589111328,-0.7216088771820068,1],[7,-0.1417018622159958,-0.06808038800954819,-0.987525999546051,0,-0.11920157074928284,-0.9891983866691589,0.08529321104288101,0,-0.9827129244804382,0.1298050582408905,0.13204994797706604,0,0.08034490048885345,1.077616572380066,-0.8406785726547241,1],[7,-0.1417052447795868,0.011614140123128891,-0.9898779392242432,0,-0.11910440772771835,-0.9928302764892578,0.0054004257544875145,0,-0.982736349105835,0.1186530590057373,0.14208050072193146,0,0.0802745446562767,1.144047737121582,-0.7796730995178223,1],[7,0.031998228281736374,-0.08375004678964615,0.9959444403648376,0,-0.01519915834069252,-0.9964129328727722,-0.08329562842845917,0,0.9993446469306946,-0.01247295830398798,-0.03315620869398117,0,0.019841093569993973,1.1552884578704834,-0.08627022057771683,1],[7,-0.967456042766571,0.0076287551783025265,-0.2530362010002136,0,0.01490086317062378,-0.9960970878601074,-0.08700309693813324,0,-0.2527146339416504,-0.08793788403272629,0.9635571241378784,0,-0.6083029508590698,1.1415621042251587,-0.11866358667612076,1],[7,-0.967456042766571,0.06387988477945328,-0.24496100842952728,0,0.01490086317062378,-0.9515666961669922,-0.30702242255210876,0,-0.2527146339416504,-0.30065587162971497,0.9196701645851135,0,-0.616193950176239,1.1455289125442505,0.11151722073554993,1],[7,-0.9674531817436218,0.05437473580241203,-0.24723683297634125,0,0.015000823885202408,-0.9626606702804565,-0.2703867554664612,0,-0.2527138888835907,-0.265302836894989,0.9304357767105103,0,-0.6101186871528625,1.1477857828140259,0.0370626226067543,1],[7,0.9997628927230835,-0.0000338334430125542,0.020906250923871994,0,0.020899225026369095,-0.022297831252217293,-0.9995656609535217,0,0.0004999814555048943,0.9997026920318604,-0.022294066846370697,0,-0.08674037456512451,0.02748180367052555,0.6773518919944763,1],[7,0.9999921321868896,0.0000883969696587883,0.002800478832796216,0,0.0027999780140817165,-0.06720529496669769,-0.9977708458900452,0,0.00009999921167036518,0.9977787137031555,-0.0672050192952156,0,-0.08039093762636185,0.04324999451637268,0.34964871406555176,1],[7,0.9999725818634033,-0.004661174025386572,-0.0023839990608394146,0,0.0024999314919114113,0.8252240419387817,-0.564825713634491,0,0.004599873907864094,0.5648073554039001,0.82523113489151,0,-0.08019447326660156,-0.04890288785099983,0.07947662472724915,1],[7,0.9991112947463989,-0.03288520500063896,-0.02657797560095787,0,0.03350037708878517,0.9991469383239746,0.022999176755547523,0,0.025800291448831558,-0.02386876754462719,0.9993636608123779,0,-0.08197646588087082,-0.004314009100198746,-0.07253146171569824,1],[7,-0.18268699944019318,0.042496584355831146,0.9822012782096863,0,0.0030997793655842543,-0.999071478843689,0.043795544654130936,0,0.9831300377845764,0.011046834290027618,0.18237632513046265,0,0.0790591686964035,1.111517310142517,-0.413185179233551,1],[7,0.9997628927230835,-0.00004146539868088439,-0.020906513556838036,0,-0.020899225026369095,-0.025898166000843048,-0.9994920492172241,0,-0.0004999814555048943,0.9996291399002075,-0.025895481929183006,0,0.08677563816308975,0.029379840940237045,0.677270770072937,1],[7,0.9999921321868896,-0.0000718327792128548,-0.002800896530970931,0,-0.0027999780140817165,-0.06130237132310867,-0.9981307983398438,0,-0.00009999921167036518,0.9981386065483093,-0.06130209192633629,0,0.08042687177658081,0.04181550443172455,0.34985223412513733,1],[7,0.9999725818634033,0.004667466506361961,0.002371559152379632,0,-0.0024999314919114113,0.8237103223800659,-0.5670163631439209,0,-0.004599873907864094,0.5669980049133301,0.8237174153327942,0,0.08023487031459808,-0.04923200234770775,0.07881933450698853,1],[7,0.9990703463554382,0.03316332399845123,0.02699742466211319,0,-0.03379899635910988,0.9991080164909363,0.023398231714963913,0,-0.02619922161102295,-0.024289125576615334,0.9993231296539307,0,0.08204847574234009,-0.004251581151038408,-0.07280229032039642,1],[7,-0.26099786162376404,0.04164012894034386,0.9644648432731628,0,0.11389906704425812,-0.9907215237617493,0.07360392063856125,0,0.9585921764373779,0.12905409932136536,0.2538512945175171,0,0.001271965797059238,1.0990911722183228,-0.6782902479171753,1],[7,-0.28629088401794434,0.028152789920568466,0.9577484726905823,0,0.11189643293619156,-0.9917912483215332,0.06260274350643158,0,0.951569676399231,0.12509624660015106,0.2807883024215698,0,-0.010759271681308746,1.1101781129837036,-0.7681275606155396,1],[7,-0.286284476518631,-0.016650967299938202,0.9580004811286926,0,0.11199392378330231,-0.9935575723648071,0.016200020909309387,0,0.9515483975410461,0.11192861944437027,0.28631895780563354,0,-0.010940439067780972,1.1462405920028687,-0.7467488050460815,1]],8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[6,".bin",3041090799,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":84160,"length":11112,"count":5556,"stride":2}},{"primitiveMode":7,"jointMapIndex":1,"vertexBundelIndices":[1],"indexView":{"offset":186312,"length":11304,"count":5652,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":84160,"count":1052,"stride":80},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]},{"view":{"offset":95272,"length":91040,"count":1138,"stride":80},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}],"jointMaps":[[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,24,33,37,38,39,40,41,46,47,48],[0,14,16,17,18,19,20,21,22,23,25,26,27,28,29,30,31,32,34,35,36,42,43,44,45]]},"minPosition",8,[1,-0.7975566387176514,-0.000006440000106522348,-0.0960114449262619],"maxPosition",8,[1,0.7975208759307861,1.587031602859497,0.17290210723876953]]],-1],0,0,[],[],[]],[[[6,".bin",1227363943,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":48640,"length":12144,"count":3036,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":48640,"count":608,"stride":80},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}],"jointMaps":[[0,1,2,3,4,5,6,7,8]]},"minPosition",8,[1,-0.15157416462898254,0.11749826371669769,-0.11389782279729843],"maxPosition",8,[1,0.15157416462898254,0.7589419484138489,0.10818479210138321]]],-1],0,0,[],[],[]],[[[26,"Skin-2",1270863804,["mixamorig:Hips","mixamorig:Hips/mixamorig:LeftUpLeg","mixamorig:Hips/mixamorig:LeftUpLeg/mixamorig:LeftLeg","mixamorig:Hips/mixamorig:LeftUpLeg/mixamorig:LeftLeg/mixamorig:LeftFoot","mixamorig:Hips/mixamorig:LeftUpLeg/mixamorig:LeftLeg/mixamorig:LeftFoot/mixamorig:LeftToeBase","mixamorig:Hips/mixamorig:RightUpLeg","mixamorig:Hips/mixamorig:RightUpLeg/mixamorig:RightLeg","mixamorig:Hips/mixamorig:RightUpLeg/mixamorig:RightLeg/mixamorig:RightFoot","mixamorig:Hips/mixamorig:RightUpLeg/mixamorig:RightLeg/mixamorig:RightFoot/mixamorig:RightToeBase"],[[[7,-1,-1.2246468525851679e-16,1.2246468525851679e-16,0,1.2246468525851679e-16,-1.2246468525851679e-16,1,0,-1.2246468525851679e-16,1,1.2246468525851679e-16,0,-0.000018000000636675395,0.011030999943614006,-0.7311469912528992,1],[7,0.9997628927230835,-0.0000338334430125542,0.020906250923871994,0,0.020899225026369095,-0.022297831252217293,-0.9995656609535217,0,0.0004999814555048943,0.9997026920318604,-0.022294066846370697,0,-0.08674037456512451,0.02748180367052555,0.6773518919944763,1],[7,0.9999921321868896,0.0000883969696587883,0.002800478832796216,0,0.0027999780140817165,-0.06720529496669769,-0.9977708458900452,0,0.00009999921167036518,0.9977787137031555,-0.0672050192952156,0,-0.08039093762636185,0.04324999451637268,0.34964871406555176,1],[7,0.9999725818634033,-0.004661174025386572,-0.0023839990608394146,0,0.0024999314919114113,0.8252240419387817,-0.564825713634491,0,0.004599873907864094,0.5648073554039001,0.82523113489151,0,-0.08019447326660156,-0.04890288785099983,0.07947662472724915,1],[7,0.9991112947463989,-0.03288520500063896,-0.02657797560095787,0,0.03350037708878517,0.9991469383239746,0.022999176755547523,0,0.025800291448831558,-0.02386876754462719,0.9993636608123779,0,-0.08197646588087082,-0.004314009100198746,-0.07253146171569824,1],[7,0.9997628927230835,-0.00004146539868088439,-0.020906513556838036,0,-0.020899225026369095,-0.025898166000843048,-0.9994920492172241,0,-0.0004999814555048943,0.9996291399002075,-0.025895481929183006,0,0.08677563816308975,0.029379840940237045,0.677270770072937,1],[7,0.9999921321868896,-0.0000718327792128548,-0.002800896530970931,0,-0.0027999780140817165,-0.06130237132310867,-0.9981307983398438,0,-0.00009999921167036518,0.9981386065483093,-0.06130209192633629,0,0.08042687177658081,0.04181550443172455,0.34985223412513733,1],[7,0.9999725818634033,0.004667466506361961,0.002371559152379632,0,-0.0024999314919114113,0.8237103223800659,-0.5670163631439209,0,-0.004599873907864094,0.5669980049133301,0.8237174153327942,0,0.08023487031459808,-0.04923200234770775,0.07881933450698853,1],[7,0.9990703463554382,0.03316332399845123,0.02699742466211319,0,-0.03379899635910988,0.9991080164909363,0.023398231714963913,0,-0.02619922161102295,-0.024289125576615334,0.9993231296539307,0,0.08204847574234009,-0.004251581151038408,-0.07280229032039642,1]],8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[6,".bin",2451894603,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":54320,"length":9744,"count":2436,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":54320,"count":679,"stride":80},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}],"jointMaps":[[0,1,2,3,4,5,6,7,8,9,10,11,12,13]]},"minPosition",8,[1,-0.3159109950065613,0.7306424975395203,-0.11454768478870392],"maxPosition",8,[1,0.3159109950065613,1.2425488233566284,0.12268481403589249]]],-1],0,0,[],[],[]],[[[6,".bin",460923126,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":18240,"length":3984,"count":996,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":18240,"count":228,"stride":80},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}],"jointMaps":[[0,1]]},"minPosition",8,[1,-0.12549521028995514,1.3615026473999023,-0.11833766847848892],"maxPosition",8,[1,0.12549518048763275,1.5946580171585083,0.15640175342559814]]],-1],0,0,[],[],[]],[[[6,".bin",3240355805,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":98784,"length":25920,"count":6480,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":98784,"count":1372,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,1,2,3,4,5]]},"minPosition",8,[1,-0.13052673637866974,-0.0025902700144797564,-0.0949660986661911],"maxPosition",8,[1,0.13052667677402496,0.09797298163175583,0.14288467168807983]]],-1],0,0,[],[],[]],[[[26,"Skin-3",2023014407,["mixamorig:Hips/mixamorig:LeftUpLeg/mixamorig:LeftLeg","mixamorig:Hips/mixamorig:LeftUpLeg/mixamorig:LeftLeg/mixamorig:LeftFoot","mixamorig:Hips/mixamorig:LeftUpLeg/mixamorig:LeftLeg/mixamorig:LeftFoot/mixamorig:LeftToeBase","mixamorig:Hips/mixamorig:RightUpLeg/mixamorig:RightLeg","mixamorig:Hips/mixamorig:RightUpLeg/mixamorig:RightLeg/mixamorig:RightFoot","mixamorig:Hips/mixamorig:RightUpLeg/mixamorig:RightLeg/mixamorig:RightFoot/mixamorig:RightToeBase"],[[[7,0.9999921321868896,0.0000883969696587883,0.002800478832796216,0,0.0027999780140817165,-0.06720529496669769,-0.9977708458900452,0,0.00009999921167036518,0.9977787137031555,-0.0672050192952156,0,-0.08039093762636185,0.04324999451637268,0.34964871406555176,1],[7,0.9999725818634033,-0.004661174025386572,-0.0023839990608394146,0,0.0024999314919114113,0.8252240419387817,-0.564825713634491,0,0.004599873907864094,0.5648073554039001,0.82523113489151,0,-0.08019447326660156,-0.04890288785099983,0.07947662472724915,1],[7,0.9991112947463989,-0.03288520500063896,-0.02657797560095787,0,0.03350037708878517,0.9991469383239746,0.022999176755547523,0,0.025800291448831558,-0.02386876754462719,0.9993636608123779,0,-0.08197646588087082,-0.004314009100198746,-0.07253146171569824,1],[7,0.9999921321868896,-0.0000718327792128548,-0.002800896530970931,0,-0.0027999780140817165,-0.06130237132310867,-0.9981307983398438,0,-0.00009999921167036518,0.9981386065483093,-0.06130209192633629,0,0.08042687177658081,0.04181550443172455,0.34985223412513733,1],[7,0.9999725818634033,0.004667466506361961,0.002371559152379632,0,-0.0024999314919114113,0.8237103223800659,-0.5670163631439209,0,-0.004599873907864094,0.5669980049133301,0.8237174153327942,0,0.08023487031459808,-0.04923200234770775,0.07881933450698853,1],[7,0.9990703463554382,0.03316332399845123,0.02699742466211319,0,-0.03379899635910988,0.9991080164909363,0.023398231714963913,0,-0.02619922161102295,-0.024289125576615334,0.9993231296539307,0,0.08204847574234009,-0.004251581151038408,-0.07280229032039642,1]],8,8,8,8,8,8]]],0,0,[],[],[]],[[[26,"Skin-1",659996016,["mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:Neck","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:Neck/mixamorig:Head"],[[[7,-1,1.2246468525851679e-16,1.2246468525851679e-16,0,1.2246468525851679e-16,-1.2246468525851679e-16,1,0,1.2246468525851679e-16,1,1.2246468525851679e-16,0,-0.000018000000636675395,0.008623999543488026,-1.196079969406128,1],[7,-1,-1.2246468525851679e-16,1.2246468525851679e-16,0,1.2246468525851679e-16,-1.2246468525851679e-16,1,0,-1.2246468525851679e-16,1,1.2246468525851679e-16,0,-0.000018000000636675395,-0.007664999924600124,-1.280729055404663,1]],8,8]]],0,0,[],[],[]],[[[15,"SUV_BodyMat",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_NORMAL_MAP":true,"USE_ALBEDO_MAP":true,"USE_METALLIC_ROUGHNESS_MAP":true},{},{}],[[[{"roughness":0.609,"metallic":0.999},"mainTexture",6,0,"normalMap",6,1,"metallicRoughnessMap",6,2,"occlusionMap",6,3],{},{}],11,0,0]]],0,0,[0,0,0,0,0],[8,14,17,22,5],[54,166,167,168,1]],[[[15,"Coffee",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_NORMAL_MAP":true,"USE_ALBEDO_MAP":true},{},{}],[[[{},"mainTexture",6,0,"normalMap",6,1],{},{}],11,0,0]]],0,0,[0,0,0],[8,14,5],[72,72,1]],[[[15,"sdjja_2",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{},{},{}],[[[{},"mainColor",8,[4,4283979868]],{},{}],11,0,0]]],0,0,[0],[5],[1]],[[[53,"SR_C",".mp3",10.579592],-1],0,0,[],[],[]],[[[32,"Chroem","0",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{},{},{}],[[[{"roughness":0.386,"metallic":0.466,"specularIntensity":0.448},"mainColor",8,[4,4290098613],"emissive",8,[4,4280295456]],{},{}],11,0,0]]],0,0,[0],[5],[1]],[[[15,"Plastic_Black",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_NORMAL_MAP":true,"USE_ALBEDO_MAP":true},{},{}],[[[{"occlusion":0.163,"roughness":0.225,"metallic":0.225,"specularIntensity":0.43},"mainColor",8,[4,4280427042],"mainTexture",6,0,"normalMap",6,1],{},{}],11,0,0]]],0,0,[0,0,0],[8,14,5],[55,42,1]],[[[32,"level_0_label_3d","1",[{"rasterizerState":{"cullMode":0},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_TEXTURE":true}],[[[{},"mainColor",8,[4,4290230710]]],11]]],0,0,[0],[5],[43]],[[[26,"Skin-4",827093697,["mixamorig:Hips","mixamorig:Hips/mixamorig:Spine","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:Neck","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:Neck/mixamorig:Head","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm","mixamorig:Hips/mixamorig:LeftUpLeg","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm","mixamorig:Hips/mixamorig:RightUpLeg"],[[[7,-1,-1.2246468525851679e-16,1.2246468525851679e-16,0,1.2246468525851679e-16,-1.2246468525851679e-16,1,0,-1.2246468525851679e-16,1,1.2246468525851679e-16,0,-0.000018000000636675395,0.011030999943614006,-0.7311469912528992,1],[7,-1,-1.230981732588344e-16,1.2182456657840895e-16,0,1.2246468525851679e-16,-0.005199859384447336,0.999972939491272,0,-1.2246468525851679e-16,0.999972939491272,0.005199859384447336,0,-0.000018000000636675395,0.014835095964372158,-0.82405686378479,1],[7,-1,-1.230981732588344e-16,1.2182456657840895e-16,0,1.2246468525851679e-16,-0.005199859384447336,0.999972939491272,0,-1.2246468525851679e-16,0.999972939491272,0.005199859384447336,0,-0.000018000000636675395,0.014837212860584259,-0.9325408339500427,1],[7,-1,1.2246468525851679e-16,1.2246468525851679e-16,0,1.2246468525851679e-16,-1.2246468525851679e-16,1,0,1.2246468525851679e-16,1,1.2246468525851679e-16,0,-0.000018000000636675395,0.008623999543488026,-1.196079969406128,1],[7,-1,-1.2246468525851679e-16,1.2246468525851679e-16,0,1.2246468525851679e-16,-1.2246468525851679e-16,1,0,-1.2246468525851679e-16,1,1.2246468525851679e-16,0,-0.000018000000636675395,-0.007664999924600124,-1.280729055404663,1],[7,-1,-1.230981732588344e-16,1.2182456657840895e-16,0,1.2246468525851679e-16,-0.005199859384447336,0.999972939491272,0,-1.2246468525851679e-16,0.999972939491272,0.005199859384447336,0,-0.000018000000636675395,0.014839918352663517,-1.0565228462219238,1],[7,0.0003999891341663897,0.2725062966346741,-0.9621146321296692,0,0.005199858453124762,-0.9621848464012146,-0.27247726917266846,0,-0.9999728202819824,-0.004894358571618795,-0.0018017275724560022,0,-0.014843973331153393,1.1505576372146606,0.2631690502166748,1],[7,0.02989771217107773,0.08377767354249954,-0.9960726499557495,0,0.01349896751344204,-0.9964461326599121,-0.08340636640787125,0,-0.9994235634803772,-0.010952547192573547,-0.03092402033507824,0,-0.018966203555464745,1.1553386449813843,-0.0862056091427803,1],[7,-0.1856049746274948,-0.04205372929573059,-0.981752336025238,0,-0.004800128750503063,-0.9990644454956055,0.043702542781829834,0,-0.9826263785362244,0.012823815457522869,0.18522639572620392,0,-0.07847239077091217,1.1117013692855835,-0.41286036372184753,1],[7,-0.003399868728592992,-0.272509902715683,0.962199866771698,0,-0.0051997993141412735,-0.9621723890304565,-0.27252909541130066,0,0.9999613761901855,-0.005929830018430948,0.0018543280893936753,0,0.014842749573290348,1.150525689125061,0.2632911801338196,1],[7,0.031998228281736374,-0.08375004678964615,0.9959444403648376,0,-0.01519915834069252,-0.9964129328727722,-0.08329562842845917,0,0.9993446469306946,-0.01247295830398798,-0.03315620869398117,0,0.019841093569993973,1.1552884578704834,-0.08627022057771683,1],[7,0.9997628927230835,-0.0000338334430125542,0.020906250923871994,0,0.020899225026369095,-0.022297831252217293,-0.9995656609535217,0,0.0004999814555048943,0.9997026920318604,-0.022294066846370697,0,-0.08674037456512451,0.02748180367052555,0.6773518919944763,1],[7,-0.18268699944019318,0.042496584355831146,0.9822012782096863,0,0.0030997793655842543,-0.999071478843689,0.043795544654130936,0,0.9831300377845764,0.011046834290027618,0.18237632513046265,0,0.0790591686964035,1.111517310142517,-0.413185179233551,1],[7,0.9997628927230835,-0.00004146539868088439,-0.020906513556838036,0,-0.020899225026369095,-0.025898166000843048,-0.9994920492172241,0,-0.0004999814555048943,0.9996291399002075,-0.025895481929183006,0,0.08677563816308975,0.029379840940237045,0.677270770072937,1]],8,8,8,8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[26,"Skin-0",815998734,["mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandIndex1/mixamorig:LeftHandIndex2/mixamorig:LeftHandIndex3","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandMiddle1","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandMiddle1/mixamorig:LeftHandMiddle2","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandMiddle1/mixamorig:LeftHandMiddle2/mixamorig:LeftHandMiddle3","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandPinky1","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandPinky1/mixamorig:LeftHandPinky2","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandPinky1/mixamorig:LeftHandPinky2/mixamorig:LeftHandPinky3","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandRing1","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandRing1/mixamorig:LeftHandRing2","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandRing1/mixamorig:LeftHandRing2/mixamorig:LeftHandRing3","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandThumb1","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandThumb1/mixamorig:LeftHandThumb2","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandThumb1/mixamorig:LeftHandThumb2/mixamorig:LeftHandThumb3","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:Neck","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:Neck/mixamorig:Head","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandIndex1","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandIndex1/mixamorig:RightHandIndex2","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandIndex1/mixamorig:RightHandIndex2/mixamorig:RightHandIndex3","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandMiddle1","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandMiddle1/mixamorig:RightHandMiddle2","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandMiddle1/mixamorig:RightHandMiddle2/mixamorig:RightHandMiddle3","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandPinky1","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandPinky1/mixamorig:RightHandPinky2","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandPinky1/mixamorig:RightHandPinky2/mixamorig:RightHandPinky3","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandRing1","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandRing1/mixamorig:RightHandRing2","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandRing1/mixamorig:RightHandRing2/mixamorig:RightHandRing3","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandThumb1","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandThumb1/mixamorig:RightHandThumb2","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandThumb1/mixamorig:RightHandThumb2/mixamorig:RightHandThumb3","mixamorig:Hips/mixamorig:LeftUpLeg","mixamorig:Hips/mixamorig:LeftUpLeg/mixamorig:LeftLeg","mixamorig:Hips/mixamorig:LeftUpLeg/mixamorig:LeftLeg/mixamorig:LeftFoot","mixamorig:Hips/mixamorig:LeftUpLeg/mixamorig:LeftLeg/mixamorig:LeftFoot/mixamorig:LeftToeBase","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm","mixamorig:Hips/mixamorig:RightUpLeg","mixamorig:Hips/mixamorig:RightUpLeg/mixamorig:RightLeg","mixamorig:Hips/mixamorig:RightUpLeg/mixamorig:RightLeg/mixamorig:RightFoot","mixamorig:Hips/mixamorig:RightUpLeg/mixamorig:RightLeg/mixamorig:RightFoot/mixamorig:RightToeBase","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandIndex1","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandIndex1/mixamorig:LeftHandIndex2"],[[[7,-0.28629088401794434,-0.09903641045093536,0.9530132412910461,0,0.11189643293619156,-0.9912779927253723,-0.06940118968486786,0,0.951569676399231,0.08676952868700027,0.29488617181777954,0,-0.010842005722224712,1.2087291479110718,-0.6736346483230591,1],[7,-0.22408518195152283,0.0633598119020462,0.9725187420845032,0,0.11659228801727295,-0.9889393448829651,0.09130318462848663,0,0.9675360321998596,0.13384586572647095,0.214236781001091,0,-0.03905876353383064,1.0808947086334229,-0.807231605052948,1],[7,-0.22408518195152283,0.07486864924430847,0.9716836810112,0,0.11659228801727295,-0.9878419041633606,0.102999746799469,0,0.9675360321998596,0.13637910783290863,0.2126338928937912,0,-0.03908922150731087,1.070942759513855,-0.8522895574569702,1],[7,-0.22408518195152283,-0.03189750760793686,0.9740845561027527,0,0.11659228801727295,-0.9931257367134094,-0.005700456909835339,0,0.9675360321998596,0.11228837072849274,0.2262887805700302,0,-0.039124418050050735,1.1611956357955933,-0.7617326378822327,1],[7,-0.09490855783224106,0.08564632385969162,0.9917934536933899,0,0.12471123784780502,-0.987446665763855,0.09719919413328171,0,0.9876890182495117,0.13291053473949432,0.08303003013134003,0,-0.09859112650156021,1.0629849433898926,-0.8197846412658691,1],[7,-0.09490855783224106,0.08454117923974991,0.9918789267539978,0,0.12471123784780502,-0.9875624179840088,0.09609735757112503,0,0.9876890182495117,0.13281895220279694,0.0831773653626442,0,-0.09860416501760483,1.0639368295669556,-0.8466644287109375,1],[7,-0.09490855783224106,0.014159169979393482,0.9953683018684387,0,0.12471123784780502,-0.9918060898780823,0.025999095290899277,0,0.9876890182495117,0.12659165263175964,0.09236367791891098,0,-0.09861627221107483,1.1228171586990356,-0.7938486337661743,1],[7,-0.18080736696720123,0.02647634968161583,0.9831307530403137,0,0.11960487812757492,-0.991651713848114,0.04869692027568817,0,0.976239800453186,0.12639671564102173,0.17611747980117798,0,-0.051674582064151764,1.1118284463882446,-0.7656757831573486,1],[7,-0.18080736696720123,0.05087507516145706,0.9822103381156921,0,0.11960487812757492,-0.9901264905929565,0.07330101728439331,0,0.976239800453186,0.13072867691516876,0.17293262481689453,0,-0.05166363716125488,1.0917026996612549,-0.8238525390625,1],[7,-0.18080736696720123,-0.004445417318493128,0.9835197329521179,0,0.11960487812757492,-0.992635190486908,0.01750037632882595,0,0.976239800453186,0.12079025059938431,0.1800116002559662,0,-0.05168386176228523,1.1378953456878662,-0.7902763485908508,1],[7,-0.9714690446853638,-0.011126245371997356,0.2368462085723877,0,-0.009899684228003025,-0.9961439967155457,-0.08740359544754028,0,0.2368924468755722,-0.08725611120462418,0.9676268696784973,0,0.6063570380210876,1.1436806917190552,-0.10749055445194244,1],[7,-0.9714670777320862,-0.0594804622232914,0.2295266091823578,0,-0.009999661706387997,-0.9568716287612915,-0.29030272364616394,0,0.2368919849395752,-0.28431397676467896,0.9290083646774292,0,0.6149728298187256,1.1469615697860718,0.10272403806447983,1],[7,-0.9714690446853638,-0.0663003996014595,0.22765833139419556,0,-0.009899684228003025,-0.9479590058326721,-0.31833818554878235,0,0.2368924468755722,-0.31150540709495544,0.9202976822853088,0,0.6087509393692017,1.1444565057754517,0.10559186339378357,1],[7,-1,1.2246468525851679e-16,1.2246468525851679e-16,0,1.2246468525851679e-16,-1.2246468525851679e-16,1,0,1.2246468525851679e-16,1,1.2246468525851679e-16,0,-0.000018000000636675395,0.008623999543488026,-1.196079969406128,1],[7,-1,-1.2246468525851679e-16,1.2246468525851679e-16,0,1.2246468525851679e-16,-1.2246468525851679e-16,1,0,-1.2246468525851679e-16,1,1.2246468525851679e-16,0,-0.000018000000636675395,-0.007664999924600124,-1.280729055404663,1],[7,-1,-1.230981732588344e-16,1.2182456657840895e-16,0,1.2246468525851679e-16,-0.005199859384447336,0.999972939491272,0,-1.2246468525851679e-16,0.999972939491272,0.005199859384447336,0,-0.000018000000636675395,0.014839918352663517,-1.0565228462219238,1],[7,0.0003999891341663897,0.2725062966346741,-0.9621146321296692,0,0.005199858453124762,-0.9621848464012146,-0.27247726917266846,0,-0.9999728202819824,-0.004894358571618795,-0.0018017275724560022,0,-0.014843973331153393,1.1505576372146606,0.2631690502166748,1],[7,0.02989771217107773,0.08377767354249954,-0.9960726499557495,0,0.01349896751344204,-0.9964461326599121,-0.08340636640787125,0,-0.9994235634803772,-0.010952547192573547,-0.03092402033507824,0,-0.018966203555464745,1.1553386449813843,-0.0862056091427803,1],[7,-0.1856049746274948,-0.04205372929573059,-0.981752336025238,0,-0.004800128750503063,-0.9990644454956055,0.043702542781829834,0,-0.9826263785362244,0.012823815457522869,0.18522639572620392,0,-0.07847239077091217,1.1117013692855835,-0.41286036372184753,1],[7,-0.25958681106567383,-0.0485389418900013,-0.9644732475280762,0,-0.11049439013004303,-0.9906747341156006,0.07959546893835068,0,-0.9593513011932373,0.12723605334758759,0.25180524587631226,0,-0.0038435175083577633,1.094832181930542,-0.6852062940597534,1],[7,-0.2886214554309845,0.03443633019924164,-0.9568630456924438,0,-0.10800802707672119,-0.9941930770874023,-0.0032002327498048544,0,-0.9513707160949707,0.10242249816656113,0.29065099358558655,0,0.004592475946992636,1.160217523574829,-0.6960731148719788,1],[7,-0.2886214554309845,-0.031378310173749924,-0.9569666385650635,0,-0.10800802707672119,-0.9920372366905212,0.0651044175028801,0,-0.9513707160949707,0.12214422225952148,0.28292790055274963,0,0.004589254967868328,1.1076366901397705,-0.8030646443367004,1],[7,-0.2886214554309845,0.12716594338417053,-0.948935329914093,0,-0.10800802707672119,-0.9891732335090637,-0.09969428181648254,0,-0.9513707160949707,0.07372082769870758,0.29920080304145813,0,0.004660799168050289,1.2297357320785522,-0.6365599632263184,1],[7,-0.21709716320037842,-0.013850345276296139,-0.9760139584541321,0,-0.11379850655794144,-0.9927467703819275,0.03939688578248024,0,-0.9694873094558716,0.11963021010160446,0.2139342576265335,0,0.04169261083006859,1.1230114698410034,-0.7528533339500427,1],[7,-0.003399868728592992,-0.272509902715683,0.962199866771698,0,-0.0051997993141412735,-0.9621723890304565,-0.27252909541130066,0,0.9999613761901855,-0.005929830018430948,0.0018543280893936753,0,0.014842749573290348,1.150525689125061,0.2632911801338196,1],[7,-0.21709716320037842,-0.08450650423765182,-0.9724730849266052,0,-0.11379850655794144,-0.987225353717804,0.11119701713323593,0,-0.9694873094558716,0.1348041296005249,0.20471343398094177,0,0.0416584275662899,1.0632210969924927,-0.8631526827812195,1],[7,-0.21709716320037842,-0.05251341313123703,-0.9747776389122009,0,-0.11379850655794144,-0.9903654456138611,0.07870651036500931,0,-0.9694873094558716,0.12800851464271545,0.2090432345867157,0,0.04168904200196266,1.0920311212539673,-0.858361005783081,1],[7,-0.10009884834289551,-0.03865232691168785,-0.9942538738250732,0,-0.12179859727621078,-0.9912081956863403,0.05080278962850571,0,-0.9874886274337769,0.12617544829845428,0.0945185124874115,0,0.09115853160619736,1.1023327112197876,-0.768347978591919,1],[7,-0.10009641200304031,-0.08469389379024506,-0.9913382530212402,0,-0.12189562618732452,-0.9878442883491516,0.09669428318738937,0,-0.9874646067619324,0.13052767515182495,0.08855283260345459,0,0.0912519097328186,1.06422758102417,-0.8480936288833618,1],[7,-0.10009641200304031,-0.07596441358327866,-0.9920476078987122,0,-0.12189562618732452,-0.9886696338653564,0.087995246052742,0,-0.9874646067619324,0.12974467873573303,0.08969858288764954,0,0.09126424044370651,1.0718775987625122,-0.8627884984016418,1],[7,-0.1417018622159958,0.010831422172486782,-0.9898965358734131,0,-0.11920157074928284,-0.992897629737854,0.006200604606419802,0,-0.9827129244804382,0.11887512356042862,0.14198558032512665,0,0.08036985248327255,1.1412372589111328,-0.7216088771820068,1],[7,-0.1417018622159958,-0.06808038800954819,-0.987525999546051,0,-0.11920157074928284,-0.9891983866691589,0.08529321104288101,0,-0.9827129244804382,0.1298050582408905,0.13204994797706604,0,0.08034490048885345,1.077616572380066,-0.8406785726547241,1],[7,-0.1417052447795868,0.011614140123128891,-0.9898779392242432,0,-0.11910440772771835,-0.9928302764892578,0.0054004257544875145,0,-0.982736349105835,0.1186530590057373,0.14208050072193146,0,0.0802745446562767,1.144047737121582,-0.7796730995178223,1],[7,0.031998228281736374,-0.08375004678964615,0.9959444403648376,0,-0.01519915834069252,-0.9964129328727722,-0.08329562842845917,0,0.9993446469306946,-0.01247295830398798,-0.03315620869398117,0,0.019841093569993973,1.1552884578704834,-0.08627022057771683,1],[7,-0.967456042766571,0.0076287551783025265,-0.2530362010002136,0,0.01490086317062378,-0.9960970878601074,-0.08700309693813324,0,-0.2527146339416504,-0.08793788403272629,0.9635571241378784,0,-0.6083029508590698,1.1415621042251587,-0.11866358667612076,1],[7,-0.967456042766571,0.06387988477945328,-0.24496100842952728,0,0.01490086317062378,-0.9515666961669922,-0.30702242255210876,0,-0.2527146339416504,-0.30065587162971497,0.9196701645851135,0,-0.616193950176239,1.1455289125442505,0.11151722073554993,1],[7,-0.9674531817436218,0.05437473580241203,-0.24723683297634125,0,0.015000823885202408,-0.9626606702804565,-0.2703867554664612,0,-0.2527138888835907,-0.265302836894989,0.9304357767105103,0,-0.6101186871528625,1.1477857828140259,0.0370626226067543,1],[7,0.9997628927230835,-0.0000338334430125542,0.020906250923871994,0,0.020899225026369095,-0.022297831252217293,-0.9995656609535217,0,0.0004999814555048943,0.9997026920318604,-0.022294066846370697,0,-0.08674037456512451,0.02748180367052555,0.6773518919944763,1],[7,0.9999921321868896,0.0000883969696587883,0.002800478832796216,0,0.0027999780140817165,-0.06720529496669769,-0.9977708458900452,0,0.00009999921167036518,0.9977787137031555,-0.0672050192952156,0,-0.08039093762636185,0.04324999451637268,0.34964871406555176,1],[7,0.9999725818634033,-0.004661174025386572,-0.0023839990608394146,0,0.0024999314919114113,0.8252240419387817,-0.564825713634491,0,0.004599873907864094,0.5648073554039001,0.82523113489151,0,-0.08019447326660156,-0.04890288785099983,0.07947662472724915,1],[7,0.9991112947463989,-0.03288520500063896,-0.02657797560095787,0,0.03350037708878517,0.9991469383239746,0.022999176755547523,0,0.025800291448831558,-0.02386876754462719,0.9993636608123779,0,-0.08197646588087082,-0.004314009100198746,-0.07253146171569824,1],[7,-0.18268699944019318,0.042496584355831146,0.9822012782096863,0,0.0030997793655842543,-0.999071478843689,0.043795544654130936,0,0.9831300377845764,0.011046834290027618,0.18237632513046265,0,0.0790591686964035,1.111517310142517,-0.413185179233551,1],[7,0.9997628927230835,-0.00004146539868088439,-0.020906513556838036,0,-0.020899225026369095,-0.025898166000843048,-0.9994920492172241,0,-0.0004999814555048943,0.9996291399002075,-0.025895481929183006,0,0.08677563816308975,0.029379840940237045,0.677270770072937,1],[7,0.9999921321868896,-0.0000718327792128548,-0.002800896530970931,0,-0.0027999780140817165,-0.06130237132310867,-0.9981307983398438,0,-0.00009999921167036518,0.9981386065483093,-0.06130209192633629,0,0.08042687177658081,0.04181550443172455,0.34985223412513733,1],[7,0.9999725818634033,0.004667466506361961,0.002371559152379632,0,-0.0024999314919114113,0.8237103223800659,-0.5670163631439209,0,-0.004599873907864094,0.5669980049133301,0.8237174153327942,0,0.08023487031459808,-0.04923200234770775,0.07881933450698853,1],[7,0.9990703463554382,0.03316332399845123,0.02699742466211319,0,-0.03379899635910988,0.9991080164909363,0.023398231714963913,0,-0.02619922161102295,-0.024289125576615334,0.9993231296539307,0,0.08204847574234009,-0.004251581151038408,-0.07280229032039642,1],[7,-0.26099786162376404,0.04164012894034386,0.9644648432731628,0,0.11389906704425812,-0.9907215237617493,0.07360392063856125,0,0.9585921764373779,0.12905409932136536,0.2538512945175171,0,0.001271965797059238,1.0990911722183228,-0.6782902479171753,1],[7,-0.28629088401794434,0.028152789920568466,0.9577484726905823,0,0.11189643293619156,-0.9917912483215332,0.06260274350643158,0,0.951569676399231,0.12509624660015106,0.2807883024215698,0,-0.010759271681308746,1.1101781129837036,-0.7681275606155396,1],[7,-0.286284476518631,-0.016650967299938202,0.9580004811286926,0,0.11199392378330231,-0.9935575723648071,0.016200020909309387,0,0.9515483975410461,0.11192861944437027,0.28631895780563354,0,-0.010940439067780972,1.1462405920028687,-0.7467488050460815,1]],8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[6,".bin",3041090799,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":84160,"length":11112,"count":5556,"stride":2}},{"primitiveMode":7,"jointMapIndex":1,"vertexBundelIndices":[1],"indexView":{"offset":186312,"length":11304,"count":5652,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":84160,"count":1052,"stride":80},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]},{"view":{"offset":95272,"length":91040,"count":1138,"stride":80},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}],"jointMaps":[[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,24,33,37,38,39,40,41,46,47,48],[0,14,16,17,18,19,20,21,22,23,25,26,27,28,29,30,31,32,34,35,36,42,43,44,45]]},"minPosition",8,[1,-0.7975566387176514,-0.000006440000106522348,-0.0960114449262619],"maxPosition",8,[1,0.7975208759307861,1.587031602859497,0.17290210723876953]]],-1],0,0,[],[],[]],[[[15,"Bob.001",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true,"DCC_APP_NAME":0}],[[[{"transparencyFactor":0,"albedoScale":1,"specularFactor":1,"shininessExponent":20},"mainColor",8,[4,4294967295],"specularColor",8,[4,4281545523],"emissiveColor",8,[4,4278190080],"mainTexture",6,0]],11]]],0,0,[0,0],[8,5],[169,10]],[[[6,".bin",1227363943,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":48640,"length":12144,"count":3036,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":48640,"count":608,"stride":80},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}],"jointMaps":[[0,1,2,3,4,5,6,7,8]]},"minPosition",8,[1,-0.15157416462898254,0.11749826371669769,-0.11389782279729843],"maxPosition",8,[1,0.15157416462898254,0.7589419484138489,0.10818479210138321]]],-1],0,0,[],[],[]],[[[26,"Skin-2",1270863804,["mixamorig:Hips","mixamorig:Hips/mixamorig:LeftUpLeg","mixamorig:Hips/mixamorig:LeftUpLeg/mixamorig:LeftLeg","mixamorig:Hips/mixamorig:LeftUpLeg/mixamorig:LeftLeg/mixamorig:LeftFoot","mixamorig:Hips/mixamorig:LeftUpLeg/mixamorig:LeftLeg/mixamorig:LeftFoot/mixamorig:LeftToeBase","mixamorig:Hips/mixamorig:RightUpLeg","mixamorig:Hips/mixamorig:RightUpLeg/mixamorig:RightLeg","mixamorig:Hips/mixamorig:RightUpLeg/mixamorig:RightLeg/mixamorig:RightFoot","mixamorig:Hips/mixamorig:RightUpLeg/mixamorig:RightLeg/mixamorig:RightFoot/mixamorig:RightToeBase"],[[[7,-1,-1.2246468525851679e-16,1.2246468525851679e-16,0,1.2246468525851679e-16,-1.2246468525851679e-16,1,0,-1.2246468525851679e-16,1,1.2246468525851679e-16,0,-0.000018000000636675395,0.011030999943614006,-0.7311469912528992,1],[7,0.9997628927230835,-0.0000338334430125542,0.020906250923871994,0,0.020899225026369095,-0.022297831252217293,-0.9995656609535217,0,0.0004999814555048943,0.9997026920318604,-0.022294066846370697,0,-0.08674037456512451,0.02748180367052555,0.6773518919944763,1],[7,0.9999921321868896,0.0000883969696587883,0.002800478832796216,0,0.0027999780140817165,-0.06720529496669769,-0.9977708458900452,0,0.00009999921167036518,0.9977787137031555,-0.0672050192952156,0,-0.08039093762636185,0.04324999451637268,0.34964871406555176,1],[7,0.9999725818634033,-0.004661174025386572,-0.0023839990608394146,0,0.0024999314919114113,0.8252240419387817,-0.564825713634491,0,0.004599873907864094,0.5648073554039001,0.82523113489151,0,-0.08019447326660156,-0.04890288785099983,0.07947662472724915,1],[7,0.9991112947463989,-0.03288520500063896,-0.02657797560095787,0,0.03350037708878517,0.9991469383239746,0.022999176755547523,0,0.025800291448831558,-0.02386876754462719,0.9993636608123779,0,-0.08197646588087082,-0.004314009100198746,-0.07253146171569824,1],[7,0.9997628927230835,-0.00004146539868088439,-0.020906513556838036,0,-0.020899225026369095,-0.025898166000843048,-0.9994920492172241,0,-0.0004999814555048943,0.9996291399002075,-0.025895481929183006,0,0.08677563816308975,0.029379840940237045,0.677270770072937,1],[7,0.9999921321868896,-0.0000718327792128548,-0.002800896530970931,0,-0.0027999780140817165,-0.06130237132310867,-0.9981307983398438,0,-0.00009999921167036518,0.9981386065483093,-0.06130209192633629,0,0.08042687177658081,0.04181550443172455,0.34985223412513733,1],[7,0.9999725818634033,0.004667466506361961,0.002371559152379632,0,-0.0024999314919114113,0.8237103223800659,-0.5670163631439209,0,-0.004599873907864094,0.5669980049133301,0.8237174153327942,0,0.08023487031459808,-0.04923200234770775,0.07881933450698853,1],[7,0.9990703463554382,0.03316332399845123,0.02699742466211319,0,-0.03379899635910988,0.9991080164909363,0.023398231714963913,0,-0.02619922161102295,-0.024289125576615334,0.9993231296539307,0,0.08204847574234009,-0.004251581151038408,-0.07280229032039642,1]],8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[6,".bin",2451894603,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":54320,"length":9744,"count":2436,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":54320,"count":679,"stride":80},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}],"jointMaps":[[0,1,2,3,4,5,6,7,8,9,10,11,12,13]]},"minPosition",8,[1,-0.3159109950065613,0.7306424975395203,-0.11454768478870392],"maxPosition",8,[1,0.3159109950065613,1.2425488233566284,0.12268481403589249]]],-1],0,0,[],[],[]],[[[6,".bin",460923126,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":18240,"length":3984,"count":996,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":18240,"count":228,"stride":80},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}],"jointMaps":[[0,1]]},"minPosition",8,[1,-0.12549521028995514,1.3615026473999023,-0.11833766847848892],"maxPosition",8,[1,0.12549518048763275,1.5946580171585083,0.15640175342559814]]],-1],0,0,[],[],[]],[[[6,".bin",2851543188,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":98784,"length":25920,"count":6480,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":98784,"count":1372,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,1,2,3,4,5]]},"minPosition",8,[1,-0.13052673637866974,-0.0025902700144797564,-0.0949660986661911],"maxPosition",8,[1,0.13052667677402496,0.09797298163175583,0.14288467168807983]]],-1],0,0,[],[],[]],[[[26,"Skin-3",2023014407,["mixamorig:Hips/mixamorig:LeftUpLeg/mixamorig:LeftLeg","mixamorig:Hips/mixamorig:LeftUpLeg/mixamorig:LeftLeg/mixamorig:LeftFoot","mixamorig:Hips/mixamorig:LeftUpLeg/mixamorig:LeftLeg/mixamorig:LeftFoot/mixamorig:LeftToeBase","mixamorig:Hips/mixamorig:RightUpLeg/mixamorig:RightLeg","mixamorig:Hips/mixamorig:RightUpLeg/mixamorig:RightLeg/mixamorig:RightFoot","mixamorig:Hips/mixamorig:RightUpLeg/mixamorig:RightLeg/mixamorig:RightFoot/mixamorig:RightToeBase"],[[[7,0.9999921321868896,0.0000883969696587883,0.002800478832796216,0,0.0027999780140817165,-0.06720529496669769,-0.9977708458900452,0,0.00009999921167036518,0.9977787137031555,-0.0672050192952156,0,-0.08039093762636185,0.04324999451637268,0.34964871406555176,1],[7,0.9999725818634033,-0.004661174025386572,-0.0023839990608394146,0,0.0024999314919114113,0.8252240419387817,-0.564825713634491,0,0.004599873907864094,0.5648073554039001,0.82523113489151,0,-0.08019447326660156,-0.04890288785099983,0.07947662472724915,1],[7,0.9991112947463989,-0.03288520500063896,-0.02657797560095787,0,0.03350037708878517,0.9991469383239746,0.022999176755547523,0,0.025800291448831558,-0.02386876754462719,0.9993636608123779,0,-0.08197646588087082,-0.004314009100198746,-0.07253146171569824,1],[7,0.9999921321868896,-0.0000718327792128548,-0.002800896530970931,0,-0.0027999780140817165,-0.06130237132310867,-0.9981307983398438,0,-0.00009999921167036518,0.9981386065483093,-0.06130209192633629,0,0.08042687177658081,0.04181550443172455,0.34985223412513733,1],[7,0.9999725818634033,0.004667466506361961,0.002371559152379632,0,-0.0024999314919114113,0.8237103223800659,-0.5670163631439209,0,-0.004599873907864094,0.5669980049133301,0.8237174153327942,0,0.08023487031459808,-0.04923200234770775,0.07881933450698853,1],[7,0.9990703463554382,0.03316332399845123,0.02699742466211319,0,-0.03379899635910988,0.9991080164909363,0.023398231714963913,0,-0.02619922161102295,-0.024289125576615334,0.9993231296539307,0,0.08204847574234009,-0.004251581151038408,-0.07280229032039642,1]],8,8,8,8,8,8]]],0,0,[],[],[]],[[[34],[89,"5Ani",[-3,-4,-5,-6,-7,-8],[[102,-2,[1,"afyJr8fMBShZ+C9ndjwHor"],[16,17,18,19,20],21]],[0,"b09eXCKoZVi4NdvSf8rvKn",-1,0]],[30,"mixamorig:RightHand",[-9,-10,-11,-12,-13],[0,"97rgL+I85VDoagOC8g3TuD",1,0],[1,0.000007111990726116346,-0.000014006089259055443,0.2400234192609787],[3,0.015950409678256977,-0.03536230694403726,0.05519348749510116,0.9977217901884371],[1,1.0000392198562622,1.0000402927398682,1.0000531673431396],[1,2.0599912538676994,-4.172400145689746,6.258099917416975]],[30,"mixamorig:LeftHand",[-14,-15,-16,-17,-18],[0,"ddKWO5tjNYlKYX6M1vZutB",1,0],[1,-0.0000033931585221580463,0.000004594316123984754,0.23987677693367004],[3,0.012727347090965778,0.03762700003164952,-0.05777421542991537,0.9975391538862534],[1,0.9999698400497437,1.000075101852417,0.9999244809150696],[1,1.7154632504015552,4.418698925094537,-6.563615133608637]],[55,"mixamorig:Hips",1,[-19,-20,-21],[0,"e8bG2rbwdfEI8Q2BaQhckV",1,0],[1,-0.000018000000636675395,0.7311469912528992,-0.011030999943614006],[3,0,0.7071067811865476,0.7071067811865476,8.659560751628624e-17],[1,-90.00000000000003,180,7.016709451900449e-15]],[45,"mixamorig:Spine2",[-22,-23,-24],[0,"c0gbP8MwxWsrzReVP8KH1X",1,0],[1,-7.806255952088362e-20,-0.000002706326768020517,0.12398198246955872]],[12,"Bob_body",1,[[25,-25,[1,"c3fCo524FYPZDkdit3utZy"],[0,1],[3],1,2,3]],[0,"504bjZRq5S4pFavb7A97L3",1,0]],[12,"Bob_hair",1,[[25,-26,[1,"61gQp+KEhVGaJVm1kqlzAh"],[4],[3],1,5,6]],[0,"656ZqL9Phb5Zf39M5p5AE/",1,0]],[12,"Bob_pants",1,[[25,-27,[1,"70mDITEItWjJLA0t1DwhlL"],[7],[3],1,8,9]],[0,"62LCft/Gla8a1L8dNmx4+q",1,0]],[12,"Bob_shoes",1,[[25,-28,[1,"f9zmQ9GoJdsIoJiiBqdntk"],[10],[3],1,11,12]],[0,"48IgevmntTi4WZbl+9ClRK",1,0]],[12,"Bob_tshirt",1,[[25,-29,[1,"14KXL7E+RUf5Ddpq2DRzCq"],[13],[3],1,14,15]],[0,"b5HWzP6MRX24kEypfoKLUN",1,0]],[5,"mixamorig:Spine",4,[-30],[0,"2b9rTO6z9WHIB20G2s4d+j",1,0],[1,-5.63785109012947e-20,0.00048099999548867345,0.09298700094223022],[3,-0.002599973742786015,3.749386969142393e-33,9.748340240427955e-36,0.9999966200625565],[1,1,1.0000134706497192,1.0000134706497192],[1,-0.29793538028066674,4.29649550374903e-31,-4.3506575803276074e-41]],[46,"mixamorig:Spine1",11,[5],[0,"4dGBVk8xlaxJwTpgTT0KRu",1,0],[1,-7.155734622747665e-20,-0.0000021167427348700585,0.10848399251699448]],[5,"mixamorig:Neck",5,[-31],[0,"2chAUatu1babvzooDBih0h",1,0],[1,-8.890457736832954e-20,-0.000003295910801170976,0.13947997987270355],[3,0.002599973742786015,-3.183963248624237e-19,1.2246095516601117e-16,0.9999966200625565],[1,1,0.999986469745636,0.999986469745636],[1,0.29793538028066674,-7.29708180761021e-17,1.4032849480248883e-14]],[58,"mixamorig:Head",13,[[10,"mixamorig:HeadTop_End",-32,[0,"938FLmxthdVL6jFfh7qD5c",1,0],[1,-7.121039901972018e-18,0.058125998824834824,0.30206701159477234]]],[0,"f7cAhdKNhfBYh1K7E1nICe",1,0],[1,1.9949319560142975e-18,0.01628899946808815,0.084648996591568]],[5,"mixamorig:RightShoulder",5,[-33],[0,"dc3i28nJZb8IOrK1pVHz5I",1,0],[1,0.060263000428676605,-0.000028168838980491273,0.12214785069227219],[3,-0.5639104913909292,0.5641360949742353,-0.42655653296779306,0.42638591466998227],[1,0.9999865889549255,0.9999468326568604,1.0000556707382202],[1,0,105.81244194071161,-90]],[5,"mixamorig:RightArm",15,[-34],[0,"77MH9yHDJUi7VR/ZiJdOc/",1,0],[1,0.0000018851487766369246,0.00000427271015723818,0.1265861690044403],[3,0.09592469554332887,0.01525471509608108,-0.001444959978792015,0.9952706458762445],[1,1.0000245571136475,1.0000132322311401,0.9999257922172546],[1,11.01034051951572,1.755952483412222,0.002885146148329066]],[5,"mixamorig:RightForeArm",16,[2],[0,"d6i0iikDlVLYCcc6QcpQxx",1,0],[1,-0.0000059201470321568195,-0.000004742736109619727,0.19180577993392944],[3,0.06366339886030538,-0.10825621022230915,0.006945003553648988,0.9920581291030767],[1,0.9999539256095886,0.9999905228614807,1.0000028610229492],[1,7.343594049883157,-12.455259682516587,-0.00024190947791609172]],[5,"mixamorig:RightHandIndex1",2,[-35],[0,"f2pVrJ+LlZGZo8p8qRsunq",1,0],[1,-0.03245886415243149,-0.0006876370171085,0.10816731303930283],[3,-0.04333072235083181,-0.015091490276918113,-0.0006738591596980794,0.9989465658060044],[1,0.9999374151229858,0.9999423623085022,0.9999377727508545],[1,-4.967490595418363,-1.731144953121116,-0.0022029216952239006]],[5,"mixamorig:RightHandIndex2",18,[-36],[0,"5bFgehdRhS6r0eZ7bHrJOZ",1,0],[1,0.000003221039378331625,-0.0000011648443205558578,0.02900322712957859],[3,0.03436752049681162,-7.154177612525927e-19,-2.0804384926259717e-17,0.999409262281925],[1,1,1.000027060508728,1.0000017881393433],[1,3.9390034234421876,-1.3315597092204721e-24,-2.3854160585653996e-15]],[11,"mixamorig:RightHandIndex3",19,[[10,"mixamorig:RightHandIndex4",-37,[0,"9aR49Ek5xQqpXPagyy68ZL",1,0],[1,0.00007353726687142625,0.0000013120520634402055,0.021863095462322235]]],[0,"eb0uGROS9bKYJIfQsugmmj",1,0],[1,-0.0000715442220098339,-4.214836621940776e-7,0.027970239520072937],[3,-0.08289841497182925,2.5934370202238525e-17,2.304592335477547e-17,0.9965580027249585],[1,1,0.9999864101409912,1.0000663995742798],[1,-9.510372677257644,3.180554575204682e-15,2.3854159486002747e-15]],[5,"mixamorig:RightHandMiddle1",2,[-38],[0,"95MgGQYeJZT7FqV0zBLqOL",1,0],[1,-0.010880134999752045,-0.0006498924340121448,0.10819046199321747],[3,-0.01778211786398752,0.021900442981534627,0.0003501933182109004,0.9996019428983338],[1,0.9999811053276062,0.9999659657478333,1.0000134706497192],[1,-2.038178184794448,2.510123401400497,-0.004512883410769191]],[5,"mixamorig:RightHandMiddle2",21,[-39],[0,"76vIClgXhUQbbCoNSR3Xh/",1,0],[1,0.00003418165215407498,-0.0000025167089461319847,0.03099985420703888],[3,0.03623407315001189,2.514243892943461e-19,6.934337342972929e-18,0.9993433303639744],[1,1,1.0000602006912231,0.999974250793457],[1,4.153028027731927,0,7.951386703658792e-16]],[11,"mixamorig:RightHandMiddle3",22,[[10,"mixamorig:RightHandMiddle4",-40,[0,"abDOvb2ExbJ6f4UuXakSmT",1,0],[1,1.1779845721093807e-7,-9.955451787391212e-7,0.02477804571390152]]],[0,"4d1tMPN7pRSoTYzNOtdRon",1,0],[1,-0.00003061149982386269,-5.225316499490873e-7,0.03057563677430153],[3,-0.01642961103270941,2.7523823577034974e-17,1.433192858280603e-17,0.999865024831509],[1,1,0.9999799728393555,0.9999454617500305],[1,-1.882779452685202,3.180554789253529e-15,1.5902774100611075e-15]],[5,"mixamorig:RightHandPinky1",2,[-41],[0,"5clajgMvhV+a2y0Z7VUA4z",1,0],[1,0.03215956687927246,0.0001748849608702585,0.09854201227426529],[3,-0.004966872810865418,0.081171387032356,0.00034296734252772733,0.9966877236502544],[1,0.9999797940254211,1.0000367164611816,0.9999477863311768],[1,-0.5704760379085633,9.311881205417714,-0.007028658397223045]],[5,"mixamorig:RightHandPinky2",24,[-42],[0,"7bngt80mxUuYOGOclh7xGC",1,0],[1,0.000018834383809007704,-2.82330404388631e-7,0.029547538608312607],[3,0.023187758473016944,0.0000036885815121329228,0.000049485206699410874,0.9997311265508371],[1,1.0000121593475342,0.9999308586120605,1.0000560283660889],[1,2.6573595502478042,0.0002910784585947005,0.0056788633322826425]],[11,"mixamorig:RightHandPinky3",25,[[10,"mixamorig:RightHandPinky4",-43,[0,"14vOTcETxUTJC8SsVNFS59",1,0],[1,-0.000005432204943645047,7.064750775498396e-7,0.019670896232128143]]],[0,"41s2lNVjpeb6GecnkuFbFw",1,0],[1,-0.000012334857274254318,4.4581975089386106e-7,0.024094533175230026],[3,-0.004400999625541807,2.075540358054824e-17,1.3969266968083653e-17,0.9999903155542537],[1,1,0.9999874234199524,0.9999977350234985],[1,-0.5043190363822357,2.3854159655981727e-15,1.5902772665079599e-15]],[5,"mixamorig:RightHandRing1",2,[-44],[0,"570XahpaVYeov4i0toSio2",1,0],[1,0.011157887987792492,-0.001009488943964243,0.10743608325719833],[3,-0.029944325748216923,0.06021947591113617,0.001773011690091617,0.9977343376400449],[1,0.9999676942825317,0.9999433755874634,0.9999287128448486],[1,-3.4378901171365115,6.907815811826856,-0.003923266491520766]],[5,"mixamorig:RightHandRing2",27,[-45],[0,"17aAS7ET5awKVgXIJ8/p+t",1,0],[1,0.000024954828404588625,-2.906518261625024e-7,0.03059440292418003],[3,0.03987398827697223,-2.801018239872151e-17,-5.826650017911234e-18,0.9992047162913553],[1,1,1.0000481605529785,1.000087022781372],[1,4.570434142770725,-3.1805545630728483e-15,-7.951386656414138e-16]],[11,"mixamorig:RightHandRing3",28,[[10,"mixamorig:RightHandRing4",-46,[0,"7dAA4LfdxQAaUYRGd/EU8D",1,0],[1,0.00001786916072887834,-4.981880010745954e-7,0.02345055714249611]]],[0,"aaHuDATelbmZ/pEgfrom4x",1,0],[1,-0.000042705763917183504,4.5507984935966306e-8,0.02848713845014572],[3,-0.040273563207665515,-0.0000022690392781856063,-0.000049591371439658524,0.9991886897088584],[1,0.9999880790710449,1.0000356435775757,0.9999232888221741],[1,-4.616258897112571,-0.0004886664944784287,-0.005667670461262504]],[5,"mixamorig:RightHandThumb1",2,[-47],[0,"7c/1Md1R5RGqD62tRRVLh/",1,0],[1,-0.025057023391127586,0.00778393168002367,0.025486184284090996],[3,-0.09607329826364255,-0.5008885192306284,-0.056039295284057274,0.8583357210600988],[1,0.9999297857284546,0.9999889731407166,0.9999727606773376],[1,-12.771603068394855,-60.53178988172773,0.002461791036778549]],[5,"mixamorig:RightHandThumb2",30,[-48],[0,"f9BG3lQ5lQead0Yqx1Sjt2",1,0],[1,0.007890991866588593,-0.000003070059165111161,0.028179800137877464],[3,-0.11224889783760067,1.1683247893884488e-18,-1.0342561825459344e-17,0.9936801220383972],[1,1,1.0000245571136475,0.9999874830245972],[1,-12.889941946892137,-5.3199195575826274e-24,-1.1927080526432528e-15]],[11,"mixamorig:RightHandThumb3",31,[[10,"mixamorig:RightHandThumb4",-49,[0,"c01phOgLJasYdXzGt9+nsp",1,0],[1,-0.0017042241524904966,0.0000010349435797252227,0.02430623583495617]]],[0,"ffmzqDqCVRqryYpK6bPbe5",1,0],[1,-0.006185887381434441,0.0000018903841692008427,0.030563276261091232],[3,0.019127974833119326,0.000014437977782568593,-0.000047860355610576385,0.999817042303098],[1,1.0000015497207642,0.9999481439590454,1.0000579357147217],[1,2.1920382277024517,0.0017590730202212842,-0.0054517426934660995]],[5,"mixamorig:LeftShoulder",5,[-50],[0,"a7IdFzn09be5B3sXKpi2Y0",1,0],[1,-0.060263000428676605,0.0002018249360844493,0.12214905023574829],[3,0.5649828245083885,0.5630651046910424,-0.4257436640194182,-0.42719366619498167],[1,0.9999922513961792,0.9999521970748901,0.9999594688415527],[1,-105.81322149671736,0.0003853874663356471,89.80519163359102]],[5,"mixamorig:LeftArm",33,[-51],[0,"29HwUiH+5d9bbg9pmdcTi4",1,0],[1,-0.0000057301786000607535,-4.109856632794617e-8,0.1265980750322342],[3,0.09595965842927508,-0.01831292594780677,0.0017549142230958922,0.9952152033472141],[1,1.0000085830688477,1.0000327825546265,1.0000797510147095],[1,11.014960249031894,-2.108238837203845,-0.0012358474351315135]],[5,"mixamorig:LeftForeArm",34,[3],[0,"1ceWVN0URaeoAR7K0ojgeb",1,0],[1,-0.000005853675702383043,0.000014513425412587821,0.19180737435817719],[3,0.06383866888010892,0.10781243563820973,-0.006963227021926297,0.9920950642689509],[1,1.0000066757202148,0.999967098236084,1.000024676322937],[1,7.363827600657653,12.40434646888182,-0.002931341459322897]],[5,"mixamorig:LeftHandMiddle1",3,[-52],[0,"12Z57UteZabre8DgLA+t3i",1,0],[1,0.010523983277380466,0.00046254214248619974,0.10555142164230347],[3,0.011156142497608275,-0.019037734390033614,0.00022397107001679773,0.999756497848765],[1,1.0000290870666504,0.9999939203262329,1.000011920928955],[1,1.2786832165212534,-2.181846057435003,0.001321109456046716]],[5,"mixamorig:LeftHandMiddle2",36,[-53],[0,"ffDO4iwElUpZpW0zIQmLQt",1,0],[1,0.000030458386390819214,-0.000002946704626083374,0.032338544726371765],[3,0.005918153163125885,1.4041806302045244e-17,2.7672958784330088e-17,0.9999824875782265],[1,1,0.9999470114707947,1.000017523765564],[1,0.6781743563479663,1.5902773154796552e-15,3.18055469390331e-15]],[11,"mixamorig:LeftHandMiddle3",37,[[10,"mixamorig:LeftHandMiddle4",-54,[0,"b7gaKl5LpZkaMOKQsBYLu2",1,0],[1,-0.00006450873479479924,3.3204624827476437e-8,0.023937763646245003]]],[0,"0dweZBeHxSTLsxghmhMpJJ",1,0],[1,0.00003519677193253301,-0.0000030462219910987187,0.03189190849661827],[3,-0.054786396125618766,7.603139801862053e-19,-1.3856944724226082e-17,0.9984980975442903],[1,1,1.000054955482483,0.9999564290046692],[1,-6.2812034453894645,0,-1.5902773407317588e-15]],[5,"mixamorig:LeftHandPinky1",3,[-55],[0,"c5cZOWDeNdNZpMCqklkH4Z",1,0],[1,-0.03154924139380455,0.0009128061938099563,0.09920990467071533],[3,0.022073321003830203,-0.08446327581361633,0.0018510562333677921,0.9961803537158902],[1,0.9999517798423767,0.9999334812164307,1.0000261068344116],[1,2.538501167322947,-9.692655786205911,-0.0023375700312155854]],[5,"mixamorig:LeftHandPinky2",39,[-56],[0,"bfijrV+KFSWr0C8L+/B9u2",1,0],[1,0.00001303607496083714,0.0000013651178960571997,0.028073392808437347],[3,-0.0005574089140091697,-6.946628205613452e-18,1.3873918582412944e-17,0.999999844647639],[1,1,0.9999918937683105,1.000009536743164],[1,-0.06387435977906965,-7.951386447708297e-16,1.5902774245825957e-15]],[11,"mixamorig:LeftHandPinky3",40,[[10,"mixamorig:LeftHandPinky4",-57,[0,"77eQOj11VdBIk+GLop9aRl",1,0],[1,-0.00002448160739731975,9.067888413483161e-7,0.019921239465475082]]],[0,"3ezXcQZX5T+b/7PmF7D+7I",1,0],[1,0.00001210769096360309,0.0000016050785234256182,0.02463148534297943],[3,-0.0353887902763145,-1.4360212859254272e-17,1.3377977235179857e-17,0.9993736205858043],[1,1,1.0000807046890259,1.0000064373016357],[1,-4.0561035717760205,-1.5902773039506434e-15,1.590277374997051e-15]],[5,"mixamorig:LeftHandRing1",3,[-58],[0,"410CYqbkFT1oZwOu5iIg3n",1,0],[1,-0.011640723794698715,-0.000724983518011868,0.10608071833848953],[3,-0.0077050829522819966,-0.041153370454898766,-0.0003354950387069429,0.9991230751213682],[1,0.9999757409095764,0.9999338984489441,1.000057578086853],[1,-0.8837803812978452,-4.717317398486356,-0.002075333536422752]],[5,"mixamorig:LeftHandRing2",42,[-59],[0,"8cR4iCa2RcNJf8gDei0ycP",1,0],[1,-0.000010945245776383672,-0.0000018735581761575304,0.030789494514465332],[3,0.012411774821145373,-1.4048965939345216e-17,-1.370447086365214e-17,0.9999229709561578],[1,1,1.0000107288360596,0.9999595880508423],[1,1.422321147236957,-1.5902772429524865e-15,-1.5902773424804011e-15]],[11,"mixamorig:LeftHandRing3",43,[[10,"mixamorig:LeftHandRing4",-60,[0,"9e4wh/gIFTMoQPaG1rAnrK",1,0],[1,-0.000012406705536704976,-5.019593345423345e-7,0.02302774414420128]]],[0,"4cdUDNqVFW2LyrBNi95k2n",1,0],[1,0.000020224824766046368,5.068449127065833e-7,0.02916899137198925],[3,-0.028130590124331473,2.813498271880026e-17,-1.3091515044174652e-17,0.9996042566432263],[1,1,1.000046968460083,0.9999972581863403],[1,-3.2239534759513924,3.180554776213918e-15,-1.5902773433981986e-15]],[5,"mixamorig:LeftHandThumb1",3,[-61],[0,"53So0IE8FZiL25HFBVxKMm",1,0],[1,0.024588605388998985,0.007678675465285778,0.025548988953232765],[3,-0.09580623467332887,0.5069748220820327,0.05678384443064172,0.8547358013937917],[1,1.0000375509262085,0.9999434947967529,0.9999762773513794],[1,-12.788572198280864,61.34697113874079,-0.004144089398105492]],[5,"mixamorig:LeftHandThumb2",45,[-62],[0,"aciaNKMQdaH6amludBeFww",1,0],[1,-0.00850366149097681,-3.4092354894710297e-7,0.027751903980970383],[3,-0.10333533095868981,-0.00000949409082610457,0.000049091065499338586,0.9946465738520329],[1,1.0000009536743164,1.0000327825546265,1.0000108480453491],[1,-11.862532624008315,-0.00050081363482375,0.0057077293752795825]],[11,"mixamorig:LeftHandThumb3",46,[[10,"mixamorig:LeftHandThumb4",-63,[0,"21p5q7PkRQuKHc8VBz8ws/",1,0],[1,0.00239484547637403,-1.592220257862209e-7,0.025486662983894348]]],[0,"d2E55gm+BepLATO9c7KEB+",1,0],[1,0.006110636983066797,-2.1096073510307178e-7,0.03086167201399803],[3,-0.014708719247442657,0.000015217979157970965,-0.00004762554464006595,0.9998918196876703],[1,0.9999989867210388,0.9999590516090393,0.9999496340751648],[1,-1.6855557734213689,0.0016633906936497122,-0.005482544854509541]],[5,"mixamorig:LeftHandIndex1",3,[-64],[0,"8fC8YF3xBbkpRkO5FkyTvS",1,0],[1,0.03268425539135933,-0.00005325473102857359,0.10485702008008957],[3,-0.007048265833428344,0.013163188145437094,0.00010507317813829574,0.9998885144785975],[1,1.000011920928955,0.9999132752418518,1.0000035762786865],[1,-0.8077669764105536,1.5084812169523396,0.001407621481502322]],[5,"mixamorig:LeftHandIndex2",48,[-65],[0,"dacpJyauxRQb8n/qFSj22j",1,0],[1,0.000066194093960803,0.00000236071400649962,0.031372733414173126],[3,-0.023364219987274712,-0.000001970621284289288,-0.00004965103326285985,0.999727018118085],[1,1.0000112056732178,1.000064730644226,1.000018835067749],[1,-2.6775860623570997,-0.0003586877394017465,-0.005682760135464832]],[11,"mixamorig:LeftHandIndex3",49,[[10,"mixamorig:LeftHandIndex4",-66,[0,"7cRARLrQ1RYqr9x015h3to",1,0],[1,-0.00008429191802861169,-2.1219882739842433e-8,0.022328177466988564]]],[0,"72Qrx1KwlXlbbaj49Y+KGy",1,0],[1,0.000016586000128882006,-0.000001283436176890973,0.028448719531297684],[3,-0.043087817188880495,-0.0000013312637581001387,0.00004966697389687639,0.9990712875172206],[1,0.9999887943267822,0.999996542930603,0.9999983906745911],[1,-4.939029229434294,0.00009282077841029428,0.005692703406265008]],[5,"mixamorig:LeftUpLeg",4,[-67],[0,"42rls0kbdW/74hc6B9m/o6",1,0],[1,-0.07258199900388718,-0.0013020000187680125,-0.051708001643419266],[3,0.00013347204736317774,0.9998832025507299,-0.011149365763278222,-0.010452515734742377],[1,1.00001859664917,1.0000486373901367,0.9999671578407288],[1,1.277420099046433,-178.80245300900143,0.0286473614502237]],[5,"mixamorig:LeftLeg",51,[-68],[0,"8em3uB0RdZ05WfLdWKfOFa",1,0],[1,-0.000005001814315619413,-0.000009342705197923351,0.32762688398361206],[3,0.022477179177956323,-0.009051257507754507,0.00020535847042612695,0.9997063613789946],[1,0.99998539686203,0.9999122619628906,0.9999969601631165],[1,2.5760194530785125,-1.0374787820494635,0.00021215853207381526]],[5,"mixamorig:LeftFoot",52,[-69],[0,"54/blxb2VZNpyDHMzRblpG",1,0],[1,-8.449933375231922e-8,0.0000032991436000884278,0.2671462297439575],[3,-0.49594700876620973,-0.00111710246472082,0.0019590428778068236,0.8683498596354672],[1,1.0000097751617432,1.0000219345092773,1.000020980834961],[1,-59.46459996768915,0.00017712446802549306,0.2584229740511257]],[11,"mixamorig:LeftToeBase",53,[[10,"mixamorig:LeftToe_End",-70,[0,"d0Mk3e841VmYyvHMzy8jHA",1,0],[1,2.4320274860656355e-7,1.8604413298817235e-7,0.05320889502763748]]],[0,"d3qiG6K0pdvKSX51dy5pRK",1,0],[1,8.394769679398451e-7,0.000003224042529836879,0.13583791255950928],[3,-0.30672231443434567,-0.005756587745218115,0.017880417480516914,0.9516136685631897],[1,0.9999807476997375,1.0000426769256592,1.0000348091125488],[1,-35.73015526705257,0.0007196214374854454,2.152641707646522]],[5,"mixamorig:RightUpLeg",4,[-71],[0,"73vBCTncZe1ZnfmDVcIP7G",1,0],[1,0.07258100062608719,-0.0007600000244565308,-0.051708001643419266],[3,-0.00011464684465771247,0.9998615009275161,-0.012950137544098279,0.010452739194334789],[1,1.00001859664917,1.0000354051589966,0.9999539852142334],[1,1.4837996330750818,178.8024530057517,-0.028647361130940224]],[5,"mixamorig:RightLeg",55,[-72],[0,"e1ft+SdWRT3ppXNKVqyXwD",1,0],[1,0.000004591029664879898,-0.000006875950930407271,0.32765963673591614],[3,0.01771971595735901,0.009051728125518589,-0.00019488927636833432,0.9998020003493202],[1,0.99998539686203,0.9999454021453857,1.000030279159546],[1,2.0307551434574393,1.0374986901477568,-0.003948439761742979]],[5,"mixamorig:RightFoot",56,[-73],[0,"28gGAMXoVd8YAqK3NprkR4",1,0],[1,-7.459941286924732e-8,0.000011545696906978264,0.2670386731624603],[3,-0.49221876068300996,0.001120240306693103,-0.0019571459774497457,0.8704686130314866],[1,1.0000097751617432,1.0000101327896118,1.0000091791152954],[1,-58.973199490897166,0.001351054929260676,-0.2584091319480305]],[11,"mixamorig:RightToeBase",57,[[10,"mixamorig:RightToe_End",-74,[0,"b3LXFyN+NYTq8pLlCWiRWB",1,0],[1,-0.0000012128639355069026,-0.0000017677015193839907,0.052381351590156555]]],[0,"aazWlj7ghavZ+tMM8rFx3S",1,0],[1,0.0000031504137041338254,-0.0000036238764096196974,0.1353008896112442],[3,-0.3081828553733895,0.005885140313575481,-0.01808720023308689,0.9511369753958271],[1,1.0000011920928955,1.0000540018081665,1.0000464916229248],[1,-35.906175827978764,0.002684478541909111,-2.179725374087611]]],0,[0,7,1,0,0,1,0,-1,6,0,-2,7,0,-3,8,0,-4,9,0,-5,10,0,-6,4,0,-1,18,0,-2,21,0,-3,24,0,-4,27,0,-5,30,0,-1,36,0,-2,39,0,-3,42,0,-4,45,0,-5,48,0,-1,11,0,-2,51,0,-3,55,0,-1,13,0,-2,15,0,-3,33,0,0,6,0,0,7,0,0,8,0,0,9,0,0,10,0,-1,12,0,-1,14,0,3,14,0,-1,16,0,-1,17,0,-1,19,0,-1,20,0,3,20,0,-1,22,0,-1,23,0,3,23,0,-1,25,0,-1,26,0,3,26,0,-1,28,0,-1,29,0,3,29,0,-1,31,0,-1,32,0,3,32,0,-1,34,0,-1,35,0,-1,37,0,-1,38,0,3,38,0,-1,40,0,-1,41,0,3,41,0,-1,43,0,-1,44,0,3,44,0,-1,46,0,-1,47,0,3,47,0,-1,49,0,-1,50,0,3,50,0,-1,52,0,-1,53,0,-1,54,0,3,54,0,-1,56,0,-1,57,0,-1,58,0,3,58,0,12,1,2,3,17,3,3,35,5,3,12,74],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,-2,1,11,-1,1,11,-1,1,11,-1,1,11,-1,1,11,-1,-2,-3,-4,-5,32],[31,31,170,171,31,172,173,31,174,175,31,176,177,31,178,179,23,41,180,181,56,23]],[[[26,"Skin-1",659996016,["mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:Neck","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:Neck/mixamorig:Head"],[[[7,-1,1.2246468525851679e-16,1.2246468525851679e-16,0,1.2246468525851679e-16,-1.2246468525851679e-16,1,0,1.2246468525851679e-16,1,1.2246468525851679e-16,0,-0.000018000000636675395,0.008623999543488026,-1.196079969406128,1],[7,-1,-1.2246468525851679e-16,1.2246468525851679e-16,0,1.2246468525851679e-16,-1.2246468525851679e-16,1,0,-1.2246468525851679e-16,1,1.2246468525851679e-16,0,-0.000018000000636675395,-0.007664999924600124,-1.280729055404663,1]],8,8]]],0,0,[],[],[]],[[[15,"CapCup",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_NORMAL_MAP":true},{},{}],[[[{},"mainColor",8,[4,4282006074],"normalMap",6,0],{},{}],11,0,0]]],0,0,[0,0],[14,5],[182,1]],[[[41,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_ALBEDO_MAP":true},{},{}],[[[{"metallic":0,"normalMap":null},"mainColor",8,[4,4283267998],"mainTexture",6,0],{},{}],11,0,0]]],0,0,[0,0],[8,5],[183,1]],[[[6,".bin",2291812267,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":224,"length":24,"count":6,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":224,"count":4,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-5.712543487548828,-0.0000553131103515625,-2.7143521308898926],"maxPosition",8,[1,5.712543487548828,0.0000553131103515625,2.7143523693084717]]],-1],0,0,[],[],[]],[[[6,".bin",1431291976,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":16016,"length":2064,"count":516,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":16016,"count":286,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-3.4959492683410645,-3.214017629623413,-3.04888653755188],"maxPosition",8,[1,3.4959492683410645,3.2193429470062256,2.0105998516082764]]],-1],0,0,[],[],[]],[[[6,".bin",1296511383,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":448,"length":48,"count":12,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":448,"count":8,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,0,-5.764335632324219,-2.286125659942627],"maxPosition",8,[1,9.5367431640625e-7,5.764335632324219,2.286125898361206]]],-1],0,0,[],[],[]],[[[6,".bin",3503081763,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":896,"length":168,"count":42,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":896,"count":16,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-7.988122940063477,0,-2.286125659942627],"maxPosition",8,[1,7.988122940063477,0,2.286125659942627]]],-1],0,0,[],[],[]],[[[6,".bin",3716175149,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":224,"length":24,"count":6,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":224,"count":4,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,0,-3.9488534927368164,-2.5201945304870605],"maxPosition",8,[1,0,3.9488534927368164,2.5201950073242188]]],-1],0,0,[],[],[]],[[[6,".bin",54022147,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":560,"length":72,"count":18,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":560,"count":10,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.4634246826171875,-9.425464630126953,-5.0004777908325195],"maxPosition",8,[1,0.4634256362915039,9.425464630126953,5.0004777908325195]]],-1],0,0,[],[],[]],[[[6,".bin",1770263857,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":36288,"length":4800,"count":1200,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":36288,"count":648,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-8.873896598815918,-0.5469026565551758,-0.06756925582885742],"maxPosition",8,[1,8.873896598815918,0.5469017028808594,0.06756925582885742]]],-1],0,0,[],[],[]],[[[41,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{},{},{}],[[[{"roughness":0.574,"metallic":1,"specularIntensity":0.587},"mainColor",8,[4,4290032820],"emissive",8,[4,4284374622]],{},{}],11,0,0]]],0,0,[0],[5],[1]],[[[6,".bin",4169948595,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":672,"length":72,"count":18,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":672,"count":12,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.6051607131958008,-1.089289665222168,-5.0004777908325195],"maxPosition",8,[1,0.6051607131958008,1.0892887115478516,5.0004777908325195]]],-1],0,0,[],[],[]],[[[6,".bin",10763650,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":224,"length":24,"count":6,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":224,"count":4,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,0,-1.9365158081054688,-2.48028302192688],"maxPosition",8,[1,0,1.9365158081054688,2.480282783508301]]],-1],0,0,[],[],[]],[[[6,".bin",250471795,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":224,"length":24,"count":6,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":224,"count":4,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-9.5367431640625e-7,-8.856664657592773,-2.7143521308898926],"maxPosition",8,[1,0,8.856664657592773,2.7143523693084717]]],-1],0,0,[],[],[]],[[[6,".bin",415761593,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":448,"length":48,"count":12,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":448,"count":8,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.48070621490478516,-3.9488534927368164,-0.5310320854187012],"maxPosition",8,[1,0.48070621490478516,3.948854446411133,0.5310320854187012]]],-1],0,0,[],[],[]],[[[6,".bin",659459470,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1792,"length":192,"count":48,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":2880,"length":96,"count":24,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1792,"count":32,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]},{"view":{"offset":1984,"length":896,"count":16,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.7232506275177002,-0.7216682434082031,-5.0004777908325195],"maxPosition",8,[1,0.7232506275177002,0.7216663360595703,5.0004777908325195]]],-1],0,0,[],[],[]],[[[6,".bin",2953111871,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":448,"length":48,"count":12,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":448,"count":8,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-1.8154826164245605,-1.2103214263916016,-2.286125659942627],"maxPosition",8,[1,1.8154826164245605,1.2103233337402344,2.286125898361206]]],-1],0,0,[],[],[]],[[[6,".bin",2878756877,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":448,"length":48,"count":12,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":448,"count":8,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-1.8154826164245605,-1.2103214263916016,-2.714352607727051],"maxPosition",8,[1,1.8154826164245605,1.2103233337402344,2.71435284614563]]],-1],0,0,[],[],[]],[[[6,".bin",641862482,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":6720,"length":816,"count":204,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":9776,"length":240,"count":60,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":6720,"count":120,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]},{"view":{"offset":7536,"length":2240,"count":40,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-8.788134574890137,-0.3110962510108948,-0.20190376043319702],"maxPosition",8,[1,8.788134574890137,0.31109607219696045,0.20190368592739105]]],-1],0,0,[],[],[]],[[[34],[38,"VirtualShop",[-2],[0,"deGe0G1/dbhpH6uO2Ukkx3",-1,0]],[74,"VirtualShop",1,[-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45],[0,"daaNTi75lQPaPCnRhDr8MW",1,0]],[8,"Barrier_01",2,[[4,-46,[1,"27eOdjZhBQdpHGYkO4gMT4"],[0],[3],1]],[0,"84c+lpbvtcmYLbuOSrlch1",1,0],[1,-0.05050849914550781,3.120512008666992,-11.240520477294922],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[8,"Cavity_Wall",2,[[4,-47,[1,"08PjlSAHBZ/5txlCipaBve"],[2],[3],3]],[0,"fecO7CiqtToIzAUgOOxn1r",1,0],[1,-6.630722522735596,2.1903738975524902,-19.45917510986328],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[8,"Chrome_Bar_A",2,[[4,-48,[1,"d6qXPcD/Fc7r4SJN/wM7m9"],[4],[3],5]],[0,"0drba71KhUaIodW/OGYBzx",1,0],[1,-0.04974818229675293,6.669756889343262,11.604944229125977],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[8,"Chrome_Bar_B",2,[[4,-49,[1,"33rx5Yp55YX6ABPGO3fr/3"],[6],[3],7]],[0,"b1jEnuESJQroypAZwh8q5z",1,0],[1,-0.04974818229675293,6.669756889343262,0.7866673469543457],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[8,"Column_A",2,[[4,-50,[1,"89Z31kvexZQ6TmVU3KEgrb"],[8,9],[3],10]],[0,"17gLlpSOFbQZr1y76QdeiA",1,0],[1,3.578275442123413,4.469630241394043,0.7758626937866211],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[8,"Column_B",2,[[4,-51,[1,"297J10wYtQ1Jl1DwzP4QlE"],[11,12],[3],13]],[0,"adqrGqT09c6pfsLWWij59o",1,0],[1,3.578275203704834,4.469630241394043,11.594139099121094],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[8,"Column_C",2,[[4,-52,[1,"6cs0EP//JUooWpKN/Mxwlw"],[14,15],[3],16]],[0,"82zBpQxWFU86Xxtmgwy/OI",1,0],[1,-0.044420480728149414,4.999523639678955,-14.83171558380127],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[8,"Doors",2,[[4,-53,[1,"f5Npk1M7hcCaXVnEf592fY"],[17],[3],18]],[0,"b3exWRLoNbOZIkH9ADpcb3",1,0],[1,-0.050806522369384766,4.998754501342773,-1.8721532821655273],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[8,"Enseigne_01",2,[[4,-54,[1,"8d5bdRGTZfs6tvqUQLHkO1"],[19,20],[3],21]],[0,"21p67baTVdAqOkCW0gMreB",1,0],[1,-1.0428333282470703,3.791949510574341,-16.934213638305664],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[8,"Floor",2,[[4,-55,[1,"3fknMIquBT/4lJ/EQ6SnVp"],[22],[3],23]],[0,"76tbWJ1mlbjK57B/zTeas4",1,0],[1,-0.050805091857910156,-0.00042188167572021484,-1.8636648654937744],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[8,"Glass_01",2,[[4,-56,[1,"48JjBo7dNS2aMzyoqjkH/i"],[24],[3],25]],[0,"64E9/wwixY0bTGTBGjtJ6I",1,0],[1,-0.32172060012817383,3.1716737747192383,-1.8632233142852783],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[8,"Mezzanin_01",2,[[4,-57,[1,"dbb0xL2Rxe2qLDCBrcByUj"],[26,27,28,29],[3],30]],[0,"5cwBLziSteH4dM1LxFlvax",1,0],[1,-0.050805091857910156,4.593753814697266,-11.186538696289062],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[8,"Roof",2,[[4,-58,[1,"2euGjkhlBezIUKDcnIDapM"],[31,32],[3],33]],[0,"bcMvjf0X1UVZJvhRsKOrN9",1,0],[1,-0.05080604553222656,10.399789810180664,-1.8721528053283691],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[8,"Roof_Pilar_A",2,[[4,-59,[1,"0dlknLPnhewLHlfbpJXL0F"],[34],[3],35]],[0,"70IGyfdYpeMZ7gTx/w6qQL",1,0],[1,-0.05032539367675781,9.470321655273438,0.7758631706237793],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[8,"Roof_Pilar_B",2,[[4,-60,[1,"41uGvPvpxfD5ldG6M+qFtB"],[36],[3],37]],[0,"99lrG5V2BeKIxwTJMt8ZoV",1,0],[1,-0.050325632095336914,9.470321655273438,11.594139099121094],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[8,"Roof_Pilar_C",2,[[4,-61,[1,"4e8afqNIdV4466IAxvI/4K"],[38],[3],39]],[0,"c4TyPGYZBWBrstkhackFCw",1,0],[1,-0.050806522369384766,9.577357292175293,-4.252283096313477],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[8,"Stair",2,[[4,-62,[1,"170/w+UPpStL3KQTc1whv5"],[40,41],[3],42]],[0,"daAbPmrDdbcoPAUSIk7uzS",1,0],[1,-0.04360783100128174,3.044388771057129,-15.779643058776855],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[8,"Stair_Body",2,[[4,-63,[1,"52DJbrgyVXIpRDXlseUI60"],[43],[3],44]],[0,"b55YFGLKpYNr+G99FncsvO",1,0],[1,-0.04360783100128174,3.044388771057129,-15.779643058776855],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[8,"Wall_A",2,[[4,-64,[1,"a192J9FdJeUJEaLA4RiHU2"],[45],[3],46]],[0,"d6JnDRUSFVW4+pT3sRxjd6",1,0],[1,9.289373397827148,4.9995245933532715,6.1854119300842285],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[8,"Wall_B",2,[[4,-65,[1,"208wLVU3hdcIxV6htp65mo"],[47],[3],48]],[0,"77tinOVVRWIYpgFI8BJ5iG",1,0],[1,3.307734251022339,2.2851719856262207,15.099967002868652],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[8,"Wall_C",2,[[4,-66,[1,"43xrtpUhNQbZWrxcicgKK4"],[49],[3],50]],[0,"01fgX1Uddbt43In421bV35",1,0],[1,-9.388402938842773,4.9995245933532715,4.960331916809082],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[8,"Wall_D",2,[[4,-67,[1,"5emJEceWlQob/DkjlmOy0U"],[51],[3],52]],[0,"497UwLVipUNqOLEI8dgc46",1,0],[1,-9.854412078857422,2.5192413330078125,-9.25002670288086],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[8,"Wall_E",2,[[4,-68,[1,"90qFc/2aZb1JmjJ3ba2Mku"],[53],[3],54]],[0,"20BISG2fBRC5C7K3lYUzpR",1,0],[1,-9.854412078857422,2.5192418098449707,-17.31397247314453],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[8,"Wall_Exterior",2,[[4,-69,[1,"47Fm/yQsJdB6NjyyNs/Pmv"],[55,56],[3],57]],[0,"52CWBJJoddZ49IL0MFFK7I",1,0],[1,-0.050806522369384766,4.998754501342773,-1.8721532821655273],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[8,"Wall_F",2,[[4,-70,[1,"e81T5fgqRZdaURFJtzj4io"],[58],[3],59]],[0,"bduBc4QhBVx7Nkls8CVDk/",1,0],[1,-1.866288661956787,2.285172462463379,-19.25048828125],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[8,"Wall_G",2,[[4,-71,[1,"39t/lgtmxZiosZh9W8QUtC"],[60],[3],61]],[0,"abDCe0MthbTai1FGEpiZXE",1,0],[1,7.93731689453125,2.285172462463379,-18.040164947509766],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[8,"Wall_H",2,[[4,-72,[1,"f7lpVrTfxfuJJX3WH9vuiK"],[62],[3],63]],[0,"baN2Hcq39caYw843YQZm4I",1,0],[1,9.752798080444336,2.285172462463379,-11.065508842468262],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[8,"Wall_I",2,[[4,-73,[1,"370YOoPExe3JxYOxX8cs9B"],[64],[3],65]],[0,"c7+Qeb535XM5C+gl15zsCN",1,0],[1,-9.854412078857422,7.519719123840332,-9.25002670288086],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[8,"Wall_J",2,[[4,-74,[1,"23lO2sa4lXTJw24Ta60dIF"],[66],[3],67]],[0,"ffvs2/0XpV5oaCJ+dx/T1b",1,0],[1,-9.854412078857422,7.51971960067749,-17.31397247314453],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[8,"Wall_K",2,[[4,-75,[1,"a1D+o+UwxeI6MFtafqcE+g"],[68],[3],69]],[0,"feZqm/jyNdj5oogsfCr38p",1,0],[1,-1.866288423538208,7.28564977645874,-19.25048828125],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[8,"Wall_L",2,[[4,-76,[1,"aaMXV7DPdUrbkjbXSodMW1"],[70],[3],71]],[0,"50ZFUZA3BWNq454T5H2PvX",1,0],[1,7.93731689453125,7.28564977645874,-18.040164947509766],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[8,"Wall_M",2,[[4,-77,[1,"5eJIMgnqpUfKsBoOR8Wp7t"],[72],[3],73]],[0,"4bwvH7WmheNJBgaaMPpeGz",1,0],[1,9.752798080444336,7.28564977645874,-11.065508842468262],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[8,"Wall_Pylon_A",2,[[4,-78,[1,"8bxEV4wf1TjoDFajUX1Jvi"],[74],[3],75]],[0,"49pOyMbABWKLiIvQGp+6yd",1,0],[1,-9.249251365661621,4.9995245933532715,-4.211884498596191],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[8,"Wall_Pylon_B",2,[[4,-79,[1,"90uF/1Tp9cyZHsMC8Ln3Bt"],[76],[3],77]],[0,"86F21zIdleBb07eOjcMGPn",1,0],[1,-9.249252319335938,4.9995245933532715,-14.288168907165527],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[8,"Wall_Pylon_C",2,[[4,-80,[1,"d8xqeIy9FS5a1B/7fIgIDO"],[78],[3],79]],[0,"e8wJKaiN5XW7OuudGbaWYR",1,0],[1,9.140714645385742,4.9995245933532715,-14.288168907165527],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[8,"Wall_Pylon_D",2,[[4,-81,[1,"f8u1RN6ZpQlpFodpYkvD9H"],[80],[3],81]],[0,"fbbEdRoDJfoqPDZL2AdF1W",1,0],[1,9.140714645385742,4.9995245933532715,-4.211883544921875],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[8,"Wall_Up_A",2,[[4,-82,[1,"aeOkOYBjJZVYNytJMuzORU"],[82],[3],83]],[0,"75KhS7UsZWX4S0p3ASiIqP",1,0],[1,-8.922393798828125,7.285649299621582,4.981471061706543],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[8,"Wall_Up_B",2,[[4,-83,[1,"e7waOYTQ5cubQPVkSTr0ZK"],[84],[3],85]],[0,"0cSzsY6yZRVqFTrX/Pr4SG",1,0],[1,-9.373589515686035,9.471674919128418,-9.250025749206543],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[8,"Wall_Up_C",2,[[4,-84,[1,"a1zw5Mle9XXLp04jPxodRL"],[86],[3],87]],[0,"c6IDpYfz5ej7iaLC9PzCBf",1,0],[1,-1.8724465370178223,9.499807357788086,-18.805461883544922],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[8,"Wall_Up_D",2,[[4,-85,[1,"cfa6GQmthf96Q4sS2lOGQG"],[88],[3],89]],[0,"28ZwKjMexV7pDf7Ld+Rc4l",1,0],[1,9.26823616027832,9.471674919128418,-9.250024795532227],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[8,"Wall_Up_E",2,[[4,-86,[1,"f7fGr5zgReyL0Ym4SU3J8T"],[90],[3],91]],[0,"fdtnIZKbhWfoepZzDCYkBq",1,0],[1,8.825948715209961,7.285649299621582,5.73406982421875],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[8,"Wall_Up_F",2,[[4,-87,[1,"f89moNIIdV/JIx4tVOoryS"],[92],[3],93]],[0,"d4u5OfBnlZjJ5EwSUDRgbQ",1,0],[1,3.1136152744293213,7.285648345947266,14.590789794921875],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[8,"Wall_Up_G",2,[[4,-88,[1,"db5g9EdE9bIJiRYvnTOFT7"],[94],[3],95]],[0,"3ak8fwGBVerZpLFDnaxllm",1,0],[1,-5.8660807609558105,7.28564977645874,14.295859336853027],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]]],0,[0,7,1,0,-1,2,0,-1,3,0,-2,4,0,-3,5,0,-4,6,0,-5,7,0,-6,8,0,-7,9,0,-8,10,0,-9,11,0,-10,12,0,-11,13,0,-12,14,0,-13,15,0,-14,16,0,-15,17,0,-16,18,0,-17,19,0,-18,20,0,-19,21,0,-20,22,0,-21,23,0,-22,24,0,-23,25,0,-24,26,0,-25,27,0,-26,28,0,-27,29,0,-28,30,0,-29,31,0,-30,32,0,-31,33,0,-32,34,0,-33,35,0,-34,36,0,-35,37,0,-36,38,0,-37,39,0,-38,40,0,-39,41,0,-40,42,0,-41,43,0,-42,44,0,-43,45,0,0,3,0,0,4,0,0,5,0,0,6,0,0,7,0,0,8,0,0,9,0,0,10,0,0,11,0,0,12,0,0,13,0,0,14,0,0,15,0,0,16,0,0,17,0,0,18,0,0,19,0,0,20,0,0,21,0,0,22,0,0,23,0,0,24,0,0,25,0,0,26,0,0,27,0,0,28,0,0,29,0,0,30,0,0,31,0,0,32,0,0,33,0,0,34,0,0,35,0,0,36,0,0,37,0,0,38,0,0,39,0,0,40,0,0,41,0,0,42,0,0,43,0,0,44,0,0,45,0,12,1,88],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,1,-1,1,-1,1,-1,1,-1,-2,1,-1,-2,1,-1,-2,1,-1,1,-1,-2,1,-1,1,-1,1,-1,-2,-3,-4,1,-1,-2,1,-1,1,-1,1,-1,1,-1,-2,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,-2,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1],[32,184,3,185,32,186,32,187,3,12,188,3,12,189,12,3,190,32,191,192,193,194,73,195,196,197,73,12,3,74,198,3,74,199,3,200,3,201,12,202,32,203,204,3,205,3,206,3,207,3,208,3,209,3,210,3,39,211,3,212,3,213,3,214,3,215,3,216,3,217,3,218,3,219,12,220,3,221,3,222,12,223,39,224,12,225,12,226,12,227,39,228,39,229,39,230]],[[[6,".bin",1483975143,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":2240,"length":240,"count":60,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":2240,"count":40,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-1.597517967224121,-0.20868492126464844,-0.619997501373291],"maxPosition",8,[1,1.597517490386963,0.20868492126464844,0.619997501373291]]],-1],0,0,[],[],[]],[[[6,".bin",160070764,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":896,"length":96,"count":24,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":2784,"length":192,"count":48,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":896,"count":16,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]},{"view":{"offset":992,"length":1792,"count":32,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.7232508659362793,-0.7216677665710449,-4.470584392547607],"maxPosition",8,[1,0.7232507467269897,0.7216672897338867,4.470584392547607]]],-1],0,0,[],[],[]],[[[6,".bin",161658927,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":448,"length":48,"count":12,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":448,"count":8,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,0,-5.764335632324219,-2.714353084564209],"maxPosition",8,[1,9.5367431640625e-7,5.764335632324219,2.71435284614563]]],-1],0,0,[],[],[]],[[[6,".bin",3999804719,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":728,"length":84,"count":21,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":728,"count":13,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.6120834350585938,-1.089289665222168,-5.000478267669678],"maxPosition",8,[1,0.6120843887329102,1.089289665222168,5.0004777908325195]]],-1],0,0,[],[],[]],[[[41,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_NORMAL_MAP":true,"USE_ALBEDO_MAP":true},{},{}],[[[{"roughness":0.497,"metallic":0.906,"specularIntensity":0.598,"normalStrength":0.625},"tilingOffset",8,[2,0.1,0.1,0,0],"emissive",8,[4,4287269514],"mainTexture",6,0,"normalMap",6,1],{},{}],11,0,0]]],0,0,[0,0,0],[8,14,5],[231,232,1]],[[[6,".bin",1300858084,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":127624,"length":17040,"count":4260,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":173336,"length":3072,"count":768,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":127624,"count":2279,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]},{"view":{"offset":144664,"length":28672,"count":512,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-3.3421716690063477,-3.219343662261963,-2.947489023208618],"maxPosition",8,[1,3.3421716690063477,3.014615297317505,3.045043706893921]]],-1],0,0,[],[],[]],[[[6,".bin",3762458364,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":6776,"length":756,"count":189,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":7756,"length":24,"count":6,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":6776,"count":121,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]},{"view":{"offset":7532,"length":224,"count":4,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-10.287734985351562,-17.862464904785156,-4.9997076988220215],"maxPosition",8,[1,10.287734985351562,17.862462997436523,5.001248359680176]]],-1],0,0,[],[],[]],[[[6,".bin",1276705155,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1456,"length":264,"count":66,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":2840,"length":120,"count":30,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[2],"indexView":{"offset":6656,"length":552,"count":138,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[3],"indexView":{"offset":7432,"length":24,"count":6,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1456,"count":26,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]},{"view":{"offset":1720,"length":1120,"count":20,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]},{"view":{"offset":2960,"length":3696,"count":66,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]},{"view":{"offset":7208,"length":224,"count":4,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-9.803606033325195,-8.063946723937988,-0.4456833600997925],"maxPosition",8,[1,9.803606033325195,8.063946723937988,0.44568324089050293]]],-1],0,0,[],[],[]],[[[6,".bin",2266209229,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":297584,"length":35760,"count":8940,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":297584,"count":5314,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-8.593875885009766,-8.006293296813965,-3.1287975311279297],"maxPosition",8,[1,8.593875885009766,8.006292343139648,3.128797769546509]]],-1],0,0,[],[],[]],[[[6,".bin",1209558648,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":34944,"length":3744,"count":936,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":34944,"count":624,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-8.742263793945312,-17.24231719970703,-3.032466411590576],"maxPosition",8,[1,8.742263793945312,17.24231719970703,3.032466411590576]]],-1],0,0,[],[],[]],[[[41,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_NORMAL_MAP":true,"USE_ALBEDO_MAP":true,"USE_METALLIC_ROUGHNESS_MAP":true},{},{}],[[[{"roughness":0.559,"metallic":1,"specularIntensity":1},"tilingOffset",8,[2,0.05,0.05,0,0],"mainColor",8,[4,4294177779],"emissive",8,[4,4290295992],"mainTexture",6,0,"normalMap",6,1,"metallicRoughnessMap",6,2],{},{}],11,0,0]]],0,0,[0,0,0,0],[8,14,17,5],[75,76,57,1]],[[[6,".bin",4120511567,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":784,"length":96,"count":24,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":784,"count":14,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.6120834350585938,-1.0892887115478516,-5.000478267669678],"maxPosition",8,[1,0.6120843887329102,1.0892887115478516,5.0004777908325195]]],-1],0,0,[],[],[]],[[[41,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{},{},{}],[[[{"roughness":0.74,"metallic":0},"emissive",8,[4,4294967295]],{},{}],11,0,0]]],0,0,[0],[5],[1]],[[[6,".bin",4125881432,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":672,"length":72,"count":18,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":672,"count":12,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-8.874789237976074,-1.054255485534668,-0.5296778678894043],"maxPosition",8,[1,8.874789237976074,1.0542545318603516,0.5296778678894043]]],-1],0,0,[],[],[]],[[[41,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_NORMAL_MAP":true,"USE_ALBEDO_MAP":true},{},{}],[[[{"transparencyFactor":0,"mainTexture":null,"normalMap":null},"mainColor",8,[4,4288139775]],{},{}],11,0,0]]],0,0,[0],[5],[10]],[[[120,"1",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{},{},{}],[[[{"transparencyFactor":0},"mainColor",8,[4,2535146344]],{},{}],11,0,0]]],0,0,[0],[5],[10]],[[[6,".bin",4004093452,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1624,"length":276,"count":69,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1624,"count":29,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-9.803604125976562,-17.386817932128906,-5.131321856310933e-8],"maxPosition",8,[1,9.803604125976562,17.386817932128906,5.131321856310933e-8]]],-1],0,0,[],[],[]],[[[6,".bin",1199043625,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":672,"length":72,"count":18,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":672,"count":12,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-8.593284606933594,-0.4631929397583008,-0.42264223098754883],"maxPosition",8,[1,8.593284606933594,0.4631929397583008,0.42264223098754883]]],-1],0,0,[],[],[]],[[[6,".bin",2678319550,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":672,"length":72,"count":18,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":672,"count":12,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.6051607131958008,-1.0892887115478516,-5.0004777908325195],"maxPosition",8,[1,0.6051616668701172,1.0892887115478516,5.0004777908325195]]],-1],0,0,[],[],[]],[[[6,".bin",3044992362,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":224,"length":24,"count":6,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":224,"count":4,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.0000019073486328125,-8.104065895080566,-2.7143521308898926],"maxPosition",8,[1,0.0000019073486328125,8.104065895080566,2.7143521308898926]]],-1],0,0,[],[],[]],[[[15,"Wall_Strip",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":0}],[[[{"transparencyFactor":0,"albedoScale":1},"mainColor",8,[4,4293851135],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[5],[10]],[[[6,".bin",2821834109,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":36288,"length":4800,"count":1200,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":36288,"count":648,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-8.873896598815918,-0.5469026565551758,-0.06756925582885742],"maxPosition",8,[1,8.873896598815918,0.5469026565551758,0.06756925582885742]]],-1],0,0,[],[],[]],[[[6,".bin",1238058769,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":504,"length":60,"count":15,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":504,"count":9,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-6.445065498352051,-0.5092315673828125,-2.2861251831054688],"maxPosition",8,[1,6.445065498352051,0.5092325210571289,2.2861251831054688]]],-1],0,0,[],[],[]],[[[6,".bin",2037555080,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":224,"length":24,"count":6,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":224,"count":4,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-7.988122940063477,0,-2.714352607727051],"maxPosition",8,[1,7.988122940063477,0,2.714352607727051]]],-1],0,0,[],[],[]],[[[6,".bin",1811044579,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":896,"length":96,"count":24,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":2784,"length":192,"count":48,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":896,"count":16,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]},{"view":{"offset":992,"length":1792,"count":32,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.7232506275177002,-0.7216682434082031,-4.470584392547607],"maxPosition",8,[1,0.7232508659362793,0.7216677665710449,4.470584392547607]]],-1],0,0,[],[],[]],[[[6,".bin",162080282,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":224,"length":24,"count":6,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":224,"count":4,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-9.5367431640625e-7,-3.9488534927368164,-2.480282783508301],"maxPosition",8,[1,0,3.9488534927368164,2.480283260345459]]],-1],0,0,[],[],[]],[[[6,".bin",762211243,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":672,"length":72,"count":18,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":672,"count":12,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-8.87479019165039,-1.054255485534668,-0.5296778678894043],"maxPosition",8,[1,8.87479019165039,1.054255485534668,0.5296778678894043]]],-1],0,0,[],[],[]],[[[6,".bin",2813838528,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":448,"length":48,"count":12,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":448,"count":8,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-8.013285636901855,-0.48070716857910156,-0.5310330390930176],"maxPosition",8,[1,8.013285636901855,0.48070526123046875,0.5310320854187012]]],-1],0,0,[],[],[]],[[[6,".bin",3472477020,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":224,"length":24,"count":6,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":224,"count":4,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,0,-1.9365158081054688,-2.5201950073242188],"maxPosition",8,[1,0,1.9365158081054688,2.5201950073242188]]],-1],0,0,[],[],[]],[[[15,"Enseignes",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":0}],[[[{"transparencyFactor":0,"albedoScale":1},"mainColor",8,[4,4294967295],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[5],[10]],[[[6,".bin",3376250393,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":14336,"length":2064,"count":516,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":16848,"length":48,"count":12,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":14336,"count":256,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]},{"view":{"offset":16400,"length":448,"count":8,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-10.287734985351562,-17.862462997436523,-0.3997926712036133],"maxPosition",8,[1,10.287734985351562,17.862462997436523,0.3997917175292969]]],-1],0,0,[],[],[]],[[[6,".bin",1357714419,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":784,"length":96,"count":24,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":784,"count":14,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.46601009368896484,-8.200384140014648,-5.0004777908325195],"maxPosition",8,[1,0.46601104736328125,8.200384140014648,5.0004777908325195]]],-1],0,0,[],[],[]],[[[15,"Plastic_White",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":0}],[[[{"transparencyFactor":0,"albedoScale":1},"mainColor",8,[4,4294967295],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[5],[10]],[[[6,".bin",1571147391,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":65072,"length":7824,"count":1956,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":65072,"count":1162,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-9.05722713470459,-17.377220153808594,-5.001248359680176],"maxPosition",8,[1,-2.631283760070801,-15.001702308654785,-0.42711639404296875]]],-1],0,0,[],[],[]],[[[6,".bin",1491222574,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":448,"length":48,"count":12,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":448,"count":8,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-3.267155647277832,-1.210322380065918,-2.714352607727051],"maxPosition",8,[1,3.267155647277832,1.2103233337402344,2.71435284614563]]],-1],0,0,[],[],[]],[[[6,".bin",1474710419,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":448,"length":48,"count":12,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":448,"count":8,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.48070812225341797,-3.9488534927368164,-0.5310320854187012],"maxPosition",8,[1,0.48070669174194336,3.9488534927368164,0.5310320854187012]]],-1],0,0,[],[],[]],[[[53,"SR_G",".mp3",4.414694],-1],0,0,[],[],[]],[[[35,"SUV1121"],[30,"SUV1121",[-2],[0,"dc4v0ihnhZmY6h3UJiW8SB",-1,0],[1,216.411,0,-76.471],[3,0,-0.5143422471580423,0,0.857585011989141],[1,2.9999998211860657,2.9999996423721322,2.9999996423721322],[1,0,-61.907,0]],[74,"LOD0",1,[-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23],[0,"34ciUaQs5ch5+sdE/V6d3x",1,0]],[90,"Light_LOD0",2,[-25,-26,-27,-28,-29,-30,-31,-32],[[4,-24,[1,"45T/yGc8VQg4HK3//mImm0"],[29],[3],30]],[0,"5aJNei+ohbD7CbbKepXxUj",1,0]],[12,"Body_LOD0",2,[[4,-33,[1,"78lq7iZVJSOL1kKld6cVX4"],[0,1],[3],2]],[0,"cdwPEQNq1ZG4XBaUX4Mjn8",1,0]],[28,"BrakeFrontLeft_LOD0",2,[[4,-34,[1,"f5WutLCYRRkohkpcbOQvVR"],[3],[3],4]],[0,"cfjze2hkReyatYmVmPVXlM",1,0],[1,0.8009404540061951,0.3777190148830414,1.4115455150604248]],[28,"BrakeFrontRight_LOD0",2,[[4,-35,[1,"ees7XprPNcyYTEOj4Cl4jC"],[5],[3],6]],[0,"9fNFeC7n9T3Zt68m/j3KLA",1,0],[1,-0.8009403944015503,0.3777190148830414,1.4115455150604248]],[28,"BrakeRearLeft_LOD0",2,[[4,-36,[1,"cfA7CDROZWCpZS8chNg8vy"],[7],[3],8]],[0,"fdT1Mov5pe8J67bQL3PW3J",1,0],[1,0.8134588003158569,0.37771907448768616,-1.3940119743347168]],[28,"BrakeRearRight_LOD0",2,[[4,-37,[1,"adnNnu84hVWLf3UyN+RvLr"],[9],[3],10]],[0,"eeZtRX6yJa068BnkHYApaq",1,0],[1,-0.8134587407112122,0.37771907448768616,-1.3940119743347168]],[12,"Interior_LOD0",2,[[4,-38,[1,"87SNFGFEpb6K/G3LxNKm0r"],[11],[3],12]],[0,"b0ba37n69e6qTTKSM2Kpl2",1,0]],[12,"BrakeLights_LOD0",3,[[4,-39,[1,"43sjC2S9dX0r2SmEjttTiq"],[13],[3],14]],[0,"0dBhH6UZNWXJmEsy9dIUho",1,0]],[12,"DayTimeLight_LOD0",3,[[4,-40,[1,"dfXpITDMpUNLUkWysl98U3"],[15],[3],16]],[0,"07/i2zKkFbtI/CSCqj6KLd",1,0]],[12,"FogLight_LOD0",3,[[4,-41,[1,"18hEBMpxBZrraSwn3gEbYW"],[17],[3],18]],[0,"800VdM85JdopJUMJNHPhNt",1,0]],[12,"MainLight_LOD0",3,[[4,-42,[1,"5adkzBPs5bp6qAcNvR2IZr"],[19],[3],20]],[0,"e3geUUabFepIah1cGwEq6c",1,0]],[12,"ReverseLight_LOD0",3,[[4,-43,[1,"85Sz5CmqpdCYwKxIvftCq2"],[21],[3],22]],[0,"5d1jbUEJpaP76cCTm1gKPu",1,0]],[12,"TailLight_LOD0",3,[[4,-44,[1,"b6CUab6v1UwIJeUGg7/lZO"],[23],[3],24]],[0,"21JqSiDxlTbKYj9sIBIifp",1,0]],[12,"TurnSignalLeft_LOD0",3,[[4,-45,[1,"87im0jkFFbAKw+88PIEPgm"],[25],[3],26]],[0,"7a+5kjZC1bYpT6M3mrdmKB",1,0]],[12,"TurnSignalRight_LOD0",3,[[4,-46,[1,"54C4kB1kVRLaHpbVRgzM21"],[27],[3],28]],[0,"2erBCeZUFWyp3zdhUbxmjQ",1,0]],[12,"Paint_LOD0",2,[[4,-47,[1,"99o34CYdtcEJjK9aG8Aem1"],[31],[3],32]],[0,"06FHVIDzBfypQYfv46jw5i",1,0]],[42,"PlateBackTypeEU_LOD0",false,2,[[4,-48,[1,"eer+ZTnPpbIoNyQe/zx5cS"],[33],[3],34]],[0,"ea2EOKDoFQyrqqQqECpKCI",1,0]],[42,"PlateBackTypeUSA_LOD0",false,2,[[4,-49,[1,"fbJo4Zw05dT4To8RE8u3eg"],[35],[3],36]],[0,"13PC2VYWddCJ0AUK0FsbsR",1,0]],[42,"PlateFrontTypeEU_LOD0",false,2,[[4,-50,[1,"91wroNnYxU0ZrCRYu59sCX"],[37],[3],38]],[0,"a9QY47IJJW9ZPM2xYXlAPd",1,0]],[42,"PlateFrontTypeUSA_LOD0",false,2,[[4,-51,[1,"04/5MOY45W8a54h3SsXR4m"],[39],[3],40]],[0,"c4SUsNqwFc34Ga5wk0ct2Q",1,0]],[8,"SteeringWheel_LOD0",2,[[4,-52,[1,"04MNgkRTxcoalPgm9rxNAD"],[41],[3],42]],[0,"aaUq1AWZtaPK/WK144xX8f",1,0],[1,0.3657144606113434,0.9719341397285461,0.4066537618637085],[3,0.18995242062926912,0,0,0.9817932969302049],[1,21.900015070163104,0,0]],[28,"WheelFrontLeft_LOD0",2,[[4,-53,[1,"bdN6tujYVRkof18wgUiyin"],[43,44],[3],45]],[0,"d1TMSIsbBbTYzG+UntyNXA",1,0],[1,0.8009404540061951,0.3777190148830414,1.4115455150604248]],[28,"WheelFrontRight_LOD0",2,[[4,-54,[1,"55UMhylX1cOaIz0FNQn06D"],[46,47],[3],48]],[0,"69jvZ/tK9cR44oOGMcmC7+",1,0],[1,-0.8009403944015503,0.3777190148830414,1.4115455150604248]],[28,"WheelRearLeft_LOD0",2,[[4,-55,[1,"04pLIzGghQlJ8WV0CfWg6R"],[49,50],[3],51]],[0,"a8y8uBxmdUmKMwZr9QAYBg",1,0],[1,0.8134588003158569,0.37771907448768616,-1.3940119743347168]],[28,"WheelRearRight_LOD0",2,[[4,-56,[1,"f3kItBOWRRUb4sYRm42Fec"],[52,53],[3],54]],[0,"552mv7fA1ZraRFud2jTnqB",1,0],[1,-0.8134587407112122,0.37771907448768616,-1.3940119743347168]],[12,"Windows_LOD0",2,[[4,-57,[1,"92DcijOu1airwN7I3YkAau"],[55,56],[3],57]],[0,"6dQVP4JjNQz67iW9fyY86Z",1,0]],[8,"WipersBack_LOD0",2,[[4,-58,[1,"33VkUe8LBeXJPoN4H20NsF"],[58],[3],59]],[0,"1fO9cDtPtfX5WniLfCsBVu",1,0],[1,-0.01228292565792799,1.1771653890609741,-2.0723986625671387],[3,-0.3007057962135454,0,0,0.9537169517857895],[1,-34.99999960461055,0,0]],[8,"WipersLeft_LOD0",2,[[4,-59,[1,"b4FH56ULZQGb0pNSm3lyvX"],[60],[3],61]],[0,"521lhRQGpboIf0rPRjNmlR",1,0],[1,0.5379314422607422,1.0644166469573975,0.9853072762489319],[3,-0.45282770146310275,0.05915403861820624,-0.03589201793322692,0.8889092392092006],[1,-53.7431395491208,4.195803526461016,-6.741072822679555]],[8,"WipersRight_LOD0",2,[[4,-60,[1,"408QugjV9beYILzmb1gH5j"],[62],[3],63]],[0,"d9/G5Gf69eCqmrh2Sfkb+y",1,0],[1,-0.013764515519142151,1.0576444864273071,1.0735692977905273],[3,-0.4042493155700708,0.013735366226369306,-0.009452033906665321,0.9144968505308173],[1,-47.68100158275309,1.0019818979121444,-1.6270025503896004]]],0,[0,7,1,0,-1,2,0,-1,4,0,-2,5,0,-3,6,0,-4,7,0,-5,8,0,-6,9,0,-7,3,0,-8,18,0,-9,19,0,-10,20,0,-11,21,0,-12,22,0,-13,23,0,-14,24,0,-15,25,0,-16,26,0,-17,27,0,-18,28,0,-19,29,0,-20,30,0,-21,31,0,0,3,0,-1,10,0,-2,11,0,-3,12,0,-4,13,0,-5,14,0,-6,15,0,-7,16,0,-8,17,0,0,4,0,0,5,0,0,6,0,0,7,0,0,8,0,0,9,0,0,10,0,0,11,0,0,12,0,0,13,0,0,14,0,0,15,0,0,16,0,0,17,0,0,18,0,0,19,0,0,20,0,0,21,0,0,22,0,0,23,0,0,24,0,0,25,0,0,26,0,0,27,0,0,28,0,0,29,0,0,30,0,0,31,0,12,1,60],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,-2,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,-2,1,-1,-2,1,-1,-2,1,-1,-2,1,-1,-2,1,-1,1,-1,1,-1,1],[25,5,77,5,78,5,79,5,80,5,81,44,82,33,83,15,84,15,85,33,86,33,87,15,88,15,89,15,90,15,91,92,93,5,94,5,95,5,96,5,97,44,98,5,26,99,5,26,100,5,26,101,5,26,102,8,103,104,25,105,25,106,25,107]],[[[32,"Floor","0",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_NORMAL_MAP":true,"USE_ALBEDO_MAP":true},{},{}],[[[{"occlusion":0.494,"roughness":0.68,"metallic":0.255,"specularIntensity":0},"mainColor",8,[4,4287335423],"mainTexture",6,0,"normalMap",6,1],{},{}],11,0,0]]],0,0,[0,0,0],[8,14,5],[233,234,1]],[[[35,"Matallic_Grey_C-Class"],[51,"Matallic_Grey_C-Class",[-5],[[103,-2,[1,"14FJviscpD4KhfQgDxGKZy"],[1,0,0,0.5],[1,2.2,2,5],71],[81,true,-3,[1,"d08LuiK85DuYGY5mDu4a8v"],[1,3,2,8],72],[83,true,false,-4,[1,"daWEdDwwFCGrkszfsPEr9s"],73]],[0,"caxXq8+tNTma0FYIbh+EOA",-1,0],[1,214.451,1.96,-107.556],[3,0,0.4948293786054299,0,-0.8689901530333725],[1,3,3,3],[1,0,300.683,0]],[45,"Electric_1",[-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26],[0,"ddvt4xUJVfXqAmxC2Uvfoq",1,0],[1,-6.576113700866699,0.6715857982635498,4.729059219360352]],[46,"Example_Assembly",1,[-27,-28,-29,-30,-31,-32,-33,-34,2],[0,"dc4ro0WHFcdbgXNrSrSQLM",1,0],[1,6.47,-1.263,-4.261]],[8,"Electric_1_FrontBumper_3",3,[[4,-35,[1,"15YW54JvxZRI7Y1xbse3Vk"],[0,1],[3],2]],[0,"28SFqBLg9TyrSVorF9VXoD",1,0],[1,-6.576113700866699,0.6715857982635498,4.729059219360352],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[8,"Electric_1_RearBumper_2",3,[[4,-36,[1,"68PH6+Dq5TL7DzgZRwTCUQ"],[3,4],[3],5]],[0,"65g2k95gBRLYtiIFO/kejw",1,0],[1,-6.576113700866699,0.6715857982635498,4.729059219360352],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[8,"Electric_1_RightBumper_3",3,[[4,-37,[1,"57kGp3KAZYyaK9J5yiaZSk"],[6,7],[3],8]],[0,"92VDeR6adSm71y4/fJ0fWb",1,0],[1,-6.576113700866699,0.6715857982635498,4.729059219360352],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[8,"Electric_1_LeftBumper_2",3,[[4,-38,[1,"31UIt6u6dShr03dBYmUlNT"],[9],[3],10]],[0,"953OUc9TRT/YiNdaGCmgk2",1,0],[1,-6.576113700866699,0.6715857982635498,4.729059219360352],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[8,"Electric_1_Wheel",3,[[4,-39,[1,"252CLebzxTq6dT9umZjaLb"],[11],[3],12]],[0,"37X9vBuCxfwZpfWVEZWAOr",1,0],[1,-7.468113899230957,0.9915857911109924,6.244059085845947],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[8,"Electric_1_Wheel__1_",3,[[4,-40,[1,"49TChVcKpQuKS+nfv2nm6H"],[13],[3],14]],[0,"0149TVGiZel4gG6VVtvG3F",1,0],[1,-7.468113899230957,0.9915857911109924,3.32905912399292],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[8,"Electric_1_Wheel__2_",3,[[4,-41,[1,"c13fl0V29W5aT1l8xzC5W2"],[15],[3],16]],[0,"d1Dx5rabVbeoOczvpTSX2i",1,0],[1,-5.6771135330200195,0.9915857911109924,3.32905912399292],[3,-0.0000018831392803152352,0.7071067811840399,0.7071067811840399,0.0000018831392803152352],[1,-90,179.99969482421645,0]],[8,"Electric_1_Wheel__3_",3,[[4,-42,[1,"c5TKrlgKxW5oEslhq0lJ/m"],[17],[3],18]],[0,"07EYBtrNFYoaDJ8XCKFqLZ",1,0],[1,-5.6771135330200195,0.9915857911109924,6.244059085845947],[3,-0.0000018831392803152352,0.7071067811840399,0.7071067811840399,0.0000018831392803152352],[1,-90,179.99969482421645,0]],[23,"Elecric_1",2,[[4,-43,[1,"1fhVWqd11QDZfP9xKnzU3h"],[19,20,21],[3],22]],[0,"a6zETpiE9aV4iED9TZ7+ba",1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[8,"Elecric_1_Door_FL",2,[[4,-44,[1,"d5wGCccRJdKrH4feaGJiDd"],[23,24],[3],25]],[0,"6fTg+euNVXM4Vtec1SilvZ",1,0],[1,0.9143298268318176,0.7311053276062012,0.872050940990448],[3,-0.7071067811865475,0,0,0.7071067811865476],[1,-90,0,0]],[8,"Elecric_1_Door_FR",2,[[4,-45,[1,"bdVdsP8f9SoZyeogUKrBSG"],[26,27],[3],28]],[0,"01/FTjgi5Ti4y9LgvCtbBt",1,0],[1,-0.9143298268318176,0.7311053276062012,0.8720508217811584],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[8,"Elecric_1_Door_RL",2,[[4,-46,[1,"eeoX2GjrpU25bD5SuEY8Ny"],[29,30],[3],31]],[0,"1et2hO3dFbZYtRZH+jEmZ+",1,0],[1,0.9035815000534058,0.8048096895217896,-0.20108069479465485],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[8,"Elecric_1_Door_RR",2,[[4,-47,[1,"4agL4UcjlXxa9OGejdukQP"],[32,33],[3],34]],[0,"5bbf90NexSDZkghbZiXoIT",1,0],[1,-0.9035821557044983,0.8048096299171448,-0.20108076930046082],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[8,"Elecric_1_Hood",2,[[4,-48,[1,"81Qwje+SBdwLODpq3Z8wE7"],[35,36],[3],37]],[0,"ecWOoscSdWJ4N/ujk3qWAI",1,0],[1,0,0.9403597712516785,1.0017929077148438],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[23,"Elecric_1_Roof",2,[[4,-49,[1,"37spt2q4lSb4w0yrJfFNRV"],[38,39],[3],40]],[0,"31xxOUap5Tora1oLuORuvM",1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[8,"Elecric_1_Trunk",2,[[4,-50,[1,"d5WXUBc5lfpY7fp4I5vHrJ"],[41,42,43],[3],44]],[0,"1bBDb4ndhQga2AyTmyjVI5",1,0],[1,0,1.2916659116744995,-1.2361178398132324],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[23,"Electric_1_Dashboard",2,[[4,-51,[1,"b4aJQM50VR26r1KBTGaGlH"],[45],[3],46]],[0,"04D5MZhF9bXLrgDjZU7pL7",1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[8,"Electric_1_Dashboard_SteringWheel",2,[[4,-52,[1,"72GqqvIvtdQpIObmgW0hDr"],[47],[3],48]],[0,"2eMC2n7dRRKrO/PSDG+mmz",1,0],[1,0.35165831446647644,0.8131845593452454,0.41130098700523376],[3,-0.596979855870917,0,0,0.8022562257061887],[1,-73.30780119634963,0,0]],[23,"Electric_1_RearMirror",2,[[4,-53,[1,"a7ftUecoVQQ49kmgiM6ZYX"],[49],[3],50]],[0,"973X8fmPxZm5po6fpvXBNJ",1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[8,"Electric_1_Window_B",2,[[4,-54,[1,"desWBer9ZQHpoahsREwXVB"],[51],[3],52]],[0,"93dEWc1UtUIpsyk1S6TZRN",1,0],[1,0,1.2916659116744995,-1.2361178398132324],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[23,"Electric_1_Window_F",2,[[4,-55,[1,"08V9tHOf9SC7cDDdgeHMfY"],[53],[3],54]],[0,"21swFehQNQ2LtFudkw4u1y",1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[8,"Electric_1_Window_FL",2,[[4,-56,[1,"da4vDUWwRebJXt654h/7mF"],[55],[3],56]],[0,"2eUplmwvZYka2my7JE+1ju",1,0],[1,0.9143298268318176,0.7311053276062012,0.8720510005950928],[3,-0.7071067811865475,0,0,0.7071067811865476],[1,-90,0,0]],[8,"Electric_1_Window_FR",2,[[4,-57,[1,"ed1XgnypNdJI3nVfoH6hfP"],[57],[3],58]],[0,"4dc9FxHhRYzJzE0qj7Y2mZ",1,0],[1,-0.9143298268318176,0.7311053276062012,0.8720508217811584],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[8,"Electric_1_Window_ML",2,[[4,-58,[1,"e1q3iT4idZQZsboG2I9ByR"],[59],[3],60]],[0,"e9fYeNpZBZy5svVqMgRwaD",1,0],[1,0.9035815000534058,0.8048095703125,-0.20108069479465485],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[8,"Electric_1_Window_MR",2,[[4,-59,[1,"39UPalDQBaIbIullZs4ocj"],[61],[3],62]],[0,"e1V6UTWfJQzLOYik9adyXn",1,0],[1,-0.9035821557044983,0.8048095703125,-0.20108073949813843],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[23,"Electric_1_Window_RL",2,[[4,-60,[1,"95/5mNyTxZ4751xfk3gmap"],[63],[3],64]],[0,"0a86t2gYtXf4HkmYUFRV/c",1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[23,"Electric_1_Window_RR",2,[[4,-61,[1,"45vG2AZuFWwqWHCBiPbsk5"],[65],[3],66]],[0,"8aqjsxgJ5XG5ojeU2kORrw",1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[23,"Electric_1_Window_TaillightsL",2,[[4,-62,[1,"c9N3IqfsxclIGyjtStU6JR"],[67],[3],68]],[0,"11r16PrihYoYcvmucrBf2V",1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[23,"Electric_1_Window_TaillightsR",2,[[4,-63,[1,"99RJE7oBlc55cNBDHMEVI6"],[69],[3],70]],[0,"a2CCiKfgxbuJupfOwK478a",1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]]],0,[0,7,1,0,0,1,0,0,1,0,0,1,0,-1,3,0,-1,12,0,-2,13,0,-3,14,0,-4,15,0,-5,16,0,-6,17,0,-7,18,0,-8,19,0,-9,20,0,-10,21,0,-11,22,0,-12,23,0,-13,24,0,-14,25,0,-15,26,0,-16,27,0,-17,28,0,-18,29,0,-19,30,0,-20,31,0,-21,32,0,-1,4,0,-2,5,0,-3,6,0,-4,7,0,-5,8,0,-6,9,0,-7,10,0,-8,11,0,0,4,0,0,5,0,0,6,0,0,7,0,0,8,0,0,9,0,0,10,0,0,11,0,0,12,0,0,13,0,0,14,0,0,15,0,0,16,0,0,17,0,0,18,0,0,19,0,0,20,0,0,21,0,0,22,0,0,23,0,0,24,0,0,25,0,0,26,0,0,27,0,0,28,0,0,29,0,0,30,0,0,31,0,0,32,0,12,1,2,3,3,63],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,-2,1,-1,-2,1,-1,-2,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,-2,-3,1,-1,-2,1,-1,-2,1,-1,-2,1,-1,-2,1,-1,-2,1,-1,-2,1,-1,-2,-3,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,6,6,18],[17,2,108,17,2,109,17,2,110,2,111,2,112,2,113,2,114,2,115,17,2,45,116,17,2,117,17,2,118,17,2,119,17,2,120,17,121,122,17,2,123,17,2,45,124,46,125,46,126,2,127,8,128,8,129,8,130,8,131,8,132,8,133,8,134,8,135,8,136,8,137,0,0,138]],[[[84,"../mirror/effect-mirror",[{"hash":3338222253,"name":"../mirror/effect-mirror|unlit-vs:vert|unlit-fs:frag","blocks":[{"name":"Constants","stageFlags":17,"binding":0,"members":[{"name":"tilingOffset","type":16,"count":1},{"name":"albedo","type":16,"count":1},{"name":"albedoScaleAndCutoff","type":16,"count":1},{"name":"backColor","type":16,"count":1},{"name":"fresnelParam","type":16,"count":1},{"name":"noiseParam","type":16,"count":1}],"defines":[]},{"name":"Constant","stageFlags":16,"binding":1,"members":[{"name":"mainColor","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"albedoMap","type":28,"count":1,"stageFlags":16,"binding":2,"defines":[]},{"name":"reflectionMap","type":28,"count":1,"stageFlags":16,"binding":3,"defines":[]},{"name":"reflectionMaskMap","type":28,"count":1,"stageFlags":16,"binding":4,"defines":["USE_REFLECTION_MASK_MAP"]},{"name":"reflectionNoiseMap","type":28,"count":1,"stageFlags":16,"binding":5,"defines":["USE_REFLECTION_NOISE_MAP"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_normal","format":32,"location":1,"defines":[]},{"name":"a_texCoord","format":21,"location":2,"defines":[]},{"name":"a_tangent","format":44,"location":3,"defines":[]},{"name":"a_joints","location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","format":44,"isInstanced":true,"location":6,"defines":["USE_INSTANCING","CC_USE_BAKED_ANIMATION"]},{"name":"a_matWorld0","format":44,"isInstanced":true,"location":7,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING","CC_USE_LIGHTMAP"]},{"name":"a_localShadowBias","format":21,"isInstanced":true,"location":11,"defines":["USE_INSTANCING","CC_RECEIVE_SHADOW"]},{"name":"a_dyn_batch_id","format":11,"location":12,"defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"a_vertexId","format":11,"location":13,"defines":["CC_USE_MORPH"]},{"name":"a_color","format":44,"location":14,"defines":[]},{"name":"a_texCoord1","format":21,"location":15,"defines":["HAS_SECOND_UV"]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"glsl3":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\nin vec4 a_tangent;\n#if CC_USE_SKINNING\n    in vec4 a_joints;\n  in vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    in highp vec4 a_jointAnimInfo;\n  #endif\n  in vec4 a_matWorld0;\n  in vec4 a_matWorld1;\n  in vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    in vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    in vec2 a_localShadowBias;\n  #endif\n#elif USE_BATCHING\n  in float a_dyn_batch_id;\n#endif\n#if CC_USE_MORPH\n    in float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\n#if CC_USE_MORPH\n  layout(std140) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n  #endif\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n  vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n  vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n  vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n  }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    layout(std140) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(std140) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      uniform highp sampler2D cc_realtimeJoint;\n    #else\n      layout(std140) uniform CCSkinning {\n        highp vec4 cc_joints[CC_JOINT_UNIFORM_CAPACITY * 3];\n      };\n    #endif\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n        mat4 getJointMatrix (float i) {\n          float x = i;\n          vec4 v1 = texture(cc_realtimeJoint, vec2( x / 256.0, 0.5 / 3.0));\n          vec4 v2 = texture(cc_realtimeJoint, vec2( x / 256.0, 1.5 / 3.0));\n          vec4 v3 = texture(cc_realtimeJoint, vec2( x / 256.0, 2.5 / 3.0));\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #else\n        mat4 getJointMatrix (float i) {\n         float x = 4.0 * i;\n          vec4 v1 = vec4(\n            decode32(texture(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 0.5 / 3.0)))\n          );\n          vec4 v2 = vec4(\n            decode32(texture(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 1.5 / 3.0)))\n          );\n          vec4 v3 = vec4(\n            decode32(texture(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 2.5 / 3.0)))\n          );\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #endif\n    #else\n      mat4 getJointMatrix (float i) {\n        int idx = int(i);\n        vec4 v1 = cc_joints[idx * 3];\n        vec4 v2 = cc_joints[idx * 3 + 1];\n        vec4 v3 = cc_joints[idx * 3 + 2];\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_debug_view_mode;\n  mediump vec4 cc_debug_view_composite_pack_1;\n  mediump vec4 cc_debug_view_composite_pack_2;\n  mediump vec4 cc_debug_view_composite_pack_3;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if !USE_INSTANCING\n  #if USE_BATCHING\n    layout(std140) uniform CCLocalBatched {\n      highp mat4 cc_matWorlds[10];\n    };\n  #else\n    layout(std140) uniform CCLocal {\n      highp mat4 cc_matWorld;\n      highp mat4 cc_matWorldIT;\n      highp vec4 cc_lightingMapUVParam;\n      highp vec4 cc_localShadowBias;\n    };\n  #endif\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\n#if CC_USE_FOG != 4\n  float LinearFog(vec4 pos, vec3 cameraPos, float fogStart, float fogEnd) {\n      vec4 wPos = pos;\n      float cam_dis = distance(cameraPos, wPos.xyz);\n      return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n  }\n  float ExpFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * fogDensity);\n      return f;\n  }\n  float ExpSquaredFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n      return f;\n  }\n  float LayeredFog(vec4 pos, vec3 cameraPos, float fogTop, float fogRange, float fogAtten) {\n      vec4 wPos = pos;\n      vec3 camWorldProj = cameraPos.xyz;\n      camWorldProj.y = 0.;\n      vec3 worldPosProj = wPos.xyz;\n      worldPosProj.y = 0.;\n      float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n      float fDeltaY, fDensityIntegral;\n      if (cameraPos.y > fogTop) {\n          if (wPos.y < fogTop) {\n              fDeltaY = (fogTop - wPos.y) / fogRange * 2.0;\n              fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n          }\n          else {\n              fDeltaY = 0.;\n              fDensityIntegral = 0.;\n          }\n      }\n      else {\n          if (wPos.y < fogTop) {\n              float fDeltaA = (fogTop - cameraPos.y) / fogRange * 2.;\n              float fDeltaB = (fogTop - wPos.y) / fogRange * 2.;\n              fDeltaY = abs(fDeltaA - fDeltaB);\n              fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n          }\n          else {\n              fDeltaY = abs(fogTop - cameraPos.y) / fogRange * 2.;\n              fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n          }\n      }\n      float fDensity;\n      if (fDeltaY != 0.) {\n          fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n      }\n      else {\n          fDensity = 0.;\n      }\n      float f = exp(-fDensity);\n      return f;\n  }\n#endif\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n#if CC_USE_FOG == 0\n\tfactor = LinearFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.y);\n#elif CC_USE_FOG == 1\n\tfactor = ExpFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 2\n\tfactor = ExpSquaredFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 3\n\tfactor = LayeredFog(pos, cc_cameraPos.xyz, cc_fogAdd.x, cc_fogAdd.y, cc_fogAdd.z);\n#else\n\tfactor = 1.0;\n#endif\n}\n#if !CC_USE_ACCURATE_FOG\nout mediump float v_fog_factor;\n#endif\nvoid CC_TRANSFER_FOG(vec4 pos) {\n#if !CC_USE_ACCURATE_FOG\n    CC_TRANSFER_FOG_BASE(pos, v_fog_factor);\n#endif\n}\nout highp vec4 v_shadowPos;\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n#if CC_SUPPORT_CASCADED_SHADOW_MAP\n  layout(std140) uniform CCCSM {\n    highp vec4 cc_csmViewDir0[4];\n    highp vec4 cc_csmViewDir1[4];\n    highp vec4 cc_csmViewDir2[4];\n    highp vec4 cc_csmAtlas[4];\n    highp mat4 cc_matCSMViewProj[4];\n    highp vec4 cc_csmProjDepthInfo[4];\n    highp vec4 cc_csmProjInfo[4];\n    highp vec4 cc_csmSplitsInfo;\n  };\n#endif\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotShadowMap;\n  #if CC_SUPPORT_CASCADED_SHADOW_MAP\n  #else\n  #endif\n#endif\n#if CC_RECEIVE_SHADOW\n#endif\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 backColor;\n  vec4 fresnelParam;\n  vec4 noiseParam;\n};\nin vec4 a_color;\n#if HAS_SECOND_UV\n  in vec2 a_texCoord1;\n#endif\nout vec3 v_position;\nout vec3 v_normal;\nout vec3 v_tangent;\nout vec3 v_bitangent;\nout vec2 v_uv;\nout vec2 v_uv1;\nout vec4 v_color;\nout vec4 v_screenPos;\nvec4 vert () {\n  StandardVertInput In;\n  CCVertInput(In);\n  mat4 matWorld, matWorldIT;\n  CCGetWorldMatrixFull(matWorld, matWorldIT);\n  vec4 pos = matWorld * In.position;\n  v_position = pos.xyz;\n  v_normal = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz);\n  v_tangent = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n  v_bitangent = cross(v_normal, v_tangent) * In.tangent.w;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1;\n  #endif\n  #if SAMPLE_FROM_RT\n    v_uv = cc_cameraPos.w > 1.0 ? vec2(v_uv.x, 1.0 - v_uv.y) : v_uv;\n  #endif\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n    #if SAMPLE_FROM_RT\n      v_uv1 = cc_cameraPos.w > 1.0 ? vec2(v_uv1.x, 1.0 - v_uv1.y) : v_uv1;\n    #endif\n  #endif\n  v_color = a_color;\n  CC_TRANSFER_FOG(pos);\n  v_shadowPos = cc_matLightViewProj * pos;\n  v_screenPos = cc_matProj * (cc_matView * matWorld) * In.position;\n  return v_screenPos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_debug_view_mode;\n  mediump vec4 cc_debug_view_composite_pack_1;\n  mediump vec4 cc_debug_view_composite_pack_2;\n  mediump vec4 cc_debug_view_composite_pack_3;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_WORLD_POS CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT + 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR CC_SURFACES_DEBUG_VIEW_WORLD_POS + 1\n#define CC_SURFACES_DEBUG_VIEW_FACE_SIDE CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR + 1\n#define CC_SURFACES_DEBUG_VIEW_UV0 CC_SURFACES_DEBUG_VIEW_FACE_SIDE + 1\n#define CC_SURFACES_DEBUG_VIEW_UV1 CC_SURFACES_DEBUG_VIEW_UV0 + 1\n#define CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP CC_SURFACES_DEBUG_VIEW_UV1 + 1\n#define CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP + 1\n#define CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT + 1\n#define CC_SURFACES_DEBUG_VIEW_BASE_COLOR CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR CC_SURFACES_DEBUG_VIEW_BASE_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSPARENCY CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_METALLIC CC_SURFACES_DEBUG_VIEW_TRANSPARENCY + 1\n#define CC_SURFACES_DEBUG_VIEW_ROUGHNESS CC_SURFACES_DEBUG_VIEW_METALLIC + 1\n#define CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY CC_SURFACES_DEBUG_VIEW_ROUGHNESS + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_ALL CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE CC_SURFACES_DEBUG_VIEW_DIRECT_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_ALL CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_EMISSIVE CC_SURFACES_DEBUG_VIEW_ENV_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_LIGHT_MAP CC_SURFACES_DEBUG_VIEW_EMISSIVE + 1\n#define CC_SURFACES_DEBUG_VIEW_SHADOW CC_SURFACES_DEBUG_VIEW_LIGHT_MAP + 1\n#define CC_SURFACES_DEBUG_VIEW_AO CC_SURFACES_DEBUG_VIEW_SHADOW + 1\n#define CC_SURFACES_DEBUG_VIEW_FOG CC_SURFACES_DEBUG_VIEW_AO + 1\n#define CC_SURFACES_DEBUG_VIEW_SINGLE 1\n#define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC 2\n#define IS_DEBUG_VIEW_LIGHTING_ENABLE_WITH_ALBEDO (cc_debug_view_mode.y > 0.0)\n#define IS_DEBUG_VIEW_MISC_ENABLE_CSM_LAYER_COLORATION (cc_debug_view_mode.z > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_DIFFUSE (cc_debug_view_composite_pack_1.x > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_SPECULAR (cc_debug_view_composite_pack_1.y > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_ENV_DIFFUSE (cc_debug_view_composite_pack_1.z > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_ENV_SPECULAR (cc_debug_view_composite_pack_1.w > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_EMISSIVE (cc_debug_view_composite_pack_2.x > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_LIGHT_MAP (cc_debug_view_composite_pack_2.y > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_SHADOW (cc_debug_view_composite_pack_2.z > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_AO (cc_debug_view_composite_pack_2.w > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_NORMAL_MAP (cc_debug_view_composite_pack_3.x > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_FOG (cc_debug_view_composite_pack_3.y > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TONE_MAPPING (cc_debug_view_composite_pack_3.z > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION (cc_debug_view_composite_pack_3.w > 0.0)\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\n#if CC_USE_FOG != 4\n  float LinearFog(vec4 pos, vec3 cameraPos, float fogStart, float fogEnd) {\n      vec4 wPos = pos;\n      float cam_dis = distance(cameraPos, wPos.xyz);\n      return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n  }\n  float ExpFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * fogDensity);\n      return f;\n  }\n  float ExpSquaredFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n      return f;\n  }\n  float LayeredFog(vec4 pos, vec3 cameraPos, float fogTop, float fogRange, float fogAtten) {\n      vec4 wPos = pos;\n      vec3 camWorldProj = cameraPos.xyz;\n      camWorldProj.y = 0.;\n      vec3 worldPosProj = wPos.xyz;\n      worldPosProj.y = 0.;\n      float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n      float fDeltaY, fDensityIntegral;\n      if (cameraPos.y > fogTop) {\n          if (wPos.y < fogTop) {\n              fDeltaY = (fogTop - wPos.y) / fogRange * 2.0;\n              fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n          }\n          else {\n              fDeltaY = 0.;\n              fDensityIntegral = 0.;\n          }\n      }\n      else {\n          if (wPos.y < fogTop) {\n              float fDeltaA = (fogTop - cameraPos.y) / fogRange * 2.;\n              float fDeltaB = (fogTop - wPos.y) / fogRange * 2.;\n              fDeltaY = abs(fDeltaA - fDeltaB);\n              fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n          }\n          else {\n              fDeltaY = abs(fogTop - cameraPos.y) / fogRange * 2.;\n              fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n          }\n      }\n      float fDensity;\n      if (fDeltaY != 0.) {\n          fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n      }\n      else {\n          fDensity = 0.;\n      }\n      float f = exp(-fDensity);\n      return f;\n  }\n#endif\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n#if CC_USE_FOG == 0\n\tfactor = LinearFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.y);\n#elif CC_USE_FOG == 1\n\tfactor = ExpFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 2\n\tfactor = ExpSquaredFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 3\n\tfactor = LayeredFog(pos, cc_cameraPos.xyz, cc_fogAdd.x, cc_fogAdd.y, cc_fogAdd.z);\n#else\n\tfactor = 1.0;\n#endif\n}\nvoid CC_APPLY_FOG_BASE(inout vec4 color, float factor) {\n\tcolor = vec4(mix(cc_fogColor.rgb, color.rgb, factor), color.a);\n}\n#if !CC_USE_ACCURATE_FOG\nin mediump float v_fog_factor;\n#endif\nvoid CC_APPLY_FOG(inout vec4 color) {\n#if !CC_USE_ACCURATE_FOG\n    CC_APPLY_FOG_BASE(color, v_fog_factor);\n#endif\n}\nvoid CC_APPLY_FOG(inout vec4 color, vec3 worldPos) {\n#if CC_USE_ACCURATE_FOG\n    float factor;\n    CC_TRANSFER_FOG_BASE(vec4(worldPos, 1.0), factor);\n#else\n    float factor = v_fog_factor;\n#endif\n    CC_APPLY_FOG_BASE(color, factor);\n}\nin highp vec4 v_shadowPos;\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n#if CC_SUPPORT_CASCADED_SHADOW_MAP\n  layout(std140) uniform CCCSM {\n    highp vec4 cc_csmViewDir0[4];\n    highp vec4 cc_csmViewDir1[4];\n    highp vec4 cc_csmViewDir2[4];\n    highp vec4 cc_csmAtlas[4];\n    highp mat4 cc_matCSMViewProj[4];\n    highp vec4 cc_csmProjDepthInfo[4];\n    highp vec4 cc_csmProjInfo[4];\n    highp vec4 cc_csmSplitsInfo;\n  };\n#endif\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotShadowMap;\n  float NativePCFShadowFactorHard (vec3 shadowNDCPos, sampler2D shadowMap, vec2 shadowMapResolution)\n  {\n    #if CC_SHADOWMAP_FORMAT == 1\n      return step(shadowNDCPos.z, dot(texture(shadowMap, shadowNDCPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    #else\n      return step(shadowNDCPos.z, texture(shadowMap, shadowNDCPos.xy).x);\n    #endif\n  }\n  float NativePCFShadowFactorSoft (vec3 shadowNDCPos, sampler2D shadowMap, vec2 shadowMapResolution)\n  {\n    vec2 oneTap = 1.0 / shadowMapResolution;\n    vec2 shadowNDCPos_offset = shadowNDCPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    #if CC_SHADOWMAP_FORMAT == 1\n      block0 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos_offset.x, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos_offset.x, shadowNDCPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    #else\n      block0 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos.y)).x);\n      block1 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos_offset.x, shadowNDCPos.y)).x);\n      block2 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset.y)).x);\n      block3 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos_offset.x, shadowNDCPos_offset.y)).x);\n    #endif\n    float coefX   = mod(shadowNDCPos.x, oneTap.x) * shadowMapResolution.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(shadowNDCPos.y, oneTap.y) * shadowMapResolution.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float NativePCFShadowFactorSoft3X (vec3 shadowNDCPos, sampler2D shadowMap, vec2 shadowMapResolution)\n  {\n    vec2 oneTap = 1.0 / shadowMapResolution;\n    float shadowNDCPos_offset_L = shadowNDCPos.x - oneTap.x;\n    float shadowNDCPos_offset_R = shadowNDCPos.x + oneTap.x;\n    float shadowNDCPos_offset_U = shadowNDCPos.y - oneTap.y;\n    float shadowNDCPos_offset_D = shadowNDCPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    #if CC_SHADOWMAP_FORMAT == 1\n      block0 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    #else\n      block0 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos_offset_U)).x);\n      block1 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset_U)).x);\n      block2 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos_offset_U)).x);\n      block3 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos.y)).x);\n      block4 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos.y)).x);\n      block5 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos.y)).x);\n      block6 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos_offset_D)).x);\n      block7 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset_D)).x);\n      block8 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos_offset_D)).x);\n    #endif\n    float coefX = mod(shadowNDCPos.x, oneTap.x) * shadowMapResolution.x;\n    float coefY = mod(shadowNDCPos.y, oneTap.y) * shadowMapResolution.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\n  float NativePCFShadowFactorSoft5X (vec3 shadowNDCPos, sampler2D shadowMap, vec2 shadowMapResolution)\n  {\n    vec2 oneTap = 1.0 / shadowMapResolution;\n    vec2 twoTap = oneTap * 2.0;\n    vec2 offset1 = shadowNDCPos.xy + vec2(-twoTap.x, -twoTap.y);\n    vec2 offset2 = shadowNDCPos.xy + vec2(-oneTap.x, -twoTap.y);\n    vec2 offset3 = shadowNDCPos.xy + vec2(0.0, -twoTap.y);\n    vec2 offset4 = shadowNDCPos.xy + vec2(oneTap.x, -twoTap.y);\n    vec2 offset5 = shadowNDCPos.xy + vec2(twoTap.x, -twoTap.y);\n    vec2 offset6 = shadowNDCPos.xy + vec2(-twoTap.x, -oneTap.y);\n    vec2 offset7 = shadowNDCPos.xy + vec2(-oneTap.x, -oneTap.y);\n    vec2 offset8 = shadowNDCPos.xy + vec2(0.0, -oneTap.y);\n    vec2 offset9 = shadowNDCPos.xy + vec2(oneTap.x, -oneTap.y);\n    vec2 offset10 = shadowNDCPos.xy + vec2(twoTap.x, -oneTap.y);\n    vec2 offset11 = shadowNDCPos.xy + vec2(-twoTap.x, 0.0);\n    vec2 offset12 = shadowNDCPos.xy + vec2(-oneTap.x, 0.0);\n    vec2 offset13 = shadowNDCPos.xy + vec2(0.0, 0.0);\n    vec2 offset14 = shadowNDCPos.xy + vec2(oneTap.x, 0.0);\n    vec2 offset15 = shadowNDCPos.xy + vec2(twoTap.x, 0.0);\n    vec2 offset16 = shadowNDCPos.xy + vec2(-twoTap.x, oneTap.y);\n    vec2 offset17 = shadowNDCPos.xy + vec2(-oneTap.x, oneTap.y);\n    vec2 offset18 = shadowNDCPos.xy + vec2(0.0, oneTap.y);\n    vec2 offset19 = shadowNDCPos.xy + vec2(oneTap.x, oneTap.y);\n    vec2 offset20 = shadowNDCPos.xy + vec2(twoTap.x, oneTap.y);\n    vec2 offset21 = shadowNDCPos.xy + vec2(-twoTap.x, twoTap.y);\n    vec2 offset22 = shadowNDCPos.xy + vec2(-oneTap.x, twoTap.y);\n    vec2 offset23 = shadowNDCPos.xy + vec2(0.0, twoTap.y);\n    vec2 offset24 = shadowNDCPos.xy + vec2(oneTap.x, twoTap.y);\n    vec2 offset25 = shadowNDCPos.xy + vec2(twoTap.x, twoTap.y);\n    float block1, block2, block3, block4, block5, block6, block7, block8, block9, block10, block11, block12, block13, block14, block15, block16, block17, block18, block19, block20, block21, block22, block23, block24, block25;\n    #if CC_SHADOWMAP_FORMAT == 1\n      block1 = step(shadowNDCPos.z, dot(texture(shadowMap, offset1), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(shadowNDCPos.z, dot(texture(shadowMap, offset2), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(shadowNDCPos.z, dot(texture(shadowMap, offset3), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(shadowNDCPos.z, dot(texture(shadowMap, offset4), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(shadowNDCPos.z, dot(texture(shadowMap, offset5), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(shadowNDCPos.z, dot(texture(shadowMap, offset6), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(shadowNDCPos.z, dot(texture(shadowMap, offset7), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(shadowNDCPos.z, dot(texture(shadowMap, offset8), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block9 = step(shadowNDCPos.z, dot(texture(shadowMap, offset9), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block10 = step(shadowNDCPos.z, dot(texture(shadowMap, offset10), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block11 = step(shadowNDCPos.z, dot(texture(shadowMap, offset11), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block12 = step(shadowNDCPos.z, dot(texture(shadowMap, offset12), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block13 = step(shadowNDCPos.z, dot(texture(shadowMap, offset13), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block14 = step(shadowNDCPos.z, dot(texture(shadowMap, offset14), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block15 = step(shadowNDCPos.z, dot(texture(shadowMap, offset15), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block16 = step(shadowNDCPos.z, dot(texture(shadowMap, offset16), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block17 = step(shadowNDCPos.z, dot(texture(shadowMap, offset17), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block18 = step(shadowNDCPos.z, dot(texture(shadowMap, offset18), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block19 = step(shadowNDCPos.z, dot(texture(shadowMap, offset19), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block20 = step(shadowNDCPos.z, dot(texture(shadowMap, offset20), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block21 = step(shadowNDCPos.z, dot(texture(shadowMap, offset21), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block22 = step(shadowNDCPos.z, dot(texture(shadowMap, offset22), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block23 = step(shadowNDCPos.z, dot(texture(shadowMap, offset23), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block24 = step(shadowNDCPos.z, dot(texture(shadowMap, offset24), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block25 = step(shadowNDCPos.z, dot(texture(shadowMap, offset25), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    #else\n      block1 = step(shadowNDCPos.z, texture(shadowMap, offset1).x);\n      block2 = step(shadowNDCPos.z, texture(shadowMap, offset2).x);\n      block3 = step(shadowNDCPos.z, texture(shadowMap, offset3).x);\n      block4 = step(shadowNDCPos.z, texture(shadowMap, offset4).x);\n      block5 = step(shadowNDCPos.z, texture(shadowMap, offset5).x);\n      block6 = step(shadowNDCPos.z, texture(shadowMap, offset6).x);\n      block7 = step(shadowNDCPos.z, texture(shadowMap, offset7).x);\n      block8 = step(shadowNDCPos.z, texture(shadowMap, offset8).x);\n      block9 = step(shadowNDCPos.z, texture(shadowMap, offset9).x);\n      block10 = step(shadowNDCPos.z, texture(shadowMap, offset10).x);\n      block11 = step(shadowNDCPos.z, texture(shadowMap, offset11).x);\n      block12 = step(shadowNDCPos.z, texture(shadowMap, offset12).x);\n      block13 = step(shadowNDCPos.z, texture(shadowMap, offset13).x);\n      block14 = step(shadowNDCPos.z, texture(shadowMap, offset14).x);\n      block15 = step(shadowNDCPos.z, texture(shadowMap, offset15).x);\n      block16 = step(shadowNDCPos.z, texture(shadowMap, offset16).x);\n      block17 = step(shadowNDCPos.z, texture(shadowMap, offset17).x);\n      block18 = step(shadowNDCPos.z, texture(shadowMap, offset18).x);\n      block19 = step(shadowNDCPos.z, texture(shadowMap, offset19).x);\n      block20 = step(shadowNDCPos.z, texture(shadowMap, offset20).x);\n      block21 = step(shadowNDCPos.z, texture(shadowMap, offset21).x);\n      block22 = step(shadowNDCPos.z, texture(shadowMap, offset22).x);\n      block23 = step(shadowNDCPos.z, texture(shadowMap, offset23).x);\n      block24 = step(shadowNDCPos.z, texture(shadowMap, offset24).x);\n      block25 = step(shadowNDCPos.z, texture(shadowMap, offset25).x);\n    #endif\n    vec2 coef = fract(shadowNDCPos.xy * shadowMapResolution);\n    vec2 v1X1 = mix(vec2(block1, block6), vec2(block2, block7), coef.xx);\n    vec2 v1X2 = mix(vec2(block2, block7), vec2(block3, block8), coef.xx);\n    vec2 v1X3 = mix(vec2(block3, block8), vec2(block4, block9), coef.xx);\n    vec2 v1X4 = mix(vec2(block4, block9), vec2(block5, block10), coef.xx);\n    float v1 = mix(v1X1.x, v1X1.y, coef.y) + mix(v1X2.x, v1X2.y, coef.y) + mix(v1X3.x, v1X3.y, coef.y) + mix(v1X4.x, v1X4.y, coef.y);\n    vec2 v2X1 = mix(vec2(block6, block11), vec2(block7, block12), coef.xx);\n    vec2 v2X2 = mix(vec2(block7, block12), vec2(block8, block13), coef.xx);\n    vec2 v2X3 = mix(vec2(block8, block13), vec2(block9, block14), coef.xx);\n    vec2 v2X4 = mix(vec2(block9, block14), vec2(block10, block15), coef.xx);\n    float v2 = mix(v2X1.x, v2X1.y, coef.y) + mix(v2X2.x, v2X2.y, coef.y) + mix(v2X3.x, v2X3.y, coef.y) + mix(v2X4.x, v2X4.y, coef.y);\n    vec2 v3X1 = mix(vec2(block11, block16), vec2(block12, block17), coef.xx);\n    vec2 v3X2 = mix(vec2(block12, block17), vec2(block13, block18), coef.xx);\n    vec2 v3X3 = mix(vec2(block13, block18), vec2(block14, block19), coef.xx);\n    vec2 v3X4 = mix(vec2(block14, block19), vec2(block15, block20), coef.xx);\n    float v3 = mix(v3X1.x, v3X1.y, coef.y) + mix(v3X2.x, v3X2.y, coef.y) + mix(v3X3.x, v3X3.y, coef.y) + mix(v3X4.x, v3X4.y, coef.y);\n    vec2 v4X1 = mix(vec2(block16, block21), vec2(block17, block22), coef.xx);\n    vec2 v4X2 = mix(vec2(block17, block22), vec2(block18, block23), coef.xx);\n    vec2 v4X3 = mix(vec2(block18, block23), vec2(block19, block24), coef.xx);\n    vec2 v4X4 = mix(vec2(block19, block24), vec2(block20, block25), coef.xx);\n    float v4 = mix(v4X1.x, v4X1.y, coef.y) + mix(v4X2.x, v4X2.y, coef.y) + mix(v4X3.x, v4X3.y, coef.y) + mix(v4X4.x, v4X4.y, coef.y);\n    float fAvg = (v1 + v2 + v3 + v4) * 0.0625;\n    return fAvg;\n  }\n  bool GetShadowNDCPos(out vec3 shadowNDCPos, vec4 shadowPosWithDepthBias)\n  {\n  \tshadowNDCPos = shadowPosWithDepthBias.xyz / shadowPosWithDepthBias.w * 0.5 + 0.5;\n  \tif (shadowNDCPos.x < 0.0 || shadowNDCPos.x > 1.0 ||\n  \t\tshadowNDCPos.y < 0.0 || shadowNDCPos.y > 1.0 ||\n  \t\tshadowNDCPos.z < 0.0 || shadowNDCPos.z > 1.0) {\n  \t\treturn false;\n  \t}\n  \tshadowNDCPos.xy = cc_cameraPos.w == 1.0 ? vec2(shadowNDCPos.xy.x, 1.0 - shadowNDCPos.xy.y) : shadowNDCPos.xy;\n  \treturn true;\n  }\n  vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal, float normalBias, vec3 matViewDir0, vec3 matViewDir1, vec3 matViewDir2, vec2 projScaleXY)\n  {\n    vec4 newShadowPos = shadowPos;\n    if (normalBias > EPSILON_LOWP)\n    {\n      vec3 viewNormal = vec3(dot(matViewDir0, worldNormal), dot(matViewDir1, worldNormal), dot(matViewDir2, worldNormal));\n      if (viewNormal.z < 0.1)\n        newShadowPos.xy += viewNormal.xy * projScaleXY * normalBias * clamp(viewNormal.z, 0.001, 0.1);\n    }\n    return newShadowPos;\n  }\n  vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal, float normalBias, mat4 matLightView, vec2 projScaleXY)\n  {\n  \tvec4 newShadowPos = shadowPos;\n  \tif (normalBias > EPSILON_LOWP)\n  \t{\n  \t\tvec4 viewNormal = matLightView * vec4(worldNormal, 0.0);\n  \t\tif (viewNormal.z < 0.1)\n  \t\t\tnewShadowPos.xy += viewNormal.xy * projScaleXY * normalBias * clamp(viewNormal.z, 0.001, 0.1);\n  \t}\n  \treturn newShadowPos;\n  }\n  vec4 ApplyShadowDepthBias_Orthographic(vec4 shadowPos, float viewspaceDepthBias, float projScaleZ, float projBiasZ)\n  {\n  \tfloat coeffA = projScaleZ;\n  \tfloat coeffB = projBiasZ;\n  \tfloat viewSpacePos_z = (shadowPos.z - coeffB) / coeffA;\n  \tviewSpacePos_z += viewspaceDepthBias;\n  \tvec4 result = shadowPos;\n  \tresult.z = viewSpacePos_z * coeffA + coeffB;\n  \treturn result;\n  }\n  float CCGetDirLightShadowFactorHard (vec4 shadowPosWithDepthBias) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorHard(shadowNDCPos, cc_shadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetDirLightShadowFactorSoft (vec4 shadowPosWithDepthBias) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft(shadowNDCPos, cc_shadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetDirLightShadowFactorSoft3X (vec4 shadowPosWithDepthBias) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft3X(shadowNDCPos, cc_shadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetDirLightShadowFactorSoft5X (vec4 shadowPosWithDepthBias) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft5X(shadowNDCPos, cc_shadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCShadowFactorBase(vec4 shadowPos, vec3 N, vec2 shadowBias)\n  {\n    vec4 pos = ApplyShadowDepthBias_FaceNormal(shadowPos, N, shadowBias.y, cc_matLightView, cc_shadowProjInfo.xy);\n    pos = ApplyShadowDepthBias_Orthographic(pos, shadowBias.x, cc_shadowProjDepthInfo.x, cc_shadowProjDepthInfo.y);\n    float realtimeShadow = 1.0;\n    #if CC_DIR_SHADOW_PCF_TYPE == 3\n      realtimeShadow = CCGetDirLightShadowFactorSoft5X(pos);\n    #endif\n    #if CC_DIR_SHADOW_PCF_TYPE == 2\n      realtimeShadow =  CCGetDirLightShadowFactorSoft3X(pos);\n    #endif\n    #if CC_DIR_SHADOW_PCF_TYPE == 1\n      realtimeShadow = CCGetDirLightShadowFactorSoft(pos);\n    #endif\n    #if CC_DIR_SHADOW_PCF_TYPE == 0\n      realtimeShadow = CCGetDirLightShadowFactorHard(pos);\n    #endif\n    return mix(realtimeShadow, 1.0, cc_shadowNFLSInfo.w);\n  }\n  #if CC_SUPPORT_CASCADED_SHADOW_MAP\n  #else\n  #endif\n#endif\n#if CC_RECEIVE_SHADOW && CC_SHADOW_TYPE == 2\n#endif\nuniform samplerCube cc_environment;\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 backColor;\n  vec4 fresnelParam;\n  vec4 noiseParam;\n};\nin vec2 v_uv;\nin vec3 v_position;\nin vec3 v_normal;\nin vec4 v_color;\nin vec4 v_screenPos;\nuniform sampler2D albedoMap;\nuniform sampler2D reflectionMap;\n#if USE_REFLECTION_MASK_MAP\n  uniform sampler2D reflectionMaskMap;\n#endif\n#if USE_REFLECTION_NOISE_MAP\n  uniform sampler2D reflectionNoiseMap;\n#endif\nlayout(std140) uniform Constant {\n  vec4 mainColor;\n};\nvec4 frag () {\n  vec3 V = normalize(v_position.xyz - cc_cameraPos.xyz);\n  vec3 N = normalize(v_normal);\n  float NV = dot(N,-V);\n  vec4 baseColor = albedo;\n  if(false && NV < 0.0){\n    baseColor = backColor;\n    N = -N;\n  }\n  else{\n    #if USE_VERTEX_COLOR\n      baseColor.rgb *= v_color.rgb;\n      baseColor.a *= v_color.a;\n    #endif\n    #if USE_ALBEDO_MAP\n      baseColor *=  texture(albedoMap, v_uv);\n    #endif\n    baseColor.rgb *= albedoScaleAndCutoff.xyz;\n    vec4 col = vec4(1.0,1.0,1.0,1.0);\n    bool isInMirror = cc_fogAdd.w > 0.0001;\n    float fresnel = 1.0 - NV;\n    fresnel = fresnelParam.x + (fresnelParam.y - fresnelParam.x) * pow(fresnel,fresnelParam.z);\n    #if USE_REFLECTION_MASK_MAP\n      fresnel *= texture(reflectionMaskMap, v_uv).r;\n    #endif\n    float offset = 0.0;\n    #if USE_REFLECTION_NOISE_MAP\n      float reflNoiseScale = noiseParam.x;\n      vec2 reflNoiseMove = noiseParam.yz;\n      float reflNoiseStrengthen = noiseParam.w;\n      vec2 noiseUV = v_position.xz * reflNoiseScale + cc_time.xx * reflNoiseMove;\n      offset = texture(reflectionNoiseMap, noiseUV).r;\n      offset = offset * 2.0 - 1.0;\n      offset *= reflNoiseStrengthen;\n    #endif\n    if(isInMirror){\n      #if CC_USE_IBL\n        vec3 R = V - 2.0 * dot(N,V) * N;\n        col = texture(cc_environment, R + offset);\n        col.rgb = col.rgb * pow(1.1, col.a * 255.0 - 128.0);\n      #else\n        col.rgb = baseColor.rgb;\n      #endif\n      col.a = 1.0;\n      fresnel *= fresnelParam.w;\n    }\n    else{\n      vec2 screenUV = v_screenPos.xy / v_screenPos.w * 0.5 + 0.5;\n      screenUV = vec2(1.0 - screenUV.x, screenUV.y);\n      col = texture(reflectionMap, screenUV + offset);\n    }\n    baseColor.rgb = mix(baseColor.rgb,col.rgb,fresnel);\n  }\n  vec3 L = normalize(-cc_mainLitDir.xyz);\n  float NL = 0.5 * dot(N, L) + 0.5;\n  float shadow = 1.0;\n  #if CC_RECEIVE_SHADOW\n    NL = max(dot(N, L), 0.0);\n    if (NL > 0.0) {\n      shadow = CCShadowFactorBase(v_shadowPos, N, vec2(0.0, 0.0));\n    }\n  #endif\n  vec3 finalColor = NL * cc_mainLitColor.rgb * cc_mainLitColor.w * shadow;\n  baseColor.rgb *= finalColor;\n  CC_APPLY_FOG(baseColor, v_position);\n  return CCFragOutput(baseColor);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\n#if CC_USE_SKINNING\n    attribute vec4 a_joints;\n  attribute vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    attribute highp vec4 a_jointAnimInfo;\n  #endif\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    attribute vec2 a_localShadowBias;\n  #endif\n#elif USE_BATCHING\n  attribute float a_dyn_batch_id;\n#endif\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\n#if CC_USE_MORPH\n  uniform vec4 cc_displacementWeights[15];\n  uniform vec4 cc_displacementTextureInfo;\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n  #endif\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n        return texture2D(tex, uv);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture2D(tex, x)),\n        decode32(texture2D(tex, y)),\n        decode32(texture2D(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n  vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n  vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n  vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n  }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    uniform highp vec4 cc_jointTextureInfo;\n    uniform highp vec4 cc_jointAnimInfo;\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      uniform highp sampler2D cc_realtimeJoint;\n    #else\n      uniform highp vec4 cc_joints[CC_JOINT_UNIFORM_CAPACITY * 3];\n    #endif\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n        mat4 getJointMatrix (float i) {\n          float x = i;\n          vec4 v1 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 0.5 / 3.0));\n          vec4 v2 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 1.5 / 3.0));\n          vec4 v3 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 2.5 / 3.0));\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #else\n        mat4 getJointMatrix (float i) {\n         float x = 4.0 * i;\n          vec4 v1 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 0.5 / 3.0)))\n          );\n          vec4 v2 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 1.5 / 3.0)))\n          );\n          vec4 v3 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 2.5 / 3.0)))\n          );\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #endif\n    #else\n      mat4 getJointMatrix (float i) {\n        int idx = int(i);\n        vec4 v1 = cc_joints[idx * 3];\n        vec4 v2 = cc_joints[idx * 3 + 1];\n        vec4 v3 = cc_joints[idx * 3 + 2];\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matProj;\n  uniform highp vec4 cc_cameraPos;\n  uniform mediump vec4 cc_fogBase;\n  uniform mediump vec4 cc_fogAdd;\n#if !USE_INSTANCING\n  #if USE_BATCHING\n    uniform highp mat4 cc_matWorlds[10];\n  #else\n    uniform highp mat4 cc_matWorld;\n  uniform highp mat4 cc_matWorldIT;\n  #endif\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\n#if CC_USE_FOG != 4\n  float LinearFog(vec4 pos, vec3 cameraPos, float fogStart, float fogEnd) {\n      vec4 wPos = pos;\n      float cam_dis = distance(cameraPos, wPos.xyz);\n      return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n  }\n  float ExpFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * fogDensity);\n      return f;\n  }\n  float ExpSquaredFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n      return f;\n  }\n  float LayeredFog(vec4 pos, vec3 cameraPos, float fogTop, float fogRange, float fogAtten) {\n      vec4 wPos = pos;\n      vec3 camWorldProj = cameraPos.xyz;\n      camWorldProj.y = 0.;\n      vec3 worldPosProj = wPos.xyz;\n      worldPosProj.y = 0.;\n      float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n      float fDeltaY, fDensityIntegral;\n      if (cameraPos.y > fogTop) {\n          if (wPos.y < fogTop) {\n              fDeltaY = (fogTop - wPos.y) / fogRange * 2.0;\n              fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n          }\n          else {\n              fDeltaY = 0.;\n              fDensityIntegral = 0.;\n          }\n      }\n      else {\n          if (wPos.y < fogTop) {\n              float fDeltaA = (fogTop - cameraPos.y) / fogRange * 2.;\n              float fDeltaB = (fogTop - wPos.y) / fogRange * 2.;\n              fDeltaY = abs(fDeltaA - fDeltaB);\n              fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n          }\n          else {\n              fDeltaY = abs(fogTop - cameraPos.y) / fogRange * 2.;\n              fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n          }\n      }\n      float fDensity;\n      if (fDeltaY != 0.) {\n          fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n      }\n      else {\n          fDensity = 0.;\n      }\n      float f = exp(-fDensity);\n      return f;\n  }\n#endif\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n#if CC_USE_FOG == 0\n\tfactor = LinearFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.y);\n#elif CC_USE_FOG == 1\n\tfactor = ExpFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 2\n\tfactor = ExpSquaredFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 3\n\tfactor = LayeredFog(pos, cc_cameraPos.xyz, cc_fogAdd.x, cc_fogAdd.y, cc_fogAdd.z);\n#else\n\tfactor = 1.0;\n#endif\n}\n#if !CC_USE_ACCURATE_FOG\nvarying mediump float v_fog_factor;\n#endif\nvoid CC_TRANSFER_FOG(vec4 pos) {\n#if !CC_USE_ACCURATE_FOG\n    CC_TRANSFER_FOG_BASE(pos, v_fog_factor);\n#endif\n}\nvarying highp vec4 v_shadowPos;\nuniform highp mat4 cc_matLightViewProj;\n#if CC_SUPPORT_CASCADED_SHADOW_MAP\n  #endif\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotShadowMap;\n  #if CC_SUPPORT_CASCADED_SHADOW_MAP\n  #else\n  #endif\n#endif\n#if CC_RECEIVE_SHADOW\n#endif\n    uniform vec4 tilingOffset;\nattribute vec4 a_color;\n#if HAS_SECOND_UV\n  attribute vec2 a_texCoord1;\n#endif\nvarying vec3 v_position;\nvarying vec3 v_normal;\nvarying vec3 v_tangent;\nvarying vec3 v_bitangent;\nvarying vec2 v_uv;\nvarying vec2 v_uv1;\nvarying vec4 v_color;\nvarying vec4 v_screenPos;\nvec4 vert () {\n  StandardVertInput In;\n  CCVertInput(In);\n  mat4 matWorld, matWorldIT;\n  CCGetWorldMatrixFull(matWorld, matWorldIT);\n  vec4 pos = matWorld * In.position;\n  v_position = pos.xyz;\n  v_normal = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz);\n  v_tangent = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n  v_bitangent = cross(v_normal, v_tangent) * In.tangent.w;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1;\n  #endif\n  #if SAMPLE_FROM_RT\n    v_uv = cc_cameraPos.w > 1.0 ? vec2(v_uv.x, 1.0 - v_uv.y) : v_uv;\n  #endif\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n    #if SAMPLE_FROM_RT\n      v_uv1 = cc_cameraPos.w > 1.0 ? vec2(v_uv1.x, 1.0 - v_uv1.y) : v_uv1;\n    #endif\n  #endif\n  v_color = a_color;\n  CC_TRANSFER_FOG(pos);\n  v_shadowPos = cc_matLightViewProj * pos;\n  v_screenPos = cc_matProj * (cc_matView * matWorld) * In.position;\n  return v_screenPos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nuniform highp vec4 cc_time;\n  uniform mediump vec4 cc_debug_view_mode;\n  uniform mediump vec4 cc_debug_view_composite_pack_1;\n  uniform mediump vec4 cc_debug_view_composite_pack_2;\n  uniform mediump vec4 cc_debug_view_composite_pack_3;\nuniform highp vec4 cc_cameraPos;\n  uniform mediump vec4 cc_mainLitDir;\n  uniform mediump vec4 cc_mainLitColor;\n  uniform mediump vec4 cc_fogColor;\n  uniform mediump vec4 cc_fogBase;\n  uniform mediump vec4 cc_fogAdd;\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_WORLD_POS CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT + 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR CC_SURFACES_DEBUG_VIEW_WORLD_POS + 1\n#define CC_SURFACES_DEBUG_VIEW_FACE_SIDE CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR + 1\n#define CC_SURFACES_DEBUG_VIEW_UV0 CC_SURFACES_DEBUG_VIEW_FACE_SIDE + 1\n#define CC_SURFACES_DEBUG_VIEW_UV1 CC_SURFACES_DEBUG_VIEW_UV0 + 1\n#define CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP CC_SURFACES_DEBUG_VIEW_UV1 + 1\n#define CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP + 1\n#define CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT + 1\n#define CC_SURFACES_DEBUG_VIEW_BASE_COLOR CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR CC_SURFACES_DEBUG_VIEW_BASE_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSPARENCY CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_METALLIC CC_SURFACES_DEBUG_VIEW_TRANSPARENCY + 1\n#define CC_SURFACES_DEBUG_VIEW_ROUGHNESS CC_SURFACES_DEBUG_VIEW_METALLIC + 1\n#define CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY CC_SURFACES_DEBUG_VIEW_ROUGHNESS + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_ALL CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE CC_SURFACES_DEBUG_VIEW_DIRECT_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_ALL CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_EMISSIVE CC_SURFACES_DEBUG_VIEW_ENV_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_LIGHT_MAP CC_SURFACES_DEBUG_VIEW_EMISSIVE + 1\n#define CC_SURFACES_DEBUG_VIEW_SHADOW CC_SURFACES_DEBUG_VIEW_LIGHT_MAP + 1\n#define CC_SURFACES_DEBUG_VIEW_AO CC_SURFACES_DEBUG_VIEW_SHADOW + 1\n#define CC_SURFACES_DEBUG_VIEW_FOG CC_SURFACES_DEBUG_VIEW_AO + 1\n#define CC_SURFACES_DEBUG_VIEW_SINGLE 1\n#define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC 2\n#define IS_DEBUG_VIEW_LIGHTING_ENABLE_WITH_ALBEDO (cc_debug_view_mode.y > 0.0)\n#define IS_DEBUG_VIEW_MISC_ENABLE_CSM_LAYER_COLORATION (cc_debug_view_mode.z > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_DIFFUSE (cc_debug_view_composite_pack_1.x > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_SPECULAR (cc_debug_view_composite_pack_1.y > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_ENV_DIFFUSE (cc_debug_view_composite_pack_1.z > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_ENV_SPECULAR (cc_debug_view_composite_pack_1.w > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_EMISSIVE (cc_debug_view_composite_pack_2.x > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_LIGHT_MAP (cc_debug_view_composite_pack_2.y > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_SHADOW (cc_debug_view_composite_pack_2.z > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_AO (cc_debug_view_composite_pack_2.w > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_NORMAL_MAP (cc_debug_view_composite_pack_3.x > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_FOG (cc_debug_view_composite_pack_3.y > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TONE_MAPPING (cc_debug_view_composite_pack_3.z > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION (cc_debug_view_composite_pack_3.w > 0.0)\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\n#if CC_USE_FOG != 4\n  float LinearFog(vec4 pos, vec3 cameraPos, float fogStart, float fogEnd) {\n      vec4 wPos = pos;\n      float cam_dis = distance(cameraPos, wPos.xyz);\n      return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n  }\n  float ExpFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * fogDensity);\n      return f;\n  }\n  float ExpSquaredFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n      return f;\n  }\n  float LayeredFog(vec4 pos, vec3 cameraPos, float fogTop, float fogRange, float fogAtten) {\n      vec4 wPos = pos;\n      vec3 camWorldProj = cameraPos.xyz;\n      camWorldProj.y = 0.;\n      vec3 worldPosProj = wPos.xyz;\n      worldPosProj.y = 0.;\n      float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n      float fDeltaY, fDensityIntegral;\n      if (cameraPos.y > fogTop) {\n          if (wPos.y < fogTop) {\n              fDeltaY = (fogTop - wPos.y) / fogRange * 2.0;\n              fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n          }\n          else {\n              fDeltaY = 0.;\n              fDensityIntegral = 0.;\n          }\n      }\n      else {\n          if (wPos.y < fogTop) {\n              float fDeltaA = (fogTop - cameraPos.y) / fogRange * 2.;\n              float fDeltaB = (fogTop - wPos.y) / fogRange * 2.;\n              fDeltaY = abs(fDeltaA - fDeltaB);\n              fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n          }\n          else {\n              fDeltaY = abs(fogTop - cameraPos.y) / fogRange * 2.;\n              fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n          }\n      }\n      float fDensity;\n      if (fDeltaY != 0.) {\n          fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n      }\n      else {\n          fDensity = 0.;\n      }\n      float f = exp(-fDensity);\n      return f;\n  }\n#endif\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n#if CC_USE_FOG == 0\n\tfactor = LinearFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.y);\n#elif CC_USE_FOG == 1\n\tfactor = ExpFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 2\n\tfactor = ExpSquaredFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 3\n\tfactor = LayeredFog(pos, cc_cameraPos.xyz, cc_fogAdd.x, cc_fogAdd.y, cc_fogAdd.z);\n#else\n\tfactor = 1.0;\n#endif\n}\nvoid CC_APPLY_FOG_BASE(inout vec4 color, float factor) {\n\tcolor = vec4(mix(cc_fogColor.rgb, color.rgb, factor), color.a);\n}\n#if !CC_USE_ACCURATE_FOG\nvarying mediump float v_fog_factor;\n#endif\nvoid CC_APPLY_FOG(inout vec4 color) {\n#if !CC_USE_ACCURATE_FOG\n    CC_APPLY_FOG_BASE(color, v_fog_factor);\n#endif\n}\nvoid CC_APPLY_FOG(inout vec4 color, vec3 worldPos) {\n#if CC_USE_ACCURATE_FOG\n    float factor;\n    CC_TRANSFER_FOG_BASE(vec4(worldPos, 1.0), factor);\n#else\n    float factor = v_fog_factor;\n#endif\n    CC_APPLY_FOG_BASE(color, factor);\n}\nvarying highp vec4 v_shadowPos;\nuniform highp mat4 cc_matLightView;\n  uniform highp vec4 cc_shadowProjDepthInfo;\n  uniform highp vec4 cc_shadowProjInfo;\n  uniform mediump vec4 cc_shadowNFLSInfo;\n  uniform mediump vec4 cc_shadowWHPBInfo;\n#if CC_SUPPORT_CASCADED_SHADOW_MAP\n  #endif\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotShadowMap;\n  float NativePCFShadowFactorHard (vec3 shadowNDCPos, sampler2D shadowMap, vec2 shadowMapResolution)\n  {\n    #if CC_SHADOWMAP_FORMAT == 1\n      return step(shadowNDCPos.z, dot(texture2D(shadowMap, shadowNDCPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    #else\n      return step(shadowNDCPos.z, texture2D(shadowMap, shadowNDCPos.xy).x);\n    #endif\n  }\n  float NativePCFShadowFactorSoft (vec3 shadowNDCPos, sampler2D shadowMap, vec2 shadowMapResolution)\n  {\n    vec2 oneTap = 1.0 / shadowMapResolution;\n    vec2 shadowNDCPos_offset = shadowNDCPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    #if CC_SHADOWMAP_FORMAT == 1\n      block0 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset.x, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset.x, shadowNDCPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    #else\n      block0 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos.y)).x);\n      block1 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset.x, shadowNDCPos.y)).x);\n      block2 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset.y)).x);\n      block3 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset.x, shadowNDCPos_offset.y)).x);\n    #endif\n    float coefX   = mod(shadowNDCPos.x, oneTap.x) * shadowMapResolution.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(shadowNDCPos.y, oneTap.y) * shadowMapResolution.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float NativePCFShadowFactorSoft3X (vec3 shadowNDCPos, sampler2D shadowMap, vec2 shadowMapResolution)\n  {\n    vec2 oneTap = 1.0 / shadowMapResolution;\n    float shadowNDCPos_offset_L = shadowNDCPos.x - oneTap.x;\n    float shadowNDCPos_offset_R = shadowNDCPos.x + oneTap.x;\n    float shadowNDCPos_offset_U = shadowNDCPos.y - oneTap.y;\n    float shadowNDCPos_offset_D = shadowNDCPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    #if CC_SHADOWMAP_FORMAT == 1\n      block0 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    #else\n      block0 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos_offset_U)).x);\n      block1 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset_U)).x);\n      block2 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos_offset_U)).x);\n      block3 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos.y)).x);\n      block4 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos.y)).x);\n      block5 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos.y)).x);\n      block6 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos_offset_D)).x);\n      block7 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset_D)).x);\n      block8 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos_offset_D)).x);\n    #endif\n    float coefX = mod(shadowNDCPos.x, oneTap.x) * shadowMapResolution.x;\n    float coefY = mod(shadowNDCPos.y, oneTap.y) * shadowMapResolution.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\n  float NativePCFShadowFactorSoft5X (vec3 shadowNDCPos, sampler2D shadowMap, vec2 shadowMapResolution)\n  {\n    vec2 oneTap = 1.0 / shadowMapResolution;\n    vec2 twoTap = oneTap * 2.0;\n    vec2 offset1 = shadowNDCPos.xy + vec2(-twoTap.x, -twoTap.y);\n    vec2 offset2 = shadowNDCPos.xy + vec2(-oneTap.x, -twoTap.y);\n    vec2 offset3 = shadowNDCPos.xy + vec2(0.0, -twoTap.y);\n    vec2 offset4 = shadowNDCPos.xy + vec2(oneTap.x, -twoTap.y);\n    vec2 offset5 = shadowNDCPos.xy + vec2(twoTap.x, -twoTap.y);\n    vec2 offset6 = shadowNDCPos.xy + vec2(-twoTap.x, -oneTap.y);\n    vec2 offset7 = shadowNDCPos.xy + vec2(-oneTap.x, -oneTap.y);\n    vec2 offset8 = shadowNDCPos.xy + vec2(0.0, -oneTap.y);\n    vec2 offset9 = shadowNDCPos.xy + vec2(oneTap.x, -oneTap.y);\n    vec2 offset10 = shadowNDCPos.xy + vec2(twoTap.x, -oneTap.y);\n    vec2 offset11 = shadowNDCPos.xy + vec2(-twoTap.x, 0.0);\n    vec2 offset12 = shadowNDCPos.xy + vec2(-oneTap.x, 0.0);\n    vec2 offset13 = shadowNDCPos.xy + vec2(0.0, 0.0);\n    vec2 offset14 = shadowNDCPos.xy + vec2(oneTap.x, 0.0);\n    vec2 offset15 = shadowNDCPos.xy + vec2(twoTap.x, 0.0);\n    vec2 offset16 = shadowNDCPos.xy + vec2(-twoTap.x, oneTap.y);\n    vec2 offset17 = shadowNDCPos.xy + vec2(-oneTap.x, oneTap.y);\n    vec2 offset18 = shadowNDCPos.xy + vec2(0.0, oneTap.y);\n    vec2 offset19 = shadowNDCPos.xy + vec2(oneTap.x, oneTap.y);\n    vec2 offset20 = shadowNDCPos.xy + vec2(twoTap.x, oneTap.y);\n    vec2 offset21 = shadowNDCPos.xy + vec2(-twoTap.x, twoTap.y);\n    vec2 offset22 = shadowNDCPos.xy + vec2(-oneTap.x, twoTap.y);\n    vec2 offset23 = shadowNDCPos.xy + vec2(0.0, twoTap.y);\n    vec2 offset24 = shadowNDCPos.xy + vec2(oneTap.x, twoTap.y);\n    vec2 offset25 = shadowNDCPos.xy + vec2(twoTap.x, twoTap.y);\n    float block1, block2, block3, block4, block5, block6, block7, block8, block9, block10, block11, block12, block13, block14, block15, block16, block17, block18, block19, block20, block21, block22, block23, block24, block25;\n    #if CC_SHADOWMAP_FORMAT == 1\n      block1 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset1), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset2), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset3), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset4), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset5), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset6), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset7), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset8), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block9 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset9), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block10 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset10), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block11 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset11), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block12 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset12), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block13 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset13), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block14 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset14), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block15 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset15), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block16 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset16), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block17 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset17), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block18 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset18), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block19 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset19), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block20 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset20), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block21 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset21), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block22 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset22), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block23 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset23), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block24 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset24), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block25 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset25), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    #else\n      block1 = step(shadowNDCPos.z, texture2D(shadowMap, offset1).x);\n      block2 = step(shadowNDCPos.z, texture2D(shadowMap, offset2).x);\n      block3 = step(shadowNDCPos.z, texture2D(shadowMap, offset3).x);\n      block4 = step(shadowNDCPos.z, texture2D(shadowMap, offset4).x);\n      block5 = step(shadowNDCPos.z, texture2D(shadowMap, offset5).x);\n      block6 = step(shadowNDCPos.z, texture2D(shadowMap, offset6).x);\n      block7 = step(shadowNDCPos.z, texture2D(shadowMap, offset7).x);\n      block8 = step(shadowNDCPos.z, texture2D(shadowMap, offset8).x);\n      block9 = step(shadowNDCPos.z, texture2D(shadowMap, offset9).x);\n      block10 = step(shadowNDCPos.z, texture2D(shadowMap, offset10).x);\n      block11 = step(shadowNDCPos.z, texture2D(shadowMap, offset11).x);\n      block12 = step(shadowNDCPos.z, texture2D(shadowMap, offset12).x);\n      block13 = step(shadowNDCPos.z, texture2D(shadowMap, offset13).x);\n      block14 = step(shadowNDCPos.z, texture2D(shadowMap, offset14).x);\n      block15 = step(shadowNDCPos.z, texture2D(shadowMap, offset15).x);\n      block16 = step(shadowNDCPos.z, texture2D(shadowMap, offset16).x);\n      block17 = step(shadowNDCPos.z, texture2D(shadowMap, offset17).x);\n      block18 = step(shadowNDCPos.z, texture2D(shadowMap, offset18).x);\n      block19 = step(shadowNDCPos.z, texture2D(shadowMap, offset19).x);\n      block20 = step(shadowNDCPos.z, texture2D(shadowMap, offset20).x);\n      block21 = step(shadowNDCPos.z, texture2D(shadowMap, offset21).x);\n      block22 = step(shadowNDCPos.z, texture2D(shadowMap, offset22).x);\n      block23 = step(shadowNDCPos.z, texture2D(shadowMap, offset23).x);\n      block24 = step(shadowNDCPos.z, texture2D(shadowMap, offset24).x);\n      block25 = step(shadowNDCPos.z, texture2D(shadowMap, offset25).x);\n    #endif\n    vec2 coef = fract(shadowNDCPos.xy * shadowMapResolution);\n    vec2 v1X1 = mix(vec2(block1, block6), vec2(block2, block7), coef.xx);\n    vec2 v1X2 = mix(vec2(block2, block7), vec2(block3, block8), coef.xx);\n    vec2 v1X3 = mix(vec2(block3, block8), vec2(block4, block9), coef.xx);\n    vec2 v1X4 = mix(vec2(block4, block9), vec2(block5, block10), coef.xx);\n    float v1 = mix(v1X1.x, v1X1.y, coef.y) + mix(v1X2.x, v1X2.y, coef.y) + mix(v1X3.x, v1X3.y, coef.y) + mix(v1X4.x, v1X4.y, coef.y);\n    vec2 v2X1 = mix(vec2(block6, block11), vec2(block7, block12), coef.xx);\n    vec2 v2X2 = mix(vec2(block7, block12), vec2(block8, block13), coef.xx);\n    vec2 v2X3 = mix(vec2(block8, block13), vec2(block9, block14), coef.xx);\n    vec2 v2X4 = mix(vec2(block9, block14), vec2(block10, block15), coef.xx);\n    float v2 = mix(v2X1.x, v2X1.y, coef.y) + mix(v2X2.x, v2X2.y, coef.y) + mix(v2X3.x, v2X3.y, coef.y) + mix(v2X4.x, v2X4.y, coef.y);\n    vec2 v3X1 = mix(vec2(block11, block16), vec2(block12, block17), coef.xx);\n    vec2 v3X2 = mix(vec2(block12, block17), vec2(block13, block18), coef.xx);\n    vec2 v3X3 = mix(vec2(block13, block18), vec2(block14, block19), coef.xx);\n    vec2 v3X4 = mix(vec2(block14, block19), vec2(block15, block20), coef.xx);\n    float v3 = mix(v3X1.x, v3X1.y, coef.y) + mix(v3X2.x, v3X2.y, coef.y) + mix(v3X3.x, v3X3.y, coef.y) + mix(v3X4.x, v3X4.y, coef.y);\n    vec2 v4X1 = mix(vec2(block16, block21), vec2(block17, block22), coef.xx);\n    vec2 v4X2 = mix(vec2(block17, block22), vec2(block18, block23), coef.xx);\n    vec2 v4X3 = mix(vec2(block18, block23), vec2(block19, block24), coef.xx);\n    vec2 v4X4 = mix(vec2(block19, block24), vec2(block20, block25), coef.xx);\n    float v4 = mix(v4X1.x, v4X1.y, coef.y) + mix(v4X2.x, v4X2.y, coef.y) + mix(v4X3.x, v4X3.y, coef.y) + mix(v4X4.x, v4X4.y, coef.y);\n    float fAvg = (v1 + v2 + v3 + v4) * 0.0625;\n    return fAvg;\n  }\n  bool GetShadowNDCPos(out vec3 shadowNDCPos, vec4 shadowPosWithDepthBias)\n  {\n  \tshadowNDCPos = shadowPosWithDepthBias.xyz / shadowPosWithDepthBias.w * 0.5 + 0.5;\n  \tif (shadowNDCPos.x < 0.0 || shadowNDCPos.x > 1.0 ||\n  \t\tshadowNDCPos.y < 0.0 || shadowNDCPos.y > 1.0 ||\n  \t\tshadowNDCPos.z < 0.0 || shadowNDCPos.z > 1.0) {\n  \t\treturn false;\n  \t}\n  \tshadowNDCPos.xy = cc_cameraPos.w == 1.0 ? vec2(shadowNDCPos.xy.x, 1.0 - shadowNDCPos.xy.y) : shadowNDCPos.xy;\n  \treturn true;\n  }\n  vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal, float normalBias, vec3 matViewDir0, vec3 matViewDir1, vec3 matViewDir2, vec2 projScaleXY)\n  {\n    vec4 newShadowPos = shadowPos;\n    if (normalBias > EPSILON_LOWP)\n    {\n      vec3 viewNormal = vec3(dot(matViewDir0, worldNormal), dot(matViewDir1, worldNormal), dot(matViewDir2, worldNormal));\n      if (viewNormal.z < 0.1)\n        newShadowPos.xy += viewNormal.xy * projScaleXY * normalBias * clamp(viewNormal.z, 0.001, 0.1);\n    }\n    return newShadowPos;\n  }\n  vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal, float normalBias, mat4 matLightView, vec2 projScaleXY)\n  {\n  \tvec4 newShadowPos = shadowPos;\n  \tif (normalBias > EPSILON_LOWP)\n  \t{\n  \t\tvec4 viewNormal = matLightView * vec4(worldNormal, 0.0);\n  \t\tif (viewNormal.z < 0.1)\n  \t\t\tnewShadowPos.xy += viewNormal.xy * projScaleXY * normalBias * clamp(viewNormal.z, 0.001, 0.1);\n  \t}\n  \treturn newShadowPos;\n  }\n  vec4 ApplyShadowDepthBias_Orthographic(vec4 shadowPos, float viewspaceDepthBias, float projScaleZ, float projBiasZ)\n  {\n  \tfloat coeffA = projScaleZ;\n  \tfloat coeffB = projBiasZ;\n  \tfloat viewSpacePos_z = (shadowPos.z - coeffB) / coeffA;\n  \tviewSpacePos_z += viewspaceDepthBias;\n  \tvec4 result = shadowPos;\n  \tresult.z = viewSpacePos_z * coeffA + coeffB;\n  \treturn result;\n  }\n  float CCGetDirLightShadowFactorHard (vec4 shadowPosWithDepthBias) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorHard(shadowNDCPos, cc_shadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetDirLightShadowFactorSoft (vec4 shadowPosWithDepthBias) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft(shadowNDCPos, cc_shadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetDirLightShadowFactorSoft3X (vec4 shadowPosWithDepthBias) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft3X(shadowNDCPos, cc_shadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetDirLightShadowFactorSoft5X (vec4 shadowPosWithDepthBias) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft5X(shadowNDCPos, cc_shadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCShadowFactorBase(vec4 shadowPos, vec3 N, vec2 shadowBias)\n  {\n    vec4 pos = ApplyShadowDepthBias_FaceNormal(shadowPos, N, shadowBias.y, cc_matLightView, cc_shadowProjInfo.xy);\n    pos = ApplyShadowDepthBias_Orthographic(pos, shadowBias.x, cc_shadowProjDepthInfo.x, cc_shadowProjDepthInfo.y);\n    float realtimeShadow = 1.0;\n    #if CC_DIR_SHADOW_PCF_TYPE == 3\n      realtimeShadow = CCGetDirLightShadowFactorSoft5X(pos);\n    #endif\n    #if CC_DIR_SHADOW_PCF_TYPE == 2\n      realtimeShadow =  CCGetDirLightShadowFactorSoft3X(pos);\n    #endif\n    #if CC_DIR_SHADOW_PCF_TYPE == 1\n      realtimeShadow = CCGetDirLightShadowFactorSoft(pos);\n    #endif\n    #if CC_DIR_SHADOW_PCF_TYPE == 0\n      realtimeShadow = CCGetDirLightShadowFactorHard(pos);\n    #endif\n    return mix(realtimeShadow, 1.0, cc_shadowNFLSInfo.w);\n  }\n  #if CC_SUPPORT_CASCADED_SHADOW_MAP\n  #else\n  #endif\n#endif\n#if CC_RECEIVE_SHADOW && CC_SHADOW_TYPE == 2\n#endif\nuniform samplerCube cc_environment;\n    uniform vec4 albedo;\n    uniform vec4 albedoScaleAndCutoff;\n    uniform vec4 backColor;\n    uniform vec4 fresnelParam;\n    uniform vec4 noiseParam;\nvarying vec2 v_uv;\nvarying vec3 v_position;\nvarying vec3 v_normal;\nvarying vec4 v_color;\nvarying vec4 v_screenPos;\nuniform sampler2D albedoMap;\nuniform sampler2D reflectionMap;\n#if USE_REFLECTION_MASK_MAP\n  uniform sampler2D reflectionMaskMap;\n#endif\n#if USE_REFLECTION_NOISE_MAP\n  uniform sampler2D reflectionNoiseMap;\n#endif\nvec4 frag () {\n  vec3 V = normalize(v_position.xyz - cc_cameraPos.xyz);\n  vec3 N = normalize(v_normal);\n  float NV = dot(N,-V);\n  vec4 baseColor = albedo;\n  if(false && NV < 0.0){\n    baseColor = backColor;\n    N = -N;\n  }\n  else{\n    #if USE_VERTEX_COLOR\n      baseColor.rgb *= v_color.rgb;\n      baseColor.a *= v_color.a;\n    #endif\n    #if USE_ALBEDO_MAP\n      baseColor *=  texture2D(albedoMap, v_uv);\n    #endif\n    baseColor.rgb *= albedoScaleAndCutoff.xyz;\n    vec4 col = vec4(1.0,1.0,1.0,1.0);\n    bool isInMirror = cc_fogAdd.w > 0.0001;\n    float fresnel = 1.0 - NV;\n    fresnel = fresnelParam.x + (fresnelParam.y - fresnelParam.x) * pow(fresnel,fresnelParam.z);\n    #if USE_REFLECTION_MASK_MAP\n      fresnel *= texture2D(reflectionMaskMap, v_uv).r;\n    #endif\n    float offset = 0.0;\n    #if USE_REFLECTION_NOISE_MAP\n      float reflNoiseScale = noiseParam.x;\n      vec2 reflNoiseMove = noiseParam.yz;\n      float reflNoiseStrengthen = noiseParam.w;\n      vec2 noiseUV = v_position.xz * reflNoiseScale + cc_time.xx * reflNoiseMove;\n      offset = texture2D(reflectionNoiseMap, noiseUV).r;\n      offset = offset * 2.0 - 1.0;\n      offset *= reflNoiseStrengthen;\n    #endif\n    if(isInMirror){\n      #if CC_USE_IBL\n        vec3 R = V - 2.0 * dot(N,V) * N;\n        col = textureCube(cc_environment, R + offset);\n        col.rgb = col.rgb * pow(1.1, col.a * 255.0 - 128.0);\n      #else\n        col.rgb = baseColor.rgb;\n      #endif\n      col.a = 1.0;\n      fresnel *= fresnelParam.w;\n    }\n    else{\n      vec2 screenUV = v_screenPos.xy / v_screenPos.w * 0.5 + 0.5;\n      screenUV = vec2(1.0 - screenUV.x, screenUV.y);\n      col = texture2D(reflectionMap, screenUV + offset);\n    }\n    baseColor.rgb = mix(baseColor.rgb,col.rgb,fresnel);\n  }\n  vec3 L = normalize(-cc_mainLitDir.xyz);\n  float NL = 0.5 * dot(N, L) + 0.5;\n  float shadow = 1.0;\n  #if CC_RECEIVE_SHADOW\n    NL = max(dot(N, L), 0.0);\n    if (NL > 0.0) {\n      shadow = CCShadowFactorBase(v_shadowPos, N, vec2(0.0, 0.0));\n    }\n  #endif\n  vec3 finalColor = NL * cc_mainLitColor.rgb * cc_mainLitColor.w * shadow;\n  baseColor.rgb *= finalColor;\n  CC_APPLY_FOG(baseColor, v_position);\n  return CCFragOutput(baseColor);\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]},{"name":"CCShadow","defines":[]},{"name":"CCCSM","defines":["CC_SUPPORT_CASCADED_SHADOW_MAP"]}],"samplerTextures":[{"name":"cc_shadowMap","defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_spotShadowMap","defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_environment","defines":[]}],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","!CC_USE_REAL_TIME_JOINT_TEXTURE"]},{"name":"CCLocalBatched","defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"CCLocal","defines":["!USE_INSTANCING","!USE_BATCHING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"cc_realtimeJoint","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","CC_USE_REAL_TIME_JOINT_TEXTURE"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":175,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":108}},"defines":[{"name":"USE_INSTANCING","type":"boolean"},{"name":"USE_BATCHING","type":"boolean"},{"name":"CC_USE_SKINNING","type":"boolean"},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean"},{"name":"CC_USE_LIGHTMAP","type":"boolean"},{"name":"CC_RECEIVE_SHADOW","type":"boolean"},{"name":"CC_USE_MORPH","type":"boolean"},{"name":"CC_MORPH_TARGET_COUNT","type":"number","range":[2,8]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean"},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean"},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean"},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean"},{"name":"CC_USE_REAL_TIME_JOINT_TEXTURE","type":"boolean"},{"name":"CC_USE_FOG","type":"number","range":[0,4]},{"name":"CC_USE_ACCURATE_FOG","type":"boolean"},{"name":"CC_SUPPORT_CASCADED_SHADOW_MAP","type":"boolean"},{"name":"HAS_SECOND_UV","type":"boolean"},{"name":"SAMPLE_FROM_RT","type":"boolean"},{"name":"CC_SHADOWMAP_FORMAT","type":"number","range":[0,3]},{"name":"CC_DIR_SHADOW_PCF_TYPE","type":"number","range":[0,3]},{"name":"CC_SHADOW_TYPE","type":"number","range":[0,3]},{"name":"CC_USE_IBL","type":"number","range":[0,2]},{"name":"USE_REFLECTION_MASK_MAP","type":"boolean"},{"name":"USE_REFLECTION_NOISE_MAP","type":"boolean"},{"name":"USE_VERTEX_COLOR","type":"boolean"},{"name":"USE_ALBEDO_MAP","type":"boolean"}]},{"hash":1222305066,"name":"../mirror/effect-mirror|shadow-caster-vs:vert|shadow-caster-fs:frag","blocks":[{"name":"Constants","stageFlags":17,"binding":0,"members":[{"name":"tilingOffset","type":16,"count":1},{"name":"albedo","type":16,"count":1},{"name":"albedoScaleAndCutoff","type":16,"count":1},{"name":"backColor","type":16,"count":1},{"name":"fresnelParam","type":16,"count":1},{"name":"noiseParam","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"albedoMap","type":28,"count":1,"stageFlags":16,"binding":1,"defines":["USE_ALBEDO_MAP"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_normal","format":32,"location":1,"defines":[]},{"name":"a_texCoord","format":21,"location":2,"defines":[]},{"name":"a_tangent","format":44,"location":3,"defines":[]},{"name":"a_joints","location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","format":44,"isInstanced":true,"location":6,"defines":["USE_INSTANCING","CC_USE_BAKED_ANIMATION"]},{"name":"a_matWorld0","format":44,"isInstanced":true,"location":7,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING","CC_USE_LIGHTMAP"]},{"name":"a_localShadowBias","format":21,"isInstanced":true,"location":11,"defines":["USE_INSTANCING","CC_RECEIVE_SHADOW"]},{"name":"a_dyn_batch_id","format":11,"location":12,"defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"a_vertexId","format":11,"location":13,"defines":["CC_USE_MORPH"]},{"name":"a_texCoord1","format":21,"location":14,"defines":[]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"glsl3":{"vert":"\n  precision highp float;\n  #define QUATER_PI         0.78539816340\n  #define HALF_PI           1.57079632679\n  #define PI                3.14159265359\n  #define PI2               6.28318530718\n  #define PI4               12.5663706144\n  #define INV_QUATER_PI     1.27323954474\n  #define INV_HALF_PI       0.63661977237\n  #define INV_PI            0.31830988618\n  #define INV_PI2           0.15915494309\n  #define INV_PI4           0.07957747155\n  #define EPSILON           1e-6\n  #define EPSILON_LOWP      1e-4\n  #define LOG2              1.442695\n  #define EXP_VALUE         2.71828183f\n  #define FP_MAX            65504.0\n  #define FP_SCALE          0.0009765625\n  #define FP_SCALE_INV      1024.0\n  #define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n  highp float decode32 (highp vec4 rgba) {\n    rgba = rgba * 255.0;\n    highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n    highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n    highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n    return Sign * exp2(Exponent - 23.0) * Mantissa;\n  }\n  struct StandardVertInput {\n    highp vec4 position;\n    vec3 normal;\n    vec4 tangent;\n  };\n  in vec3 a_position;\n  in vec3 a_normal;\n  in vec2 a_texCoord;\n  in vec4 a_tangent;\n  #if CC_USE_SKINNING\n      in vec4 a_joints;\n    in vec4 a_weights;\n  #endif\n  #if USE_INSTANCING\n    #if CC_USE_BAKED_ANIMATION\n      in highp vec4 a_jointAnimInfo;\n    #endif\n    in vec4 a_matWorld0;\n    in vec4 a_matWorld1;\n    in vec4 a_matWorld2;\n    #if CC_USE_LIGHTMAP\n      in vec4 a_lightingMapUVParam;\n    #endif\n    #if CC_RECEIVE_SHADOW\n      in vec2 a_localShadowBias;\n    #endif\n  #elif USE_BATCHING\n    in float a_dyn_batch_id;\n  #endif\n  #if CC_USE_MORPH\n      in float a_vertexId;\n      int getVertexId() {\n        return int(a_vertexId);\n      }\n  #endif\n  #if CC_USE_MORPH\n    layout(std140) uniform CCMorph {\n      vec4 cc_displacementWeights[15];\n      vec4 cc_displacementTextureInfo;\n    };\n    #if CC_MORPH_TARGET_HAS_POSITION\n      uniform sampler2D cc_PositionDisplacements;\n    #endif\n    #if CC_MORPH_TARGET_HAS_NORMAL\n      uniform sampler2D cc_NormalDisplacements;\n    #endif\n    #if CC_MORPH_TARGET_HAS_TANGENT\n      uniform sampler2D cc_TangentDisplacements;\n    #endif\n    vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n      float pixelIndexF = float(pixelIndex);\n      float x = mod(pixelIndexF, textureResolution.x);\n      float y = floor(pixelIndexF / textureResolution.x);\n      return vec2(x, y);\n    }\n    vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n      return (vec2(location.x, location.y) + .5) / textureResolution;\n    }\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n        vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n          ivec2 texSize = textureSize(tex, 0);\n          return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n        }\n    #else\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex * 4;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n        vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n        vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n        return vec4(\n          decode32(texture(tex, x)),\n          decode32(texture(tex, y)),\n          decode32(texture(tex, z)),\n          1.0\n        );\n      }\n    #endif\n    float getDisplacementWeight(int index) {\n      int quot = index / 4;\n      int remainder = index - quot * 4;\n      if (remainder == 0) {\n        return cc_displacementWeights[quot].x;\n      } else if (remainder == 1) {\n        return cc_displacementWeights[quot].y;\n      } else if (remainder == 2) {\n        return cc_displacementWeights[quot].z;\n      } else {\n        return cc_displacementWeights[quot].w;\n      }\n    }\n    vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n    #if CC_MORPH_PRECOMPUTED\n      return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n    #else\n      vec3 result = vec3(0, 0, 0);\n      int nVertices = int(cc_displacementTextureInfo.z);\n      for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n        result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n      }\n      return result;\n    #endif\n    }\n    #if CC_MORPH_TARGET_HAS_POSITION\n    vec3 getPositionDisplacement(int vertexId) {\n        return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n    #endif\n    #if CC_MORPH_TARGET_HAS_NORMAL\n    vec3 getNormalDisplacement(int vertexId) {\n        return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n    #endif\n    #if CC_MORPH_TARGET_HAS_TANGENT\n    vec3 getTangentDisplacement(int vertexId) {\n        return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n    #endif\n    void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n      int vertexId = getVertexId();\n    #if CC_MORPH_TARGET_HAS_POSITION\n      position.xyz = position.xyz + getPositionDisplacement(vertexId);\n    #endif\n    #if CC_MORPH_TARGET_HAS_NORMAL\n      normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n    #endif\n    #if CC_MORPH_TARGET_HAS_TANGENT\n      tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n    #endif\n    }\n    void applyMorph (inout vec4 position) {\n    #if CC_MORPH_TARGET_HAS_POSITION\n      position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n    #endif\n    }\n  #endif\n  #if CC_USE_SKINNING\n    #if CC_USE_BAKED_ANIMATION\n      layout(std140) uniform CCSkinningTexture {\n        highp vec4 cc_jointTextureInfo;\n      };\n      layout(std140) uniform CCSkinningAnimation {\n        highp vec4 cc_jointAnimInfo;\n      };\n      uniform highp sampler2D cc_jointTexture;\n      void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n      {\n        #if USE_INSTANCING\n          highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n        #else\n          highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n        #endif\n        invSize = cc_jointTextureInfo.w;\n        highp float tempY = floor(temp * invSize);\n        x = floor(temp - tempY * cc_jointTextureInfo.x);\n        y = (tempY + 0.5) * invSize;\n      }\n    #else\n      #if CC_USE_REAL_TIME_JOINT_TEXTURE\n        uniform highp sampler2D cc_realtimeJoint;\n      #else\n        layout(std140) uniform CCSkinning {\n          highp vec4 cc_joints[CC_JOINT_UNIFORM_CAPACITY * 3];\n        };\n      #endif\n    #endif\n    #if CC_USE_BAKED_ANIMATION\n      #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n        mat4 getJointMatrix (float i) {\n          highp float x, y, invSize;\n          CCGetJointTextureCoords(3.0, i, x, y, invSize);\n          vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n          vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n          vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #else\n        mat4 getJointMatrix (float i) {\n          highp float x, y, invSize;\n          CCGetJointTextureCoords(12.0, i, x, y, invSize);\n          vec4 v1 = vec4(\n            decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n            decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n            decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n            decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n          );\n          vec4 v2 = vec4(\n            decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n            decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n            decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n            decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n          );\n          vec4 v3 = vec4(\n            decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n            decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n            decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n            decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n          );\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #endif\n    #else\n      #if CC_USE_REAL_TIME_JOINT_TEXTURE\n        #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n          mat4 getJointMatrix (float i) {\n            float x = i;\n            vec4 v1 = texture(cc_realtimeJoint, vec2( x / 256.0, 0.5 / 3.0));\n            vec4 v2 = texture(cc_realtimeJoint, vec2( x / 256.0, 1.5 / 3.0));\n            vec4 v3 = texture(cc_realtimeJoint, vec2( x / 256.0, 2.5 / 3.0));\n            return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n          }\n        #else\n          mat4 getJointMatrix (float i) {\n           float x = 4.0 * i;\n            vec4 v1 = vec4(\n              decode32(texture(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 0.5 / 3.0))),\n              decode32(texture(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 0.5 / 3.0))),\n              decode32(texture(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 0.5 / 3.0))),\n              decode32(texture(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 0.5 / 3.0)))\n            );\n            vec4 v2 = vec4(\n              decode32(texture(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 1.5 / 3.0))),\n              decode32(texture(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 1.5 / 3.0))),\n              decode32(texture(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 1.5 / 3.0))),\n              decode32(texture(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 1.5 / 3.0)))\n            );\n            vec4 v3 = vec4(\n              decode32(texture(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 2.5 / 3.0))),\n              decode32(texture(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 2.5 / 3.0))),\n              decode32(texture(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 2.5 / 3.0))),\n              decode32(texture(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 2.5 / 3.0)))\n            );\n            return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n          }\n        #endif\n      #else\n        mat4 getJointMatrix (float i) {\n          int idx = int(i);\n          vec4 v1 = cc_joints[idx * 3];\n          vec4 v2 = cc_joints[idx * 3 + 1];\n          vec4 v3 = cc_joints[idx * 3 + 2];\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #endif\n    #endif\n    mat4 skinMatrix () {\n      vec4 joints = vec4(a_joints);\n      return getJointMatrix(joints.x) * a_weights.x\n           + getJointMatrix(joints.y) * a_weights.y\n           + getJointMatrix(joints.z) * a_weights.z\n           + getJointMatrix(joints.w) * a_weights.w;\n    }\n    void CCSkin (inout vec4 position) {\n      mat4 m = skinMatrix();\n      position = m * position;\n    }\n    void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n      mat4 m = skinMatrix();\n      position = m * position;\n      normal = (m * vec4(normal, 0.0)).xyz;\n      tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n    }\n  #endif\n  void CCVertInput(inout StandardVertInput In)\n  {\n        In.position = vec4(a_position, 1.0);\n        In.normal = a_normal;\n        In.tangent = a_tangent;\n    #if CC_USE_MORPH\n      applyMorph(In.position, In.normal, In.tangent);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(In.position, In.normal, In.tangent);\n    #endif\n  }\n  #if !USE_INSTANCING\n    #if USE_BATCHING\n      layout(std140) uniform CCLocalBatched {\n        highp mat4 cc_matWorlds[10];\n      };\n    #else\n      layout(std140) uniform CCLocal {\n        highp mat4 cc_matWorld;\n        highp mat4 cc_matWorldIT;\n        highp vec4 cc_lightingMapUVParam;\n        highp vec4 cc_localShadowBias;\n      };\n    #endif\n  #endif\n  void CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n  {\n    #if USE_INSTANCING\n      matWorld = mat4(\n        vec4(a_matWorld0.xyz, 0.0),\n        vec4(a_matWorld1.xyz, 0.0),\n        vec4(a_matWorld2.xyz, 0.0),\n        vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n      );\n      matWorldIT = matWorld;\n    #elif USE_BATCHING\n      matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n      matWorldIT = matWorld;\n    #else\n      matWorld = cc_matWorld;\n      matWorldIT = cc_matWorldIT;\n    #endif\n  }\n  layout(std140) uniform Constants {\n    vec4 tilingOffset;\n    vec4 albedo;\n    vec4 albedoScaleAndCutoff;\n    vec4 backColor;\n    vec4 fresnelParam;\n    vec4 noiseParam;\n  };\n  layout(std140) uniform CCShadow {\n    highp mat4 cc_matLightView;\n    highp mat4 cc_matLightViewProj;\n    highp vec4 cc_shadowInvProjDepthInfo;\n    highp vec4 cc_shadowProjDepthInfo;\n    highp vec4 cc_shadowProjInfo;\n    mediump vec4 cc_shadowNFLSInfo;\n    mediump vec4 cc_shadowWHPBInfo;\n    mediump vec4 cc_shadowLPNNInfo;\n    lowp vec4 cc_shadowColor;\n    mediump vec4 cc_planarNDInfo;\n  };\n#if CC_SUPPORT_CASCADED_SHADOW_MAP\n  layout(std140) uniform CCCSM {\n    highp vec4 cc_csmViewDir0[4];\n    highp vec4 cc_csmViewDir1[4];\n    highp vec4 cc_csmViewDir2[4];\n    highp vec4 cc_csmAtlas[4];\n    highp mat4 cc_matCSMViewProj[4];\n    highp vec4 cc_csmProjDepthInfo[4];\n    highp vec4 cc_csmProjInfo[4];\n    highp vec4 cc_csmSplitsInfo;\n  };\n#endif\n  #if HAS_SECOND_UV || CC_USE_LIGHTMAP\n    in vec2 a_texCoord1;\n  #endif\n  out vec2 v_uv;\n  out vec2 v_uv1;\n  out vec4 v_worldPos;\n  out float v_clip_depth;\n  vec4 vert () {\n    StandardVertInput In;\n    CCVertInput(In);\n    mat4 matWorld, matWorldIT;\n    CCGetWorldMatrixFull(matWorld, matWorldIT);\n    v_worldPos = matWorld * In.position;\n    vec4 clipPos = cc_matLightViewProj * v_worldPos;\n    v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n    #if HAS_SECOND_UV\n      v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n    #endif\n    v_clip_depth = clipPos.z / clipPos.w * 0.5 + 0.5;\n    return clipPos;\n  }\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 backColor;\n  vec4 fresnelParam;\n  vec4 noiseParam;\n};\nvec4 packDepthToRGBA (float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 16581375.0) * depth;\n  ret = fract(ret);\n  ret -= vec4(ret.yzw, 0.0) / 255.0;\n  return ret;\n}\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n#if CC_SUPPORT_CASCADED_SHADOW_MAP\n  layout(std140) uniform CCCSM {\n    highp vec4 cc_csmViewDir0[4];\n    highp vec4 cc_csmViewDir1[4];\n    highp vec4 cc_csmViewDir2[4];\n    highp vec4 cc_csmAtlas[4];\n    highp mat4 cc_matCSMViewProj[4];\n    highp vec4 cc_csmProjDepthInfo[4];\n    highp vec4 cc_csmProjInfo[4];\n    highp vec4 cc_csmSplitsInfo;\n  };\n#endif\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nfloat GetLinearDepthFromViewSpace(vec3 viewPos, float near, float far) {\n  float dist = length(viewPos);\n  return (dist - near) / (far - near);\n}\nfloat CCGetLinearDepth(vec3 worldPos, float viewSpaceBias) {\n\tvec4 viewPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  viewPos.z += viewSpaceBias;\n\treturn GetLinearDepthFromViewSpace(viewPos.xyz, cc_shadowNFLSInfo.x, cc_shadowNFLSInfo.y);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n\treturn CCGetLinearDepth(worldPos, 0.0);\n}\n#if CC_RECEIVE_SHADOW\n  layout(std140) uniform CCGlobal {\n    highp   vec4 cc_time;\n    mediump vec4 cc_screenSize;\n    mediump vec4 cc_nativeSize;\n    mediump vec4 cc_debug_view_mode;\n    mediump vec4 cc_debug_view_composite_pack_1;\n    mediump vec4 cc_debug_view_composite_pack_2;\n    mediump vec4 cc_debug_view_composite_pack_3;\n  };\n  layout(std140) uniform CCCamera {\n    highp   mat4 cc_matView;\n    highp   mat4 cc_matViewInv;\n    highp   mat4 cc_matProj;\n    highp   mat4 cc_matProjInv;\n    highp   mat4 cc_matViewProj;\n    highp   mat4 cc_matViewProjInv;\n    highp   vec4 cc_cameraPos;\n    mediump vec4 cc_surfaceTransform;\n    mediump vec4 cc_screenScale;\n    mediump vec4 cc_exposure;\n    mediump vec4 cc_mainLitDir;\n    mediump vec4 cc_mainLitColor;\n    mediump vec4 cc_ambientSky;\n    mediump vec4 cc_ambientGround;\n    mediump vec4 cc_fogColor;\n    mediump vec4 cc_fogBase;\n    mediump vec4 cc_fogAdd;\n    mediump vec4 cc_nearFar;\n    mediump vec4 cc_viewPort;\n  };\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotShadowMap;\n  #if CC_SUPPORT_CASCADED_SHADOW_MAP\n  #else\n  #endif\n#endif\nin vec2 v_uv;\nin vec2 v_uv1;\nin vec4 v_worldPos;\nin float v_clip_depth;\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvec4 frag () {\n  vec4 baseColor = albedo;\n  #if USE_ALBEDO_MAP\n    baseColor *= texture(albedoMap, ALBEDO_UV);\n  #endif\n  #if USE_ALPHA_TEST\n    if (baseColor.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  if(cc_shadowLPNNInfo.x > 0.000001 && cc_shadowLPNNInfo.x < 1.999999) {\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      return vec4(CCGetLinearDepth(v_worldPos.xyz), 1.0, 1.0, 1.0);\n    }\n  }\n  if (cc_shadowLPNNInfo.y > 0.000001) {\n    return packDepthToRGBA(v_clip_depth);\n  }\n  return vec4(v_clip_depth, 1.0, 1.0, 1.0);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\n  precision highp float;\n  #define QUATER_PI         0.78539816340\n  #define HALF_PI           1.57079632679\n  #define PI                3.14159265359\n  #define PI2               6.28318530718\n  #define PI4               12.5663706144\n  #define INV_QUATER_PI     1.27323954474\n  #define INV_HALF_PI       0.63661977237\n  #define INV_PI            0.31830988618\n  #define INV_PI2           0.15915494309\n  #define INV_PI4           0.07957747155\n  #define EPSILON           1e-6\n  #define EPSILON_LOWP      1e-4\n  #define LOG2              1.442695\n  #define EXP_VALUE         2.71828183f\n  #define FP_MAX            65504.0\n  #define FP_SCALE          0.0009765625\n  #define FP_SCALE_INV      1024.0\n  #define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n  highp float decode32 (highp vec4 rgba) {\n    rgba = rgba * 255.0;\n    highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n    highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n    highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n    return Sign * exp2(Exponent - 23.0) * Mantissa;\n  }\n  struct StandardVertInput {\n    highp vec4 position;\n    vec3 normal;\n    vec4 tangent;\n  };\n  attribute vec3 a_position;\n  attribute vec3 a_normal;\n  attribute vec2 a_texCoord;\n  attribute vec4 a_tangent;\n  #if CC_USE_SKINNING\n      attribute vec4 a_joints;\n    attribute vec4 a_weights;\n  #endif\n  #if USE_INSTANCING\n    #if CC_USE_BAKED_ANIMATION\n      attribute highp vec4 a_jointAnimInfo;\n    #endif\n    attribute vec4 a_matWorld0;\n    attribute vec4 a_matWorld1;\n    attribute vec4 a_matWorld2;\n    #if CC_USE_LIGHTMAP\n      attribute vec4 a_lightingMapUVParam;\n    #endif\n    #if CC_RECEIVE_SHADOW\n      attribute vec2 a_localShadowBias;\n    #endif\n  #elif USE_BATCHING\n    attribute float a_dyn_batch_id;\n  #endif\n  #if CC_USE_MORPH\n      attribute float a_vertexId;\n      int getVertexId() {\n        return int(a_vertexId);\n      }\n  #endif\n  #if CC_USE_MORPH\n    uniform vec4 cc_displacementWeights[15];\n  uniform vec4 cc_displacementTextureInfo;\n    #if CC_MORPH_TARGET_HAS_POSITION\n      uniform sampler2D cc_PositionDisplacements;\n    #endif\n    #if CC_MORPH_TARGET_HAS_NORMAL\n      uniform sampler2D cc_NormalDisplacements;\n    #endif\n    #if CC_MORPH_TARGET_HAS_TANGENT\n      uniform sampler2D cc_TangentDisplacements;\n    #endif\n    vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n      float pixelIndexF = float(pixelIndex);\n      float x = mod(pixelIndexF, textureResolution.x);\n      float y = floor(pixelIndexF / textureResolution.x);\n      return vec2(x, y);\n    }\n    vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n      return (vec2(location.x, location.y) + .5) / textureResolution;\n    }\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n        vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n          int pixelIndex = elementIndex;\n          vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n          vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n          return texture2D(tex, uv);\n        }\n    #else\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex * 4;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n        vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n        vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n        return vec4(\n          decode32(texture2D(tex, x)),\n          decode32(texture2D(tex, y)),\n          decode32(texture2D(tex, z)),\n          1.0\n        );\n      }\n    #endif\n    float getDisplacementWeight(int index) {\n      int quot = index / 4;\n      int remainder = index - quot * 4;\n      if (remainder == 0) {\n        return cc_displacementWeights[quot].x;\n      } else if (remainder == 1) {\n        return cc_displacementWeights[quot].y;\n      } else if (remainder == 2) {\n        return cc_displacementWeights[quot].z;\n      } else {\n        return cc_displacementWeights[quot].w;\n      }\n    }\n    vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n    #if CC_MORPH_PRECOMPUTED\n      return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n    #else\n      vec3 result = vec3(0, 0, 0);\n      int nVertices = int(cc_displacementTextureInfo.z);\n      for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n        result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n      }\n      return result;\n    #endif\n    }\n    #if CC_MORPH_TARGET_HAS_POSITION\n    vec3 getPositionDisplacement(int vertexId) {\n        return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n    #endif\n    #if CC_MORPH_TARGET_HAS_NORMAL\n    vec3 getNormalDisplacement(int vertexId) {\n        return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n    #endif\n    #if CC_MORPH_TARGET_HAS_TANGENT\n    vec3 getTangentDisplacement(int vertexId) {\n        return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n    #endif\n    void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n      int vertexId = getVertexId();\n    #if CC_MORPH_TARGET_HAS_POSITION\n      position.xyz = position.xyz + getPositionDisplacement(vertexId);\n    #endif\n    #if CC_MORPH_TARGET_HAS_NORMAL\n      normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n    #endif\n    #if CC_MORPH_TARGET_HAS_TANGENT\n      tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n    #endif\n    }\n    void applyMorph (inout vec4 position) {\n    #if CC_MORPH_TARGET_HAS_POSITION\n      position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n    #endif\n    }\n  #endif\n  #if CC_USE_SKINNING\n    #if CC_USE_BAKED_ANIMATION\n      uniform highp vec4 cc_jointTextureInfo;\n      uniform highp vec4 cc_jointAnimInfo;\n      uniform highp sampler2D cc_jointTexture;\n      void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n      {\n        #if USE_INSTANCING\n          highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n        #else\n          highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n        #endif\n        invSize = cc_jointTextureInfo.w;\n        highp float tempY = floor(temp * invSize);\n        x = floor(temp - tempY * cc_jointTextureInfo.x);\n        y = (tempY + 0.5) * invSize;\n      }\n    #else\n      #if CC_USE_REAL_TIME_JOINT_TEXTURE\n        uniform highp sampler2D cc_realtimeJoint;\n      #else\n        uniform highp vec4 cc_joints[CC_JOINT_UNIFORM_CAPACITY * 3];\n      #endif\n    #endif\n    #if CC_USE_BAKED_ANIMATION\n      #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n        mat4 getJointMatrix (float i) {\n          highp float x, y, invSize;\n          CCGetJointTextureCoords(3.0, i, x, y, invSize);\n          vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n          vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n          vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #else\n        mat4 getJointMatrix (float i) {\n          highp float x, y, invSize;\n          CCGetJointTextureCoords(12.0, i, x, y, invSize);\n          vec4 v1 = vec4(\n            decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n            decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n            decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n            decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n          );\n          vec4 v2 = vec4(\n            decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n            decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n            decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n            decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n          );\n          vec4 v3 = vec4(\n            decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n            decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n            decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n            decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n          );\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #endif\n    #else\n      #if CC_USE_REAL_TIME_JOINT_TEXTURE\n        #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n          mat4 getJointMatrix (float i) {\n            float x = i;\n            vec4 v1 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 0.5 / 3.0));\n            vec4 v2 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 1.5 / 3.0));\n            vec4 v3 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 2.5 / 3.0));\n            return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n          }\n        #else\n          mat4 getJointMatrix (float i) {\n           float x = 4.0 * i;\n            vec4 v1 = vec4(\n              decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 0.5 / 3.0))),\n              decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 0.5 / 3.0))),\n              decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 0.5 / 3.0))),\n              decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 0.5 / 3.0)))\n            );\n            vec4 v2 = vec4(\n              decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 1.5 / 3.0))),\n              decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 1.5 / 3.0))),\n              decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 1.5 / 3.0))),\n              decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 1.5 / 3.0)))\n            );\n            vec4 v3 = vec4(\n              decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 2.5 / 3.0))),\n              decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 2.5 / 3.0))),\n              decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 2.5 / 3.0))),\n              decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 2.5 / 3.0)))\n            );\n            return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n          }\n        #endif\n      #else\n        mat4 getJointMatrix (float i) {\n          int idx = int(i);\n          vec4 v1 = cc_joints[idx * 3];\n          vec4 v2 = cc_joints[idx * 3 + 1];\n          vec4 v3 = cc_joints[idx * 3 + 2];\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #endif\n    #endif\n    mat4 skinMatrix () {\n      vec4 joints = vec4(a_joints);\n      return getJointMatrix(joints.x) * a_weights.x\n           + getJointMatrix(joints.y) * a_weights.y\n           + getJointMatrix(joints.z) * a_weights.z\n           + getJointMatrix(joints.w) * a_weights.w;\n    }\n    void CCSkin (inout vec4 position) {\n      mat4 m = skinMatrix();\n      position = m * position;\n    }\n    void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n      mat4 m = skinMatrix();\n      position = m * position;\n      normal = (m * vec4(normal, 0.0)).xyz;\n      tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n    }\n  #endif\n  void CCVertInput(inout StandardVertInput In)\n  {\n        In.position = vec4(a_position, 1.0);\n        In.normal = a_normal;\n        In.tangent = a_tangent;\n    #if CC_USE_MORPH\n      applyMorph(In.position, In.normal, In.tangent);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(In.position, In.normal, In.tangent);\n    #endif\n  }\n  #if !USE_INSTANCING\n    #if USE_BATCHING\n      uniform highp mat4 cc_matWorlds[10];\n    #else\n      uniform highp mat4 cc_matWorld;\n  uniform highp mat4 cc_matWorldIT;\n    #endif\n  #endif\n  void CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n  {\n    #if USE_INSTANCING\n      matWorld = mat4(\n        vec4(a_matWorld0.xyz, 0.0),\n        vec4(a_matWorld1.xyz, 0.0),\n        vec4(a_matWorld2.xyz, 0.0),\n        vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n      );\n      matWorldIT = matWorld;\n    #elif USE_BATCHING\n      matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n      matWorldIT = matWorld;\n    #else\n      matWorld = cc_matWorld;\n      matWorldIT = cc_matWorldIT;\n    #endif\n  }\n            uniform vec4 tilingOffset;\n  uniform highp mat4 cc_matLightViewProj;\n#if CC_SUPPORT_CASCADED_SHADOW_MAP\n  #endif\n  #if HAS_SECOND_UV || CC_USE_LIGHTMAP\n    attribute vec2 a_texCoord1;\n  #endif\n  varying vec2 v_uv;\n  varying vec2 v_uv1;\n  varying vec4 v_worldPos;\n  varying float v_clip_depth;\n  vec4 vert () {\n    StandardVertInput In;\n    CCVertInput(In);\n    mat4 matWorld, matWorldIT;\n    CCGetWorldMatrixFull(matWorld, matWorldIT);\n    v_worldPos = matWorld * In.position;\n    vec4 clipPos = cc_matLightViewProj * v_worldPos;\n    v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n    #if HAS_SECOND_UV\n      v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n    #endif\n    v_clip_depth = clipPos.z / clipPos.w * 0.5 + 0.5;\n    return clipPos;\n  }\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\n   uniform vec4 albedo;\n   uniform vec4 albedoScaleAndCutoff;\nvec4 packDepthToRGBA (float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 16581375.0) * depth;\n  ret = fract(ret);\n  ret -= vec4(ret.yzw, 0.0) / 255.0;\n  return ret;\n}\nuniform highp mat4 cc_matLightView;\n  uniform mediump vec4 cc_shadowNFLSInfo;\n  uniform mediump vec4 cc_shadowLPNNInfo;\n#if CC_SUPPORT_CASCADED_SHADOW_MAP\n  #endif\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nfloat GetLinearDepthFromViewSpace(vec3 viewPos, float near, float far) {\n  float dist = length(viewPos);\n  return (dist - near) / (far - near);\n}\nfloat CCGetLinearDepth(vec3 worldPos, float viewSpaceBias) {\n\tvec4 viewPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  viewPos.z += viewSpaceBias;\n\treturn GetLinearDepthFromViewSpace(viewPos.xyz, cc_shadowNFLSInfo.x, cc_shadowNFLSInfo.y);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n\treturn CCGetLinearDepth(worldPos, 0.0);\n}\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotShadowMap;\n  #if CC_SUPPORT_CASCADED_SHADOW_MAP\n  #else\n  #endif\n#endif\nvarying vec2 v_uv;\nvarying vec2 v_uv1;\nvarying vec4 v_worldPos;\nvarying float v_clip_depth;\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvec4 frag () {\n  vec4 baseColor = albedo;\n  #if USE_ALBEDO_MAP\n    baseColor *= texture2D(albedoMap, ALBEDO_UV);\n  #endif\n  #if USE_ALPHA_TEST\n    if (baseColor.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  if(cc_shadowLPNNInfo.x > 0.000001 && cc_shadowLPNNInfo.x < 1.999999) {\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      return vec4(CCGetLinearDepth(v_worldPos.xyz), 1.0, 1.0, 1.0);\n    }\n  }\n  if (cc_shadowLPNNInfo.y > 0.000001) {\n    return packDepthToRGBA(v_clip_depth);\n  }\n  return vec4(v_clip_depth, 1.0, 1.0, 1.0);\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCShadow","defines":[]},{"name":"CCCSM","defines":["CC_SUPPORT_CASCADED_SHADOW_MAP"]},{"name":"CCGlobal","defines":["CC_RECEIVE_SHADOW"]},{"name":"CCCamera","defines":["CC_RECEIVE_SHADOW"]}],"samplerTextures":[{"name":"cc_shadowMap","defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_spotShadowMap","defines":["CC_RECEIVE_SHADOW"]}],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","!CC_USE_REAL_TIME_JOINT_TEXTURE"]},{"name":"CCLocalBatched","defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"CCLocal","defines":["!USE_INSTANCING","!USE_BATCHING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"cc_realtimeJoint","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","CC_USE_REAL_TIME_JOINT_TEXTURE"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":131,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":107}},"defines":[{"name":"USE_INSTANCING","type":"boolean"},{"name":"USE_BATCHING","type":"boolean"},{"name":"CC_USE_SKINNING","type":"boolean"},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean"},{"name":"CC_USE_LIGHTMAP","type":"boolean"},{"name":"CC_RECEIVE_SHADOW","type":"boolean"},{"name":"CC_USE_MORPH","type":"boolean"},{"name":"CC_MORPH_TARGET_COUNT","type":"number","range":[2,8]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean"},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean"},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean"},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean"},{"name":"CC_USE_REAL_TIME_JOINT_TEXTURE","type":"boolean"},{"name":"CC_SUPPORT_CASCADED_SHADOW_MAP","type":"boolean"},{"name":"HAS_SECOND_UV","type":"boolean"},{"name":"USE_ALBEDO_MAP","type":"boolean"},{"name":"ALBEDO_UV","type":"string","options":["v_uv","v_uv1"]},{"name":"USE_ALPHA_TEST","type":"boolean"},{"name":"ALPHA_TEST_CHANNEL","type":"string","options":["a","r"]}]}],[{"name":"opaque","passes":[{"program":"../mirror/effect-mirror|unlit-vs:vert|unlit-fs:frag","properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"type":16,"value":[1,1,1,1],"handleInfo":["albedo",0,16]},"albedoScale":{"type":15,"value":[1,1,1],"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"handleInfo":["albedoScaleAndCutoff",3,13]},"mainTexture":{"value":"grey","type":28,"handleInfo":["albedoMap",0,28]},"backColor":{"type":16,"value":[1,1,1,1]},"fresnelMin":{"type":13,"value":[0],"handleInfo":["fresnelParam",0,13]},"fresnelMax":{"type":13,"value":[1],"handleInfo":["fresnelParam",1,13]},"fresnelPower":{"type":13,"value":[1],"handleInfo":["fresnelParam",2,13]},"fresnelScaleInMirror":{"type":13,"value":[0.05],"handleInfo":["fresnelParam",3,13]},"reflectionMap":{"value":"white","type":28},"reflectionMaskMap":{"value":"black","type":28},"reflectionNoiseMap":{"value":"black","type":28},"reflectionNoiseScale":{"type":13,"value":[0.2],"handleInfo":["noiseParam",0,13]},"reflectionNoiseMove":{"type":14,"value":[0.2,0.2],"handleInfo":["noiseParam",1,14]},"reflectionNoiseStrengthen":{"type":13,"value":[0.02],"handleInfo":["noiseParam",3,13]},"albedo":{"type":16,"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"value":[1,1,1,0.5]},"albedoMap":{"type":28,"value":"grey"},"fresnelParam":{"type":16,"value":[0,1,1,0.05]},"noiseParam":{"type":16,"value":[0.2,0.2,0.2,0.02]}}}]},{"name":"transparent","passes":[{"program":"../mirror/effect-mirror|unlit-vs:vert|unlit-fs:frag","blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendSrcAlpha":2,"blendDstAlpha":4}]},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"type":16,"value":[1,1,1,1],"handleInfo":["albedo",0,16]},"albedoScale":{"type":15,"value":[1,1,1],"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"handleInfo":["albedoScaleAndCutoff",3,13]},"mainTexture":{"value":"grey","type":28,"handleInfo":["albedoMap",0,28]},"backColor":{"type":16,"value":[1,1,1,1]},"fresnelMin":{"type":13,"value":[0],"handleInfo":["fresnelParam",0,13]},"fresnelMax":{"type":13,"value":[1],"handleInfo":["fresnelParam",1,13]},"fresnelPower":{"type":13,"value":[1],"handleInfo":["fresnelParam",2,13]},"fresnelScaleInMirror":{"type":13,"value":[0.05],"handleInfo":["fresnelParam",3,13]},"reflectionMap":{"value":"white","type":28},"reflectionMaskMap":{"value":"black","type":28},"reflectionNoiseMap":{"value":"black","type":28},"reflectionNoiseScale":{"type":13,"value":[0.2],"handleInfo":["noiseParam",0,13]},"reflectionNoiseMove":{"type":14,"value":[0.2,0.2],"handleInfo":["noiseParam",1,14]},"reflectionNoiseStrengthen":{"type":13,"value":[0.02],"handleInfo":["noiseParam",3,13]},"albedo":{"type":16,"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"value":[1,1,1,0.5]},"albedoMap":{"type":28,"value":"grey"},"fresnelParam":{"type":16,"value":[0,1,1,0.05]},"noiseParam":{"type":16,"value":[0.2,0.2,0.2,0.02]}}},{"phase":"shadow-caster","propertyIndex":0,"program":"../mirror/effect-mirror|shadow-caster-vs:vert|shadow-caster-fs:frag","rasterizerState":{"cullMode":1},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"type":16,"value":[1,1,1,1],"handleInfo":["albedo",0,16]},"albedoScale":{"type":15,"value":[1,1,1],"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"handleInfo":["albedoScaleAndCutoff",3,13]},"mainTexture":{"value":"grey","type":28,"handleInfo":["albedoMap",0,28]},"albedo":{"type":16,"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"value":[1,1,1,0.5]},"albedoMap":{"type":28,"value":"grey"}}}]}]]],0,0,[],[],[]],[[{"name":"default_btn_pressed","rect":{"x":0,"y":0,"width":40,"height":40},"offset":{"x":0,"y":0},"originalSize":{"width":40,"height":40},"rotated":false,"capInsets":[12,12,12,12],"vertices":{"rawPosition":[-20,-20,0,20,-20,0,-20,20,0,20,20,0],"indexes":[0,1,2,2,1,3],"uv":[0,40,40,40,0,0,40,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-20,"y":-20,"z":0},"maxPos":{"x":20,"y":20,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[2],0,[0],[15],[235]],[[[26,"Skin-4",956075047,["mixamorig:Hips","mixamorig:Hips/mixamorig:LeftUpLeg","mixamorig:Hips/mixamorig:LeftUpLeg/mixamorig:LeftLeg","mixamorig:Hips/mixamorig:RightUpLeg","mixamorig:Hips/mixamorig:RightUpLeg/mixamorig:RightLeg"],[[[7,-1,-1.2246468525851679e-16,1.2246468525851679e-16,0,1.2246468525851679e-16,-1.2246468525851679e-16,1,0,-1.2246468525851679e-16,1,1.2246468525851679e-16,0,-0.000018000000636675395,0.011030999943614006,-0.7311469912528992,1],[7,0.9997628927230835,-0.0000338334430125542,0.020906250923871994,0,0.020899225026369095,-0.022297831252217293,-0.9995656609535217,0,0.0004999814555048943,0.9997026920318604,-0.022294066846370697,0,-0.08674037456512451,0.02748180367052555,0.6773518919944763,1],[7,0.9999921321868896,0.0000883969696587883,0.002800478832796216,0,0.0027999780140817165,-0.06720529496669769,-0.9977708458900452,0,0.00009999921167036518,0.9977787137031555,-0.0672050192952156,0,-0.08039093762636185,0.04324999451637268,0.34964871406555176,1],[7,0.9997628927230835,-0.00004146539868088439,-0.020906513556838036,0,-0.020899225026369095,-0.025898166000843048,-0.9994920492172241,0,-0.0004999814555048943,0.9996291399002075,-0.025895481929183006,0,0.08677563816308975,0.029379840940237045,0.677270770072937,1],[7,0.9999921321868896,-0.0000718327792128548,-0.002800896530970931,0,-0.0027999780140817165,-0.06130237132310867,-0.9981307983398438,0,-0.00009999921167036518,0.9981386065483093,-0.06130209192633629,0,0.08042687177658081,0.04181550443172455,0.34985223412513733,1]],8,8,8,8,8]]],0,0,[],[],[]],[[[6,".bin",1439118148,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":14400,"length":3792,"count":948,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":14400,"count":180,"stride":80},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}],"jointMaps":[[0,1]]},"minPosition",8,[1,-0.12549521028995514,1.3615026473999023,-0.10988999158143997],"maxPosition",8,[1,0.12549518048763275,1.5937618017196655,0.15544390678405762]]],-1],0,0,[],[],[]],[[[26,"Skin-0",815998734,["mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandIndex1/mixamorig:LeftHandIndex2/mixamorig:LeftHandIndex3","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandMiddle1","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandMiddle1/mixamorig:LeftHandMiddle2","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandMiddle1/mixamorig:LeftHandMiddle2/mixamorig:LeftHandMiddle3","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandPinky1","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandPinky1/mixamorig:LeftHandPinky2","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandPinky1/mixamorig:LeftHandPinky2/mixamorig:LeftHandPinky3","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandRing1","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandRing1/mixamorig:LeftHandRing2","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandRing1/mixamorig:LeftHandRing2/mixamorig:LeftHandRing3","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandThumb1","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandThumb1/mixamorig:LeftHandThumb2","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandThumb1/mixamorig:LeftHandThumb2/mixamorig:LeftHandThumb3","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:Neck","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:Neck/mixamorig:Head","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandIndex1","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandIndex1/mixamorig:RightHandIndex2","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandIndex1/mixamorig:RightHandIndex2/mixamorig:RightHandIndex3","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandMiddle1","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandMiddle1/mixamorig:RightHandMiddle2","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandMiddle1/mixamorig:RightHandMiddle2/mixamorig:RightHandMiddle3","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandPinky1","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandPinky1/mixamorig:RightHandPinky2","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandPinky1/mixamorig:RightHandPinky2/mixamorig:RightHandPinky3","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandRing1","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandRing1/mixamorig:RightHandRing2","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandRing1/mixamorig:RightHandRing2/mixamorig:RightHandRing3","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandThumb1","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandThumb1/mixamorig:RightHandThumb2","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandThumb1/mixamorig:RightHandThumb2/mixamorig:RightHandThumb3","mixamorig:Hips/mixamorig:LeftUpLeg","mixamorig:Hips/mixamorig:LeftUpLeg/mixamorig:LeftLeg","mixamorig:Hips/mixamorig:LeftUpLeg/mixamorig:LeftLeg/mixamorig:LeftFoot","mixamorig:Hips/mixamorig:LeftUpLeg/mixamorig:LeftLeg/mixamorig:LeftFoot/mixamorig:LeftToeBase","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm","mixamorig:Hips/mixamorig:RightUpLeg","mixamorig:Hips/mixamorig:RightUpLeg/mixamorig:RightLeg","mixamorig:Hips/mixamorig:RightUpLeg/mixamorig:RightLeg/mixamorig:RightFoot","mixamorig:Hips/mixamorig:RightUpLeg/mixamorig:RightLeg/mixamorig:RightFoot/mixamorig:RightToeBase","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandIndex1","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandIndex1/mixamorig:LeftHandIndex2"],[[[7,-0.28629088401794434,-0.09903641045093536,0.9530132412910461,0,0.11189643293619156,-0.9912779927253723,-0.06940118968486786,0,0.951569676399231,0.08676952868700027,0.29488617181777954,0,-0.010842005722224712,1.2087291479110718,-0.6736346483230591,1],[7,-0.22408518195152283,0.0633598119020462,0.9725187420845032,0,0.11659228801727295,-0.9889393448829651,0.09130318462848663,0,0.9675360321998596,0.13384586572647095,0.214236781001091,0,-0.03905876353383064,1.0808947086334229,-0.807231605052948,1],[7,-0.22408518195152283,0.07486864924430847,0.9716836810112,0,0.11659228801727295,-0.9878419041633606,0.102999746799469,0,0.9675360321998596,0.13637910783290863,0.2126338928937912,0,-0.03908922150731087,1.070942759513855,-0.8522895574569702,1],[7,-0.22408518195152283,-0.03189750760793686,0.9740845561027527,0,0.11659228801727295,-0.9931257367134094,-0.005700456909835339,0,0.9675360321998596,0.11228837072849274,0.2262887805700302,0,-0.039124418050050735,1.1611956357955933,-0.7617326378822327,1],[7,-0.09490855783224106,0.08564632385969162,0.9917934536933899,0,0.12471123784780502,-0.987446665763855,0.09719919413328171,0,0.9876890182495117,0.13291053473949432,0.08303003013134003,0,-0.09859112650156021,1.0629849433898926,-0.8197846412658691,1],[7,-0.09490855783224106,0.08454117923974991,0.9918789267539978,0,0.12471123784780502,-0.9875624179840088,0.09609735757112503,0,0.9876890182495117,0.13281895220279694,0.0831773653626442,0,-0.09860416501760483,1.0639368295669556,-0.8466644287109375,1],[7,-0.09490855783224106,0.014159169979393482,0.9953683018684387,0,0.12471123784780502,-0.9918060898780823,0.025999095290899277,0,0.9876890182495117,0.12659165263175964,0.09236367791891098,0,-0.09861627221107483,1.1228171586990356,-0.7938486337661743,1],[7,-0.18080736696720123,0.02647634968161583,0.9831307530403137,0,0.11960487812757492,-0.991651713848114,0.04869692027568817,0,0.976239800453186,0.12639671564102173,0.17611747980117798,0,-0.051674582064151764,1.1118284463882446,-0.7656757831573486,1],[7,-0.18080736696720123,0.05087507516145706,0.9822103381156921,0,0.11960487812757492,-0.9901264905929565,0.07330101728439331,0,0.976239800453186,0.13072867691516876,0.17293262481689453,0,-0.05166363716125488,1.0917026996612549,-0.8238525390625,1],[7,-0.18080736696720123,-0.004445417318493128,0.9835197329521179,0,0.11960487812757492,-0.992635190486908,0.01750037632882595,0,0.976239800453186,0.12079025059938431,0.1800116002559662,0,-0.05168386176228523,1.1378953456878662,-0.7902763485908508,1],[7,-0.9714690446853638,-0.011126245371997356,0.2368462085723877,0,-0.009899684228003025,-0.9961439967155457,-0.08740359544754028,0,0.2368924468755722,-0.08725611120462418,0.9676268696784973,0,0.6063570380210876,1.1436806917190552,-0.10749055445194244,1],[7,-0.9714670777320862,-0.0594804622232914,0.2295266091823578,0,-0.009999661706387997,-0.9568716287612915,-0.29030272364616394,0,0.2368919849395752,-0.28431397676467896,0.9290083646774292,0,0.6149728298187256,1.1469615697860718,0.10272403806447983,1],[7,-0.9714690446853638,-0.0663003996014595,0.22765833139419556,0,-0.009899684228003025,-0.9479590058326721,-0.31833818554878235,0,0.2368924468755722,-0.31150540709495544,0.9202976822853088,0,0.6087509393692017,1.1444565057754517,0.10559186339378357,1],[7,-1,1.2246468525851679e-16,1.2246468525851679e-16,0,1.2246468525851679e-16,-1.2246468525851679e-16,1,0,1.2246468525851679e-16,1,1.2246468525851679e-16,0,-0.000018000000636675395,0.008623999543488026,-1.196079969406128,1],[7,-1,-1.2246468525851679e-16,1.2246468525851679e-16,0,1.2246468525851679e-16,-1.2246468525851679e-16,1,0,-1.2246468525851679e-16,1,1.2246468525851679e-16,0,-0.000018000000636675395,-0.007664999924600124,-1.280729055404663,1],[7,-1,-1.230981732588344e-16,1.2182456657840895e-16,0,1.2246468525851679e-16,-0.005199859384447336,0.999972939491272,0,-1.2246468525851679e-16,0.999972939491272,0.005199859384447336,0,-0.000018000000636675395,0.014839918352663517,-1.0565228462219238,1],[7,0.0003999891341663897,0.2725062966346741,-0.9621146321296692,0,0.005199858453124762,-0.9621848464012146,-0.27247726917266846,0,-0.9999728202819824,-0.004894358571618795,-0.0018017275724560022,0,-0.014843973331153393,1.1505576372146606,0.2631690502166748,1],[7,0.02989771217107773,0.08377767354249954,-0.9960726499557495,0,0.01349896751344204,-0.9964461326599121,-0.08340636640787125,0,-0.9994235634803772,-0.010952547192573547,-0.03092402033507824,0,-0.018966203555464745,1.1553386449813843,-0.0862056091427803,1],[7,-0.1856049746274948,-0.04205372929573059,-0.981752336025238,0,-0.004800128750503063,-0.9990644454956055,0.043702542781829834,0,-0.9826263785362244,0.012823815457522869,0.18522639572620392,0,-0.07847239077091217,1.1117013692855835,-0.41286036372184753,1],[7,-0.25958681106567383,-0.0485389418900013,-0.9644732475280762,0,-0.11049439013004303,-0.9906747341156006,0.07959546893835068,0,-0.9593513011932373,0.12723605334758759,0.25180524587631226,0,-0.0038435175083577633,1.094832181930542,-0.6852062940597534,1],[7,-0.2886214554309845,0.03443633019924164,-0.9568630456924438,0,-0.10800802707672119,-0.9941930770874023,-0.0032002327498048544,0,-0.9513707160949707,0.10242249816656113,0.29065099358558655,0,0.004592475946992636,1.160217523574829,-0.6960731148719788,1],[7,-0.2886214554309845,-0.031378310173749924,-0.9569666385650635,0,-0.10800802707672119,-0.9920372366905212,0.0651044175028801,0,-0.9513707160949707,0.12214422225952148,0.28292790055274963,0,0.004589254967868328,1.1076366901397705,-0.8030646443367004,1],[7,-0.2886214554309845,0.12716594338417053,-0.948935329914093,0,-0.10800802707672119,-0.9891732335090637,-0.09969428181648254,0,-0.9513707160949707,0.07372082769870758,0.29920080304145813,0,0.004660799168050289,1.2297357320785522,-0.6365599632263184,1],[7,-0.21709716320037842,-0.013850345276296139,-0.9760139584541321,0,-0.11379850655794144,-0.9927467703819275,0.03939688578248024,0,-0.9694873094558716,0.11963021010160446,0.2139342576265335,0,0.04169261083006859,1.1230114698410034,-0.7528533339500427,1],[7,-0.003399868728592992,-0.272509902715683,0.962199866771698,0,-0.0051997993141412735,-0.9621723890304565,-0.27252909541130066,0,0.9999613761901855,-0.005929830018430948,0.0018543280893936753,0,0.014842749573290348,1.150525689125061,0.2632911801338196,1],[7,-0.21709716320037842,-0.08450650423765182,-0.9724730849266052,0,-0.11379850655794144,-0.987225353717804,0.11119701713323593,0,-0.9694873094558716,0.1348041296005249,0.20471343398094177,0,0.0416584275662899,1.0632210969924927,-0.8631526827812195,1],[7,-0.21709716320037842,-0.05251341313123703,-0.9747776389122009,0,-0.11379850655794144,-0.9903654456138611,0.07870651036500931,0,-0.9694873094558716,0.12800851464271545,0.2090432345867157,0,0.04168904200196266,1.0920311212539673,-0.858361005783081,1],[7,-0.10009884834289551,-0.03865232691168785,-0.9942538738250732,0,-0.12179859727621078,-0.9912081956863403,0.05080278962850571,0,-0.9874886274337769,0.12617544829845428,0.0945185124874115,0,0.09115853160619736,1.1023327112197876,-0.768347978591919,1],[7,-0.10009641200304031,-0.08469389379024506,-0.9913382530212402,0,-0.12189562618732452,-0.9878442883491516,0.09669428318738937,0,-0.9874646067619324,0.13052767515182495,0.08855283260345459,0,0.0912519097328186,1.06422758102417,-0.8480936288833618,1],[7,-0.10009641200304031,-0.07596441358327866,-0.9920476078987122,0,-0.12189562618732452,-0.9886696338653564,0.087995246052742,0,-0.9874646067619324,0.12974467873573303,0.08969858288764954,0,0.09126424044370651,1.0718775987625122,-0.8627884984016418,1],[7,-0.1417018622159958,0.010831422172486782,-0.9898965358734131,0,-0.11920157074928284,-0.992897629737854,0.006200604606419802,0,-0.9827129244804382,0.11887512356042862,0.14198558032512665,0,0.08036985248327255,1.1412372589111328,-0.7216088771820068,1],[7,-0.1417018622159958,-0.06808038800954819,-0.987525999546051,0,-0.11920157074928284,-0.9891983866691589,0.08529321104288101,0,-0.9827129244804382,0.1298050582408905,0.13204994797706604,0,0.08034490048885345,1.077616572380066,-0.8406785726547241,1],[7,-0.1417052447795868,0.011614140123128891,-0.9898779392242432,0,-0.11910440772771835,-0.9928302764892578,0.0054004257544875145,0,-0.982736349105835,0.1186530590057373,0.14208050072193146,0,0.0802745446562767,1.144047737121582,-0.7796730995178223,1],[7,0.031998228281736374,-0.08375004678964615,0.9959444403648376,0,-0.01519915834069252,-0.9964129328727722,-0.08329562842845917,0,0.9993446469306946,-0.01247295830398798,-0.03315620869398117,0,0.019841093569993973,1.1552884578704834,-0.08627022057771683,1],[7,-0.967456042766571,0.0076287551783025265,-0.2530362010002136,0,0.01490086317062378,-0.9960970878601074,-0.08700309693813324,0,-0.2527146339416504,-0.08793788403272629,0.9635571241378784,0,-0.6083029508590698,1.1415621042251587,-0.11866358667612076,1],[7,-0.967456042766571,0.06387988477945328,-0.24496100842952728,0,0.01490086317062378,-0.9515666961669922,-0.30702242255210876,0,-0.2527146339416504,-0.30065587162971497,0.9196701645851135,0,-0.616193950176239,1.1455289125442505,0.11151722073554993,1],[7,-0.9674531817436218,0.05437473580241203,-0.24723683297634125,0,0.015000823885202408,-0.9626606702804565,-0.2703867554664612,0,-0.2527138888835907,-0.265302836894989,0.9304357767105103,0,-0.6101186871528625,1.1477857828140259,0.0370626226067543,1],[7,0.9997628927230835,-0.0000338334430125542,0.020906250923871994,0,0.020899225026369095,-0.022297831252217293,-0.9995656609535217,0,0.0004999814555048943,0.9997026920318604,-0.022294066846370697,0,-0.08674037456512451,0.02748180367052555,0.6773518919944763,1],[7,0.9999921321868896,0.0000883969696587883,0.002800478832796216,0,0.0027999780140817165,-0.06720529496669769,-0.9977708458900452,0,0.00009999921167036518,0.9977787137031555,-0.0672050192952156,0,-0.08039093762636185,0.04324999451637268,0.34964871406555176,1],[7,0.9999725818634033,-0.004661174025386572,-0.0023839990608394146,0,0.0024999314919114113,0.8252240419387817,-0.564825713634491,0,0.004599873907864094,0.5648073554039001,0.82523113489151,0,-0.08019447326660156,-0.04890288785099983,0.07947662472724915,1],[7,0.9991112947463989,-0.03288520500063896,-0.02657797560095787,0,0.03350037708878517,0.9991469383239746,0.022999176755547523,0,0.025800291448831558,-0.02386876754462719,0.9993636608123779,0,-0.08197646588087082,-0.004314009100198746,-0.07253146171569824,1],[7,-0.18268699944019318,0.042496584355831146,0.9822012782096863,0,0.0030997793655842543,-0.999071478843689,0.043795544654130936,0,0.9831300377845764,0.011046834290027618,0.18237632513046265,0,0.0790591686964035,1.111517310142517,-0.413185179233551,1],[7,0.9997628927230835,-0.00004146539868088439,-0.020906513556838036,0,-0.020899225026369095,-0.025898166000843048,-0.9994920492172241,0,-0.0004999814555048943,0.9996291399002075,-0.025895481929183006,0,0.08677563816308975,0.029379840940237045,0.677270770072937,1],[7,0.9999921321868896,-0.0000718327792128548,-0.002800896530970931,0,-0.0027999780140817165,-0.06130237132310867,-0.9981307983398438,0,-0.00009999921167036518,0.9981386065483093,-0.06130209192633629,0,0.08042687177658081,0.04181550443172455,0.34985223412513733,1],[7,0.9999725818634033,0.004667466506361961,0.002371559152379632,0,-0.0024999314919114113,0.8237103223800659,-0.5670163631439209,0,-0.004599873907864094,0.5669980049133301,0.8237174153327942,0,0.08023487031459808,-0.04923200234770775,0.07881933450698853,1],[7,0.9990703463554382,0.03316332399845123,0.02699742466211319,0,-0.03379899635910988,0.9991080164909363,0.023398231714963913,0,-0.02619922161102295,-0.024289125576615334,0.9993231296539307,0,0.08204847574234009,-0.004251581151038408,-0.07280229032039642,1],[7,-0.26099786162376404,0.04164012894034386,0.9644648432731628,0,0.11389906704425812,-0.9907215237617493,0.07360392063856125,0,0.9585921764373779,0.12905409932136536,0.2538512945175171,0,0.001271965797059238,1.0990911722183228,-0.6782902479171753,1],[7,-0.28629088401794434,0.028152789920568466,0.9577484726905823,0,0.11189643293619156,-0.9917912483215332,0.06260274350643158,0,0.951569676399231,0.12509624660015106,0.2807883024215698,0,-0.010759271681308746,1.1101781129837036,-0.7681275606155396,1],[7,-0.286284476518631,-0.016650967299938202,0.9580004811286926,0,0.11199392378330231,-0.9935575723648071,0.016200020909309387,0,0.9515483975410461,0.11192861944437027,0.28631895780563354,0,-0.010940439067780972,1.1462405920028687,-0.7467488050460815,1]],8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[6,".bin",3241750560,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":101376,"length":25920,"count":6480,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":101376,"count":1408,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,1,2,3,4,5]]},"minPosition",8,[1,-0.13052673637866974,-0.0025902700144797564,-0.0949660986661911],"maxPosition",8,[1,0.13052667677402496,0.09797298163175583,0.14288467168807983]]],-1],0,0,[],[],[]],[[[6,".bin",710981993,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":194240,"length":39936,"count":9984,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":194240,"count":2428,"stride":80},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}],"jointMaps":[[0,1,2,3,4,5,6,7,8,9,10,11,12,13]]},"minPosition",8,[1,-0.31475502252578735,0.7308754920959473,-0.1109195128083229],"maxPosition",8,[1,0.31475502252578735,1.2402788400650024,0.12085150927305222]]],-1],0,0,[],[],[]],[[[26,"Skin-5",588722594,["mixamorig:Hips/mixamorig:LeftUpLeg","mixamorig:Hips/mixamorig:LeftUpLeg/mixamorig:LeftLeg","mixamorig:Hips/mixamorig:LeftUpLeg/mixamorig:LeftLeg/mixamorig:LeftFoot","mixamorig:Hips/mixamorig:LeftUpLeg/mixamorig:LeftLeg/mixamorig:LeftFoot/mixamorig:LeftToeBase","mixamorig:Hips/mixamorig:RightUpLeg","mixamorig:Hips/mixamorig:RightUpLeg/mixamorig:RightLeg","mixamorig:Hips/mixamorig:RightUpLeg/mixamorig:RightLeg/mixamorig:RightFoot","mixamorig:Hips/mixamorig:RightUpLeg/mixamorig:RightLeg/mixamorig:RightFoot/mixamorig:RightToeBase"],[[[7,0.9997628927230835,-0.0000338334430125542,0.020906250923871994,0,0.020899225026369095,-0.022297831252217293,-0.9995656609535217,0,0.0004999814555048943,0.9997026920318604,-0.022294066846370697,0,-0.08674037456512451,0.02748180367052555,0.6773518919944763,1],[7,0.9999921321868896,0.0000883969696587883,0.002800478832796216,0,0.0027999780140817165,-0.06720529496669769,-0.9977708458900452,0,0.00009999921167036518,0.9977787137031555,-0.0672050192952156,0,-0.08039093762636185,0.04324999451637268,0.34964871406555176,1],[7,0.9999725818634033,-0.004661174025386572,-0.0023839990608394146,0,0.0024999314919114113,0.8252240419387817,-0.564825713634491,0,0.004599873907864094,0.5648073554039001,0.82523113489151,0,-0.08019447326660156,-0.04890288785099983,0.07947662472724915,1],[7,0.9991112947463989,-0.03288520500063896,-0.02657797560095787,0,0.03350037708878517,0.9991469383239746,0.022999176755547523,0,0.025800291448831558,-0.02386876754462719,0.9993636608123779,0,-0.08197646588087082,-0.004314009100198746,-0.07253146171569824,1],[7,0.9997628927230835,-0.00004146539868088439,-0.020906513556838036,0,-0.020899225026369095,-0.025898166000843048,-0.9994920492172241,0,-0.0004999814555048943,0.9996291399002075,-0.025895481929183006,0,0.08677563816308975,0.029379840940237045,0.677270770072937,1],[7,0.9999921321868896,-0.0000718327792128548,-0.002800896530970931,0,-0.0027999780140817165,-0.06130237132310867,-0.9981307983398438,0,-0.00009999921167036518,0.9981386065483093,-0.06130209192633629,0,0.08042687177658081,0.04181550443172455,0.34985223412513733,1],[7,0.9999725818634033,0.004667466506361961,0.002371559152379632,0,-0.0024999314919114113,0.8237103223800659,-0.5670163631439209,0,-0.004599873907864094,0.5669980049133301,0.8237174153327942,0,0.08023487031459808,-0.04923200234770775,0.07881933450698853,1],[7,0.9990703463554382,0.03316332399845123,0.02699742466211319,0,-0.03379899635910988,0.9991080164909363,0.023398231714963913,0,-0.02619922161102295,-0.024289125576615334,0.9993231296539307,0,0.08204847574234009,-0.004251581151038408,-0.07280229032039642,1]],8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[6,".bin",4139203800,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":14832,"length":3408,"count":852,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":14832,"count":206,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.13317477703094482,1.417841911315918,-0.12529590725898743],"maxPosition",8,[1,0.13317474722862244,1.624579668045044,0.2393590807914734]]],-1],0,0,[],[],[]],[[[26,"Skin-2",659996016,["mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:Neck","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:Neck/mixamorig:Head"],[[[7,-1,1.2246468525851679e-16,1.2246468525851679e-16,0,1.2246468525851679e-16,-1.2246468525851679e-16,1,0,1.2246468525851679e-16,1,1.2246468525851679e-16,0,-0.000018000000636675395,0.008623999543488026,-1.196079969406128,1],[7,-1,-1.2246468525851679e-16,1.2246468525851679e-16,0,1.2246468525851679e-16,-1.2246468525851679e-16,1,0,-1.2246468525851679e-16,1,1.2246468525851679e-16,0,-0.000018000000636675395,-0.007664999924600124,-1.280729055404663,1]],8,8]]],0,0,[],[],[]],[[[26,"Skin-6",827093697,["mixamorig:Hips","mixamorig:Hips/mixamorig:Spine","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:Neck","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:Neck/mixamorig:Head","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm","mixamorig:Hips/mixamorig:LeftUpLeg","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm","mixamorig:Hips/mixamorig:RightUpLeg"],[[[7,-1,-1.2246468525851679e-16,1.2246468525851679e-16,0,1.2246468525851679e-16,-1.2246468525851679e-16,1,0,-1.2246468525851679e-16,1,1.2246468525851679e-16,0,-0.000018000000636675395,0.011030999943614006,-0.7311469912528992,1],[7,-1,-1.230981732588344e-16,1.2182456657840895e-16,0,1.2246468525851679e-16,-0.005199859384447336,0.999972939491272,0,-1.2246468525851679e-16,0.999972939491272,0.005199859384447336,0,-0.000018000000636675395,0.014835095964372158,-0.82405686378479,1],[7,-1,-1.230981732588344e-16,1.2182456657840895e-16,0,1.2246468525851679e-16,-0.005199859384447336,0.999972939491272,0,-1.2246468525851679e-16,0.999972939491272,0.005199859384447336,0,-0.000018000000636675395,0.014837212860584259,-0.9325408339500427,1],[7,-1,1.2246468525851679e-16,1.2246468525851679e-16,0,1.2246468525851679e-16,-1.2246468525851679e-16,1,0,1.2246468525851679e-16,1,1.2246468525851679e-16,0,-0.000018000000636675395,0.008623999543488026,-1.196079969406128,1],[7,-1,-1.2246468525851679e-16,1.2246468525851679e-16,0,1.2246468525851679e-16,-1.2246468525851679e-16,1,0,-1.2246468525851679e-16,1,1.2246468525851679e-16,0,-0.000018000000636675395,-0.007664999924600124,-1.280729055404663,1],[7,-1,-1.230981732588344e-16,1.2182456657840895e-16,0,1.2246468525851679e-16,-0.005199859384447336,0.999972939491272,0,-1.2246468525851679e-16,0.999972939491272,0.005199859384447336,0,-0.000018000000636675395,0.014839918352663517,-1.0565228462219238,1],[7,0.0003999891341663897,0.2725062966346741,-0.9621146321296692,0,0.005199858453124762,-0.9621848464012146,-0.27247726917266846,0,-0.9999728202819824,-0.004894358571618795,-0.0018017275724560022,0,-0.014843973331153393,1.1505576372146606,0.2631690502166748,1],[7,0.02989771217107773,0.08377767354249954,-0.9960726499557495,0,0.01349896751344204,-0.9964461326599121,-0.08340636640787125,0,-0.9994235634803772,-0.010952547192573547,-0.03092402033507824,0,-0.018966203555464745,1.1553386449813843,-0.0862056091427803,1],[7,-0.1856049746274948,-0.04205372929573059,-0.981752336025238,0,-0.004800128750503063,-0.9990644454956055,0.043702542781829834,0,-0.9826263785362244,0.012823815457522869,0.18522639572620392,0,-0.07847239077091217,1.1117013692855835,-0.41286036372184753,1],[7,-0.003399868728592992,-0.272509902715683,0.962199866771698,0,-0.0051997993141412735,-0.9621723890304565,-0.27252909541130066,0,0.9999613761901855,-0.005929830018430948,0.0018543280893936753,0,0.014842749573290348,1.150525689125061,0.2632911801338196,1],[7,0.031998228281736374,-0.08375004678964615,0.9959444403648376,0,-0.01519915834069252,-0.9964129328727722,-0.08329562842845917,0,0.9993446469306946,-0.01247295830398798,-0.03315620869398117,0,0.019841093569993973,1.1552884578704834,-0.08627022057771683,1],[7,0.9997628927230835,-0.0000338334430125542,0.020906250923871994,0,0.020899225026369095,-0.022297831252217293,-0.9995656609535217,0,0.0004999814555048943,0.9997026920318604,-0.022294066846370697,0,-0.08674037456512451,0.02748180367052555,0.6773518919944763,1],[7,-0.18268699944019318,0.042496584355831146,0.9822012782096863,0,0.0030997793655842543,-0.999071478843689,0.043795544654130936,0,0.9831300377845764,0.011046834290027618,0.18237632513046265,0,0.0790591686964035,1.111517310142517,-0.413185179233551,1],[7,0.9997628927230835,-0.00004146539868088439,-0.020906513556838036,0,-0.020899225026369095,-0.025898166000843048,-0.9994920492172241,0,-0.0004999814555048943,0.9996291399002075,-0.025895481929183006,0,0.08677563816308975,0.029379840940237045,0.677270770072937,1]],8,8,8,8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[26,"Skin-3",2023014407,["mixamorig:Hips/mixamorig:LeftUpLeg/mixamorig:LeftLeg","mixamorig:Hips/mixamorig:LeftUpLeg/mixamorig:LeftLeg/mixamorig:LeftFoot","mixamorig:Hips/mixamorig:LeftUpLeg/mixamorig:LeftLeg/mixamorig:LeftFoot/mixamorig:LeftToeBase","mixamorig:Hips/mixamorig:RightUpLeg/mixamorig:RightLeg","mixamorig:Hips/mixamorig:RightUpLeg/mixamorig:RightLeg/mixamorig:RightFoot","mixamorig:Hips/mixamorig:RightUpLeg/mixamorig:RightLeg/mixamorig:RightFoot/mixamorig:RightToeBase"],[[[7,0.9999921321868896,0.0000883969696587883,0.002800478832796216,0,0.0027999780140817165,-0.06720529496669769,-0.9977708458900452,0,0.00009999921167036518,0.9977787137031555,-0.0672050192952156,0,-0.08039093762636185,0.04324999451637268,0.34964871406555176,1],[7,0.9999725818634033,-0.004661174025386572,-0.0023839990608394146,0,0.0024999314919114113,0.8252240419387817,-0.564825713634491,0,0.004599873907864094,0.5648073554039001,0.82523113489151,0,-0.08019447326660156,-0.04890288785099983,0.07947662472724915,1],[7,0.9991112947463989,-0.03288520500063896,-0.02657797560095787,0,0.03350037708878517,0.9991469383239746,0.022999176755547523,0,0.025800291448831558,-0.02386876754462719,0.9993636608123779,0,-0.08197646588087082,-0.004314009100198746,-0.07253146171569824,1],[7,0.9999921321868896,-0.0000718327792128548,-0.002800896530970931,0,-0.0027999780140817165,-0.06130237132310867,-0.9981307983398438,0,-0.00009999921167036518,0.9981386065483093,-0.06130209192633629,0,0.08042687177658081,0.04181550443172455,0.34985223412513733,1],[7,0.9999725818634033,0.004667466506361961,0.002371559152379632,0,-0.0024999314919114113,0.8237103223800659,-0.5670163631439209,0,-0.004599873907864094,0.5669980049133301,0.8237174153327942,0,0.08023487031459808,-0.04923200234770775,0.07881933450698853,1],[7,0.9990703463554382,0.03316332399845123,0.02699742466211319,0,-0.03379899635910988,0.9991080164909363,0.023398231714963913,0,-0.02619922161102295,-0.024289125576615334,0.9993231296539307,0,0.08204847574234009,-0.004251581151038408,-0.07280229032039642,1]],8,8,8,8,8,8]]],0,0,[],[],[]],[[[6,".bin",3003988443,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":36960,"length":5352,"count":2676,"stride":2}},{"primitiveMode":7,"jointMapIndex":1,"vertexBundelIndices":[1],"indexView":{"offset":114632,"length":9504,"count":4752,"stride":2}},{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[2],"indexView":{"offset":171496,"length":5016,"count":2508,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":36960,"count":462,"stride":80},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]},{"view":{"offset":42312,"length":72320,"count":904,"stride":80},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]},{"view":{"offset":124136,"length":47360,"count":592,"stride":80},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}],"jointMaps":[[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,24,33,41,42,43,44,45,46,47,48],[0,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,34,35,36,37,38,39,40]]},"minPosition",8,[1,-0.7975566387176514,0.16371965408325195,-0.0960114598274231],"maxPosition",8,[1,0.7975208759307861,1.587031602859497,0.17290210723876953]]],-1],0,0,[],[],[]],[[[6,".bin",3325172406,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":33280,"length":6432,"count":1608,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":33280,"count":416,"stride":80},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}],"jointMaps":[[0,1,2,3,4,5,6,7]]},"minPosition",8,[1,-0.12014749646186829,0.034139979630708694,-0.08282109349966049],"maxPosition",8,[1,0.12014753371477127,0.21873530745506287,0.02228540927171707]]],-1],0,0,[],[],[]],[[[34],[89,"Character - James_walking",[-3,-4,-5,-6,-7,-8,-9,-10],[[102,-2,[1,"11SsLMqbtaTb5fjCAh56K2"],[23],24]],[0,"ccbZF4f69Vn4Z+6EM/qX/b",-1,0]],[30,"mixamorig:RightHand",[-11,-12,-13,-14,-15],[0,"4eLuExnhZZ86fKNPCP0xhg",1,0],[1,0.000007111990726116346,-0.000014006089259055443,0.2400234192609787],[3,0.015950409678256977,-0.03536230694403726,0.05519348749510116,0.9977217901884371],[1,1.0000392198562622,1.0000402927398682,1.0000531673431396],[1,2.0599912538676994,-4.172400145689746,6.258099917416975]],[30,"mixamorig:LeftHand",[-16,-17,-18,-19,-20],[0,"9f/YMgJ/tdYpaMQFZfBx7y",1,0],[1,-0.0000033931585221580463,0.000004594316123984754,0.23987677693367004],[3,0.012727347090965778,0.03762700003164952,-0.05777421542991537,0.9975391538862534],[1,0.9999698400497437,1.000075101852417,0.9999244809150696],[1,1.7154632504015552,4.418698925094537,-6.563615133608637]],[55,"mixamorig:Hips",1,[-21,-22,-23],[0,"7dn4/uOdFcs4/abHpBVVkb",1,0],[1,-0.000018000000636675395,0.7311469912528992,-0.011030999943614006],[3,0,0.7071067811865476,0.7071067811865476,8.659560751628624e-17],[1,-90.00000000000003,180,7.016709451900449e-15]],[45,"mixamorig:Spine2",[-24,-25,-26],[0,"8eUCBUcZpbt537RAdpFkiK",1,0],[1,-7.806255952088362e-20,-0.000002706326768020517,0.12398198246955872]],[12,"James_body",1,[[25,-27,[1,"8a6I8B/mxcoIyaAidThO7Z"],[0,1,2],[3],1,3,4]],[0,"baOpowSexSkZFNkgQ/3S+T",1,0]],[12,"James_cap",1,[[25,-28,[1,"0bav3scb1cxqJBZ/5CzePZ"],[5],[3],1,6,7]],[0,"278S3Mh5FSMoY2ZiDOw6t2",1,0]],[12,"James_hair",1,[[25,-29,[1,"84dZwlxwpV9YvESZgbEKnO"],[8],[3],1,9,10]],[0,"87VTIc/61RqqFwX6R9wOHW",1,0]],[12,"James_shoes",1,[[25,-30,[1,"2emkxMcptc3rqA574cv2BA"],[11],[3],1,12,13]],[0,"4dskjS/eZaQ4UPJVF3JfVg",1,0]],[12,"James_shorts",1,[[25,-31,[1,"1bzIdb1+9foIreo1EKySr+"],[14],[3],1,15,16]],[0,"7eu6I0Vz1WcJ2xUhhA1hLY",1,0]],[12,"James_socks",1,[[25,-32,[1,"07TPYgmEFcpJxy4mZ+srEn"],[17],[3],1,18,19]],[0,"ec7N+EoJZbkoBCebS3PLzT",1,0]],[12,"James_tshirt",1,[[25,-33,[1,"90DoioNFhcrKPXVHEH0Vxi"],[20],[3],1,21,22]],[0,"2dkM8WQMBeirHPpA72TIRi",1,0]],[5,"mixamorig:Spine",4,[-34],[0,"b2bsEM4BpYnZFO65uwwEWM",1,0],[1,-5.63785109012947e-20,0.00048099999548867345,0.09298700094223022],[3,-0.002599973742786015,3.749386969142393e-33,9.748340240427955e-36,0.9999966200625565],[1,1,1.0000134706497192,1.0000134706497192],[1,-0.29793538028066674,4.29649550374903e-31,-4.3506575803276074e-41]],[46,"mixamorig:Spine1",13,[5],[0,"9ftOVE5eVYFay+c0/YAwy5",1,0],[1,-7.155734622747665e-20,-0.0000021167427348700585,0.10848399251699448]],[5,"mixamorig:Neck",5,[-35],[0,"d95i1jCedep6eKoPVy7mtI",1,0],[1,-8.890457736832954e-20,-0.000003295910801170976,0.13947997987270355],[3,0.002599973742786015,-3.183963248624237e-19,1.2246095516601117e-16,0.9999966200625565],[1,1,0.999986469745636,0.999986469745636],[1,0.29793538028066674,-7.29708180761021e-17,1.4032849480248883e-14]],[58,"mixamorig:Head",15,[[10,"mixamorig:HeadTop_End",-36,[0,"27wE73AGBWSq84uEEKzhyc",1,0],[1,-7.121039901972018e-18,0.058125998824834824,0.30206701159477234]]],[0,"f4sjEZfQNZfqVhJ4Pq4/nS",1,0],[1,1.9949319560142975e-18,0.01628899946808815,0.084648996591568]],[5,"mixamorig:RightShoulder",5,[-37],[0,"f8tYDAvU5caJqniZ4wcAGB",1,0],[1,0.060263000428676605,-0.000028168838980491273,0.12214785069227219],[3,-0.5639104913909292,0.5641360949742353,-0.42655653296779306,0.42638591466998227],[1,0.9999865889549255,0.9999468326568604,1.0000556707382202],[1,0,105.81244194071161,-90]],[5,"mixamorig:RightArm",17,[-38],[0,"bbOtsT6xZVXI2eF2MpAO9W",1,0],[1,0.0000018851487766369246,0.00000427271015723818,0.1265861690044403],[3,0.09592469554332887,0.01525471509608108,-0.001444959978792015,0.9952706458762445],[1,1.0000245571136475,1.0000132322311401,0.9999257922172546],[1,11.01034051951572,1.755952483412222,0.002885146148329066]],[5,"mixamorig:RightForeArm",18,[2],[0,"27Sa9Rdl5YUa0vul9VWHzY",1,0],[1,-0.0000059201470321568195,-0.000004742736109619727,0.19180577993392944],[3,0.06366339886030538,-0.10825621022230915,0.006945003553648988,0.9920581291030767],[1,0.9999539256095886,0.9999905228614807,1.0000028610229492],[1,7.343594049883157,-12.455259682516587,-0.00024190947791609172]],[5,"mixamorig:RightHandIndex1",2,[-39],[0,"9eORGYsmJQZbvhmbthN5uW",1,0],[1,-0.03245886415243149,-0.0006876370171085,0.10816731303930283],[3,-0.04333072235083181,-0.015091490276918113,-0.0006738591596980794,0.9989465658060044],[1,0.9999374151229858,0.9999423623085022,0.9999377727508545],[1,-4.967490595418363,-1.731144953121116,-0.0022029216952239006]],[5,"mixamorig:RightHandIndex2",20,[-40],[0,"b58uHvYIRUGYk0pjiTb/2d",1,0],[1,0.000003221039378331625,-0.0000011648443205558578,0.02900322712957859],[3,0.03436752049681162,-7.154177612525927e-19,-2.0804384926259717e-17,0.999409262281925],[1,1,1.000027060508728,1.0000017881393433],[1,3.9390034234421876,-1.3315597092204721e-24,-2.3854160585653996e-15]],[11,"mixamorig:RightHandIndex3",21,[[10,"mixamorig:RightHandIndex4",-41,[0,"05CS7N9C1Vfavpk5KJrYQf",1,0],[1,0.00007353726687142625,0.0000013120520634402055,0.021863095462322235]]],[0,"e4xLax5K9b45+vzFeBxDeL",1,0],[1,-0.0000715442220098339,-4.214836621940776e-7,0.027970239520072937],[3,-0.08289841497182925,2.5934370202238525e-17,2.304592335477547e-17,0.9965580027249585],[1,1,0.9999864101409912,1.0000663995742798],[1,-9.510372677257644,3.180554575204682e-15,2.3854159486002747e-15]],[5,"mixamorig:RightHandMiddle1",2,[-42],[0,"37icegjBJZsYqsY8DwYliC",1,0],[1,-0.010880134999752045,-0.0006498924340121448,0.10819046199321747],[3,-0.01778211786398752,0.021900442981534627,0.0003501933182109004,0.9996019428983338],[1,0.9999811053276062,0.9999659657478333,1.0000134706497192],[1,-2.038178184794448,2.510123401400497,-0.004512883410769191]],[5,"mixamorig:RightHandMiddle2",23,[-43],[0,"c5xGMamW9fO5ksjglIJu/Y",1,0],[1,0.00003418165215407498,-0.0000025167089461319847,0.03099985420703888],[3,0.03623407315001189,2.514243892943461e-19,6.934337342972929e-18,0.9993433303639744],[1,1,1.0000602006912231,0.999974250793457],[1,4.153028027731927,0,7.951386703658792e-16]],[11,"mixamorig:RightHandMiddle3",24,[[10,"mixamorig:RightHandMiddle4",-44,[0,"e37v916KZQ5qCuuR13kr9R",1,0],[1,1.1779845721093807e-7,-9.955451787391212e-7,0.02477804571390152]]],[0,"02cwlF9O5Q0I8xZwRLeB1/",1,0],[1,-0.00003061149982386269,-5.225316499490873e-7,0.03057563677430153],[3,-0.01642961103270941,2.7523823577034974e-17,1.433192858280603e-17,0.999865024831509],[1,1,0.9999799728393555,0.9999454617500305],[1,-1.882779452685202,3.180554789253529e-15,1.5902774100611075e-15]],[5,"mixamorig:RightHandPinky1",2,[-45],[0,"54U0ecAXNW6bf5XhbhCSA4",1,0],[1,0.03215956687927246,0.0001748849608702585,0.09854201227426529],[3,-0.004966872810865418,0.081171387032356,0.00034296734252772733,0.9966877236502544],[1,0.9999797940254211,1.0000367164611816,0.9999477863311768],[1,-0.5704760379085633,9.311881205417714,-0.007028658397223045]],[5,"mixamorig:RightHandPinky2",26,[-46],[0,"b14/wpt/NfI79yo2udue6U",1,0],[1,0.000018834383809007704,-2.82330404388631e-7,0.029547538608312607],[3,0.023187758473016944,0.0000036885815121329228,0.000049485206699410874,0.9997311265508371],[1,1.0000121593475342,0.9999308586120605,1.0000560283660889],[1,2.6573595502478042,0.0002910784585947005,0.0056788633322826425]],[11,"mixamorig:RightHandPinky3",27,[[10,"mixamorig:RightHandPinky4",-47,[0,"40xfGcS3xUAbY4sJDCtHSf",1,0],[1,-0.000005432204943645047,7.064750775498396e-7,0.019670896232128143]]],[0,"a5XYqYkCVdcqhaWQn/x1fa",1,0],[1,-0.000012334857274254318,4.4581975089386106e-7,0.024094533175230026],[3,-0.004400999625541807,2.075540358054824e-17,1.3969266968083653e-17,0.9999903155542537],[1,1,0.9999874234199524,0.9999977350234985],[1,-0.5043190363822357,2.3854159655981727e-15,1.5902772665079599e-15]],[5,"mixamorig:RightHandRing1",2,[-48],[0,"30oX0CONRegonZ+N9GhzML",1,0],[1,0.011157887987792492,-0.001009488943964243,0.10743608325719833],[3,-0.029944325748216923,0.06021947591113617,0.001773011690091617,0.9977343376400449],[1,0.9999676942825317,0.9999433755874634,0.9999287128448486],[1,-3.4378901171365115,6.907815811826856,-0.003923266491520766]],[5,"mixamorig:RightHandRing2",29,[-49],[0,"e2r6MPnopcG4z2LsxDMcsF",1,0],[1,0.000024954828404588625,-2.906518261625024e-7,0.03059440292418003],[3,0.03987398827697223,-2.801018239872151e-17,-5.826650017911234e-18,0.9992047162913553],[1,1,1.0000481605529785,1.000087022781372],[1,4.570434142770725,-3.1805545630728483e-15,-7.951386656414138e-16]],[11,"mixamorig:RightHandRing3",30,[[10,"mixamorig:RightHandRing4",-50,[0,"b7CTM5+FpQjb3hdr0Nlyi8",1,0],[1,0.00001786916072887834,-4.981880010745954e-7,0.02345055714249611]]],[0,"8cfoSGROBQT6xTi5h9mx0k",1,0],[1,-0.000042705763917183504,4.5507984935966306e-8,0.02848713845014572],[3,-0.040273563207665515,-0.0000022690392781856063,-0.000049591371439658524,0.9991886897088584],[1,0.9999880790710449,1.0000356435775757,0.9999232888221741],[1,-4.616258897112571,-0.0004886664944784287,-0.005667670461262504]],[5,"mixamorig:RightHandThumb1",2,[-51],[0,"60xzywYThbgIZFGUrY1F0D",1,0],[1,-0.025057023391127586,0.00778393168002367,0.025486184284090996],[3,-0.09607329826364255,-0.5008885192306284,-0.056039295284057274,0.8583357210600988],[1,0.9999297857284546,0.9999889731407166,0.9999727606773376],[1,-12.771603068394855,-60.53178988172773,0.002461791036778549]],[5,"mixamorig:RightHandThumb2",32,[-52],[0,"c6jXFqpntaY7DhCDjpnaTK",1,0],[1,0.007890991866588593,-0.000003070059165111161,0.028179800137877464],[3,-0.11224889783760067,1.1683247893884488e-18,-1.0342561825459344e-17,0.9936801220383972],[1,1,1.0000245571136475,0.9999874830245972],[1,-12.889941946892137,-5.3199195575826274e-24,-1.1927080526432528e-15]],[11,"mixamorig:RightHandThumb3",33,[[10,"mixamorig:RightHandThumb4",-53,[0,"c6lV6snWxRRo2cbW4TrAfq",1,0],[1,-0.0017042241524904966,0.0000010349435797252227,0.02430623583495617]]],[0,"99AH0tyXpa6q2MZTcCwOa2",1,0],[1,-0.006185887381434441,0.0000018903841692008427,0.030563276261091232],[3,0.019127974833119326,0.000014437977782568593,-0.000047860355610576385,0.999817042303098],[1,1.0000015497207642,0.9999481439590454,1.0000579357147217],[1,2.1920382277024517,0.0017590730202212842,-0.0054517426934660995]],[5,"mixamorig:LeftShoulder",5,[-54],[0,"31ZQ3DgtNSX7K5IsHNzGuh",1,0],[1,-0.060263000428676605,0.0002018249360844493,0.12214905023574829],[3,0.5649828245083885,0.5630651046910424,-0.4257436640194182,-0.42719366619498167],[1,0.9999922513961792,0.9999521970748901,0.9999594688415527],[1,-105.81322149671736,0.0003853874663356471,89.80519163359102]],[5,"mixamorig:LeftArm",35,[-55],[0,"e5oDH+z/9XDJvKMK4RsqoS",1,0],[1,-0.0000057301786000607535,-4.109856632794617e-8,0.1265980750322342],[3,0.09595965842927508,-0.01831292594780677,0.0017549142230958922,0.9952152033472141],[1,1.0000085830688477,1.0000327825546265,1.0000797510147095],[1,11.014960249031894,-2.108238837203845,-0.0012358474351315135]],[5,"mixamorig:LeftForeArm",36,[3],[0,"4dnr3d4nleQ4t52P9jOfH0",1,0],[1,-0.000005853675702383043,0.000014513425412587821,0.19180737435817719],[3,0.06383866888010892,0.10781243563820973,-0.006963227021926297,0.9920950642689509],[1,1.0000066757202148,0.999967098236084,1.000024676322937],[1,7.363827600657653,12.40434646888182,-0.002931341459322897]],[5,"mixamorig:LeftHandMiddle1",3,[-56],[0,"ceQqaLYE1Y4LZWKVQRn77e",1,0],[1,0.010523983277380466,0.00046254214248619974,0.10555142164230347],[3,0.011156142497608275,-0.019037734390033614,0.00022397107001679773,0.999756497848765],[1,1.0000290870666504,0.9999939203262329,1.000011920928955],[1,1.2786832165212534,-2.181846057435003,0.001321109456046716]],[5,"mixamorig:LeftHandMiddle2",38,[-57],[0,"3cVzHTkSlV6YZeS99dCu53",1,0],[1,0.000030458386390819214,-0.000002946704626083374,0.032338544726371765],[3,0.005918153163125885,1.4041806302045244e-17,2.7672958784330088e-17,0.9999824875782265],[1,1,0.9999470114707947,1.000017523765564],[1,0.6781743563479663,1.5902773154796552e-15,3.18055469390331e-15]],[11,"mixamorig:LeftHandMiddle3",39,[[10,"mixamorig:LeftHandMiddle4",-58,[0,"254T871GZaKqZraX+zCN39",1,0],[1,-0.00006450873479479924,3.3204624827476437e-8,0.023937763646245003]]],[0,"37D4OES7FVq6/6aXJ5Vx/C",1,0],[1,0.00003519677193253301,-0.0000030462219910987187,0.03189190849661827],[3,-0.054786396125618766,7.603139801862053e-19,-1.3856944724226082e-17,0.9984980975442903],[1,1,1.000054955482483,0.9999564290046692],[1,-6.2812034453894645,0,-1.5902773407317588e-15]],[5,"mixamorig:LeftHandPinky1",3,[-59],[0,"80T0kDEz1b97xS2TYQ/V9p",1,0],[1,-0.03154924139380455,0.0009128061938099563,0.09920990467071533],[3,0.022073321003830203,-0.08446327581361633,0.0018510562333677921,0.9961803537158902],[1,0.9999517798423767,0.9999334812164307,1.0000261068344116],[1,2.538501167322947,-9.692655786205911,-0.0023375700312155854]],[5,"mixamorig:LeftHandPinky2",41,[-60],[0,"49eH3ZNeFS27lzhEAsyxy7",1,0],[1,0.00001303607496083714,0.0000013651178960571997,0.028073392808437347],[3,-0.0005574089140091697,-6.946628205613452e-18,1.3873918582412944e-17,0.999999844647639],[1,1,0.9999918937683105,1.000009536743164],[1,-0.06387435977906965,-7.951386447708297e-16,1.5902774245825957e-15]],[11,"mixamorig:LeftHandPinky3",42,[[10,"mixamorig:LeftHandPinky4",-61,[0,"47umnRxkZRXra5EDK5u5Xn",1,0],[1,-0.00002448160739731975,9.067888413483161e-7,0.019921239465475082]]],[0,"beAze7/yNRcK9TIcihREil",1,0],[1,0.00001210769096360309,0.0000016050785234256182,0.02463148534297943],[3,-0.0353887902763145,-1.4360212859254272e-17,1.3377977235179857e-17,0.9993736205858043],[1,1,1.0000807046890259,1.0000064373016357],[1,-4.0561035717760205,-1.5902773039506434e-15,1.590277374997051e-15]],[5,"mixamorig:LeftHandRing1",3,[-62],[0,"fbikyZR6hXlbyQrMRNsRpm",1,0],[1,-0.011640723794698715,-0.000724983518011868,0.10608071833848953],[3,-0.0077050829522819966,-0.041153370454898766,-0.0003354950387069429,0.9991230751213682],[1,0.9999757409095764,0.9999338984489441,1.000057578086853],[1,-0.8837803812978452,-4.717317398486356,-0.002075333536422752]],[5,"mixamorig:LeftHandRing2",44,[-63],[0,"40m+4za1tYgKeHdV92BSXL",1,0],[1,-0.000010945245776383672,-0.0000018735581761575304,0.030789494514465332],[3,0.012411774821145373,-1.4048965939345216e-17,-1.370447086365214e-17,0.9999229709561578],[1,1,1.0000107288360596,0.9999595880508423],[1,1.422321147236957,-1.5902772429524865e-15,-1.5902773424804011e-15]],[11,"mixamorig:LeftHandRing3",45,[[10,"mixamorig:LeftHandRing4",-64,[0,"1b/zqyXmxTIKLsMevYUEw9",1,0],[1,-0.000012406705536704976,-5.019593345423345e-7,0.02302774414420128]]],[0,"4dnAgyS1ZeJa6sl/iyF5hN",1,0],[1,0.000020224824766046368,5.068449127065833e-7,0.02916899137198925],[3,-0.028130590124331473,2.813498271880026e-17,-1.3091515044174652e-17,0.9996042566432263],[1,1,1.000046968460083,0.9999972581863403],[1,-3.2239534759513924,3.180554776213918e-15,-1.5902773433981986e-15]],[5,"mixamorig:LeftHandThumb1",3,[-65],[0,"17pCtgMHtUxIMLnJ8mkZMZ",1,0],[1,0.024588605388998985,0.007678675465285778,0.025548988953232765],[3,-0.09580623467332887,0.5069748220820327,0.05678384443064172,0.8547358013937917],[1,1.0000375509262085,0.9999434947967529,0.9999762773513794],[1,-12.788572198280864,61.34697113874079,-0.004144089398105492]],[5,"mixamorig:LeftHandThumb2",47,[-66],[0,"1eYjGU/HBUJJnOiGvZtii8",1,0],[1,-0.00850366149097681,-3.4092354894710297e-7,0.027751903980970383],[3,-0.10333533095868981,-0.00000949409082610457,0.000049091065499338586,0.9946465738520329],[1,1.0000009536743164,1.0000327825546265,1.0000108480453491],[1,-11.862532624008315,-0.00050081363482375,0.0057077293752795825]],[11,"mixamorig:LeftHandThumb3",48,[[10,"mixamorig:LeftHandThumb4",-67,[0,"c4SVxNTWlQzZ3uUD3sKF+n",1,0],[1,0.00239484547637403,-1.592220257862209e-7,0.025486662983894348]]],[0,"36EBKhpw9ZQbZnKYHZGbfa",1,0],[1,0.006110636983066797,-2.1096073510307178e-7,0.03086167201399803],[3,-0.014708719247442657,0.000015217979157970965,-0.00004762554464006595,0.9998918196876703],[1,0.9999989867210388,0.9999590516090393,0.9999496340751648],[1,-1.6855557734213689,0.0016633906936497122,-0.005482544854509541]],[5,"mixamorig:LeftHandIndex1",3,[-68],[0,"e2uQvP4L5T2qDMcj2YfO/z",1,0],[1,0.03268425539135933,-0.00005325473102857359,0.10485702008008957],[3,-0.007048265833428344,0.013163188145437094,0.00010507317813829574,0.9998885144785975],[1,1.000011920928955,0.9999132752418518,1.0000035762786865],[1,-0.8077669764105536,1.5084812169523396,0.001407621481502322]],[5,"mixamorig:LeftHandIndex2",50,[-69],[0,"36/Ghq/SdamrPIDjDyJ3NB",1,0],[1,0.000066194093960803,0.00000236071400649962,0.031372733414173126],[3,-0.023364219987274712,-0.000001970621284289288,-0.00004965103326285985,0.999727018118085],[1,1.0000112056732178,1.000064730644226,1.000018835067749],[1,-2.6775860623570997,-0.0003586877394017465,-0.005682760135464832]],[11,"mixamorig:LeftHandIndex3",51,[[10,"mixamorig:LeftHandIndex4",-70,[0,"13rQaBH/hb+4CRArIBXI9C",1,0],[1,-0.00008429191802861169,-2.1219882739842433e-8,0.022328177466988564]]],[0,"4csIgzUCBSNI4Vg2BYEciR",1,0],[1,0.000016586000128882006,-0.000001283436176890973,0.028448719531297684],[3,-0.043087817188880495,-0.0000013312637581001387,0.00004966697389687639,0.9990712875172206],[1,0.9999887943267822,0.999996542930603,0.9999983906745911],[1,-4.939029229434294,0.00009282077841029428,0.005692703406265008]],[5,"mixamorig:LeftUpLeg",4,[-71],[0,"9aHZS0hh5dSYGmg669PEtK",1,0],[1,-0.07258199900388718,-0.0013020000187680125,-0.051708001643419266],[3,0.00013347204736317774,0.9998832025507299,-0.011149365763278222,-0.010452515734742377],[1,1.00001859664917,1.0000486373901367,0.9999671578407288],[1,1.277420099046433,-178.80245300900143,0.0286473614502237]],[5,"mixamorig:LeftLeg",53,[-72],[0,"08J9gtsm9bQZhiSa/OOUZx",1,0],[1,-0.000005001814315619413,-0.000009342705197923351,0.32762688398361206],[3,0.022477179177956323,-0.009051257507754507,0.00020535847042612695,0.9997063613789946],[1,0.99998539686203,0.9999122619628906,0.9999969601631165],[1,2.5760194530785125,-1.0374787820494635,0.00021215853207381526]],[5,"mixamorig:LeftFoot",54,[-73],[0,"dcHtLY5h5ZS7p8UYqBI5O0",1,0],[1,-8.449933375231922e-8,0.0000032991436000884278,0.2671462297439575],[3,-0.49594700876620973,-0.00111710246472082,0.0019590428778068236,0.8683498596354672],[1,1.0000097751617432,1.0000219345092773,1.000020980834961],[1,-59.46459996768915,0.00017712446802549306,0.2584229740511257]],[11,"mixamorig:LeftToeBase",55,[[10,"mixamorig:LeftToe_End",-74,[0,"19WQgo2OJdoaOsI3cPzXDw",1,0],[1,2.4320274860656355e-7,1.8604413298817235e-7,0.05320889502763748]]],[0,"d0v9Mimn1ThKhFEedu8IcT",1,0],[1,8.394769679398451e-7,0.000003224042529836879,0.13583791255950928],[3,-0.30672231443434567,-0.005756587745218115,0.017880417480516914,0.9516136685631897],[1,0.9999807476997375,1.0000426769256592,1.0000348091125488],[1,-35.73015526705257,0.0007196214374854454,2.152641707646522]],[5,"mixamorig:RightUpLeg",4,[-75],[0,"b7s6TmsklVdbs5P15Bf4Qv",1,0],[1,0.07258100062608719,-0.0007600000244565308,-0.051708001643419266],[3,-0.00011464684465771247,0.9998615009275161,-0.012950137544098279,0.010452739194334789],[1,1.00001859664917,1.0000354051589966,0.9999539852142334],[1,1.4837996330750818,178.8024530057517,-0.028647361130940224]],[5,"mixamorig:RightLeg",57,[-76],[0,"038wH6cKpdRKeMOUCYWI45",1,0],[1,0.000004591029664879898,-0.000006875950930407271,0.32765963673591614],[3,0.01771971595735901,0.009051728125518589,-0.00019488927636833432,0.9998020003493202],[1,0.99998539686203,0.9999454021453857,1.000030279159546],[1,2.0307551434574393,1.0374986901477568,-0.003948439761742979]],[5,"mixamorig:RightFoot",58,[-77],[0,"0c4yRYf6VYyLdapIPVOgBA",1,0],[1,-7.459941286924732e-8,0.000011545696906978264,0.2670386731624603],[3,-0.49221876068300996,0.001120240306693103,-0.0019571459774497457,0.8704686130314866],[1,1.0000097751617432,1.0000101327896118,1.0000091791152954],[1,-58.973199490897166,0.001351054929260676,-0.2584091319480305]],[11,"mixamorig:RightToeBase",59,[[10,"mixamorig:RightToe_End",-78,[0,"74yx/RpP9X7oJhTSib2BVR",1,0],[1,-0.0000012128639355069026,-0.0000017677015193839907,0.052381351590156555]]],[0,"2fRBgex6FXCKhlbHzeRlCY",1,0],[1,0.0000031504137041338254,-0.0000036238764096196974,0.1353008896112442],[3,-0.3081828553733895,0.005885140313575481,-0.01808720023308689,0.9511369753958271],[1,1.0000011920928955,1.0000540018081665,1.0000464916229248],[1,-35.906175827978764,0.002684478541909111,-2.179725374087611]]],0,[0,7,1,0,0,1,0,-1,6,0,-2,7,0,-3,8,0,-4,9,0,-5,10,0,-6,11,0,-7,12,0,-8,4,0,-1,20,0,-2,23,0,-3,26,0,-4,29,0,-5,32,0,-1,38,0,-2,41,0,-3,44,0,-4,47,0,-5,50,0,-1,13,0,-2,53,0,-3,57,0,-1,15,0,-2,17,0,-3,35,0,0,6,0,0,7,0,0,8,0,0,9,0,0,10,0,0,11,0,0,12,0,-1,14,0,-1,16,0,3,16,0,-1,18,0,-1,19,0,-1,21,0,-1,22,0,3,22,0,-1,24,0,-1,25,0,3,25,0,-1,27,0,-1,28,0,3,28,0,-1,30,0,-1,31,0,3,31,0,-1,33,0,-1,34,0,3,34,0,-1,36,0,-1,37,0,-1,39,0,-1,40,0,3,40,0,-1,42,0,-1,43,0,3,43,0,-1,45,0,-1,46,0,3,46,0,-1,48,0,-1,49,0,3,49,0,-1,51,0,-1,52,0,3,52,0,-1,54,0,-1,55,0,-1,56,0,3,56,0,-1,58,0,-1,59,0,-1,60,0,3,60,0,12,1,2,3,19,3,3,37,5,3,14,78],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,-2,-3,1,11,-1,1,11,-1,1,11,-1,1,11,-1,1,11,-1,1,11,-1,1,11,-1,32],[24,24,24,236,237,24,238,239,24,240,241,24,242,243,24,244,245,24,246,247,24,248,249,139,139]],[[[41,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_ALBEDO_MAP":true},{},{}],[[[{"shininessExponent":20,"transparencyFactor":0},"specularColor",8,[4,4281545523],"mainTexture",6,0],{},{}],11,0,0]]],0,0,[0,0],[8,5],[250,10]],[[[26,"Skin-1",1772319756,["mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:Neck/mixamorig:Head"],[[[7,-1,-1.2246468525851679e-16,1.2246468525851679e-16,0,1.2246468525851679e-16,-1.2246468525851679e-16,1,0,-1.2246468525851679e-16,1,1.2246468525851679e-16,0,-0.000018000000636675395,-0.007664999924600124,-1.280729055404663,1]],8]]],0,0,[],[],[]],[[[6,".bin",2539550919,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":42960,"length":7632,"count":1908,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":42960,"count":537,"stride":80},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}],"jointMaps":[[0,1,2,3,4]]},"minPosition",8,[1,-0.15157277882099152,0.38855302333831787,-0.11389782279729843],"maxPosition",8,[1,0.15157277882099152,0.7589419484138489,0.10818479210138321]]],-1],0,0,[],[],[]],[[[15,"MainSdjja",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{},{},{}],[[[{"occlusion":0,"roughness":0,"metallic":0.494},"mainColor",8,[4,4283914072]],{},{}],11,0,0]]],0,0,[0],[5],[1]],[[[53,"Dance_Audio",".mp3",148.662857],-1],0,0,[],[],[]],[[[35,"Table_Chair"],[30,"Table_Chair",[-8,-9,-10,-11,-12,-13],[147,"45pjvhPQlOQ5i3RtTESUF5",-7,0,[-1,-2,-3,-4,-5,-6]],[1,199.385,0,-132.658],[3,0,0.7953359659738758,0,0.6061688718735087],[1,2,2,2],[1,0,105.37400000000004,0]],[2,["37yqt8h/9ed5B9SL01MGnw"]],[2,["26pr7CrUVQQqc7iSlbd9UL"]],[2,["e9twxsf1BRVqEWKJ2ocm2D"]],[20,0,null,1,[19,"37yqt8h/9ed5B9SL01MGnw",-17,[47,"faaGMr3lZFboYN+YoUhFv+",1,[[13,"Table_02",["_name"],2],[7,["_lpos"],2,[1,-1.7765415506419302,0,0.17527797592042305]],[7,["_lrot"],2,[3,0,-0.7953359659738759,0,0.6061688718735084]],[7,["_euler"],2,[1,0,-105.37400000000008,0]],[18,["_materials","0"],-14,1],[18,["_materials","1"],-15,2],[18,["_materials","2"],-16,3],[7,["_lscale"],2,[1,1.4999999999999996,1.5,1.4999999999999996]]]],0]],[2,["5cdUDAwgZRypXqcN8zjPxm"]],[20,0,null,1,[19,"0e4mXNjKJcP512XmSuo2DT",-21,[47,"f2AK3Rk2VEv4myAlzwiXBe",1,[[14,"Chair_Simple",["_name"],[2,["0e4mXNjKJcP512XmSuo2DT"]]],[16,["_lpos"],[2,["0e4mXNjKJcP512XmSuo2DT"]],[1,-2.901612144955415,0,0.18588023092091532]],[16,["_lrot"],[2,["0e4mXNjKJcP512XmSuo2DT"]],[3,0,0.9995951100130108,0,-0.02845375261853794]],[16,["_euler"],[2,["0e4mXNjKJcP512XmSuo2DT"]],[1,0,-176.73900000000003,0]],[9,["_materials","0"],[2,["9dRxiNVCxfJLN4+zlxmZEH"]],5],[16,["_lscale"],[2,["0e4mXNjKJcP512XmSuo2DT"]],[1,0.9999999999999996,1,0.9999999999999996]],[7,["_lpos"],-18,[1,0,0,0]],[7,["_lrot"],-19,[3,-0.7071067811865475,0,0,0.7071067811865476]],[7,["_euler"],-20,[1,-90,0,0]]]],4]],[2,["1emOf3jTdY1Y3nMhpUOu3M"]],[20,0,{},1,[19,"26pr7CrUVQQqc7iSlbd9UL",-25,[47,"d6kQ8ZjtZIvJh7ar10dIK1",1,[[13,"Paint_05",["_name"],3],[7,["_lpos"],3,[1,-9.00363502957169,2.215,-5.663702080288957]],[7,["_lrot"],3,[3,0,-0.7953359659738759,0,0.6061688718735084]],[7,["_euler"],3,[1,0,-105.37400000000008,0]],[9,["_materials","0"],[2,["d0n0nkIGVbmoDyTjNhCedw"]],7],[7,["_lpos"],-22,[1,0.751,1.378,0]],[7,["_lscale"],3,[1,1.4999999999999996,1.5,1.4999999999999996]],[7,["_lrot"],-23,[3,-0.5,-0.5,-0.4999999999999999,0.5000000000000001]],[7,["_euler"],-24,[1,-90,-90,0]]]],6]],[2,["a77/qrHadbiphyZscO6UfQ"]],[20,0,null,1,[19,"1dLZH8EpNcUKQWkIakvaE1",-28,[47,"e0heKK/FJJsYtGIYUjnl40",1,[[14,"Counter_02",["_name"],[2,["1dLZH8EpNcUKQWkIakvaE1"]]],[16,["_lpos"],[2,["1dLZH8EpNcUKQWkIakvaE1"]],[1,-28.186129551750277,0,-6.630950319671271]],[16,["_lrot"],[2,["1dLZH8EpNcUKQWkIakvaE1"]],[3,0,-0.7953359659738759,0,0.6061688718735084]],[7,["_euler"],-26,[1,0,-105.37400000000008,0]],[9,["_materials","0"],[2,["98O7QBfsdQaKAjFqYptEc5"]],9],[9,["_materials","1"],[2,["98O7QBfsdQaKAjFqYptEc5"]],10],[9,["_materials","2"],[2,["98O7QBfsdQaKAjFqYptEc5"]],11],[9,["_materials","3"],[2,["98O7QBfsdQaKAjFqYptEc5"]],12],[9,["_materials","4"],[2,["98O7QBfsdQaKAjFqYptEc5"]],13],[9,["_materials","5"],[2,["98O7QBfsdQaKAjFqYptEc5"]],14],[9,["_materials","6"],[2,["98O7QBfsdQaKAjFqYptEc5"]],15],[7,["_lscale"],-27,[1,1.4999999999999996,1.5,1.4999999999999996]]]],8]],[20,0,null,1,[19,"e9twxsf1BRVqEWKJ2ocm2D",-31,[47,"194vF2HL9NK7Z5KzKbZ6/d",1,[[7,["_lpos"],4,[1,-11.814010913200299,0,-5.21368136663375]],[13,"Vase_Glass",["_name"],4],[7,["_lrot"],4,[3,0,-0.7953359659738759,0,0.6061688718735084]],[7,["_euler"],4,[1,0,-105.37400000000008,0]],[18,["_materials","0"],-29,17],[18,["_materials","1"],-30,18],[7,["_lscale"],4,[1,1.4999999999999996,1.5,1.4999999999999996]]]],16]],[20,0,null,1,[19,"0e4mXNjKJcP512XmSuo2DT",-35,[47,"8aLlnLYNdGrqkWWHBJ/d/r",1,[[14,"Chair_Simple-001",["_name"],[2,["0e4mXNjKJcP512XmSuo2DT"]]],[16,["_lpos"],[2,["0e4mXNjKJcP512XmSuo2DT"]],[1,7.105427357601002e-15,0,-1.4210854715202004e-14]],[16,["_lrot"],[2,["0e4mXNjKJcP512XmSuo2DT"]],[3,0,-2.2204460492503136e-16,0,1]],[16,["_euler"],[2,["0e4mXNjKJcP512XmSuo2DT"]],[1,0,-2.544443745170814e-14,0]],[9,["_materials","0"],[2,["9dRxiNVCxfJLN4+zlxmZEH"]],20],[16,["_lscale"],[2,["0e4mXNjKJcP512XmSuo2DT"]],[1,0.9999999999999998,1,0.9999999999999998]],[7,["_lpos"],-32,[1,0,0,0]],[7,["_lrot"],-33,[3,-0.7071067811865475,0,0,0.7071067811865476]],[7,["_euler"],-34,[1,-90,0,0]]]],19]],[2,["1emOf3jTdY1Y3nMhpUOu3M"]],[2,["1dLZH8EpNcUKQWkIakvaE1"]],[2,["a6J2gmQFBTtbBYG4lvt3ev"]]],0,[0,-1,13,0,-2,12,0,-3,11,0,-4,9,0,-5,7,0,-6,5,0,7,1,0,-1,5,0,-2,7,0,-3,9,0,-4,11,0,-5,12,0,-6,13,0,4,6,0,4,6,0,4,6,0,7,5,0,4,8,0,4,8,0,4,8,0,7,7,0,4,10,0,4,10,0,4,10,0,7,9,0,4,15,0,4,15,0,7,11,0,4,16,0,4,16,0,7,12,0,4,14,0,4,14,0,4,14,0,7,13,0,12,1,35],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[9,2,2,2,9,2,9,2,9,2,2,2,2,2,2,2,9,2,2,9,2],[140,141,142,143,144,145,146,29,251,252,253,254,255,256,257,258,259,260,261,144,145]],[[[15,"bob-mat",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{}],[{"USE_ALBEDO_MAP":true},{},{}],[[[{"roughness":1,"metallic":0.125,"SpecularIntensity":0},"mainTexture",6,0],{},{}],11,0,0]]],0,0,[0,0],[8,5],[262,1]],[[[34],[38,"Paint_05",[-2],[0,"26pr7CrUVQQqc7iSlbd9UL",-1,0]],[91,"Paint_05",1,[[4,-3,[1,"d0n0nkIGVbmoDyTjNhCedw"],[0],[3],1]],[0,"a77/qrHadbiphyZscO6UfQ",1,0],[3,-0.5000000447034803,-0.49999995529651575,-0.49999995529651575,0.5000000447034803],[1,1.9999998807907104,1,2.000000238418579],[1,-90,-89.99998975471655,0]]],0,[0,7,1,0,-1,2,0,0,2,0,12,1,3],[0,0],[-1,1],[263,58]],[[[15,"Default_Material",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":0}],[[[{"transparencyFactor":0,"albedoScale":1},"mainColor",8,[4,4294967295],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[5],[10]],[[[6,".bin",1462857507,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1120,"length":120,"count":30,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1120,"count":20,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.36464154720306396,-0.017890214920043945,-0.49528276920318604],"maxPosition",8,[1,0.36464157700538635,0.01789069175720215,0.49528276920318604]]],-1],0,0,[],[],[]],[[[15,"wall_mat_white_2",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_NORMAL_MAP":true,"USE_ALBEDO_MAP":true,"USE_METALLIC_ROUGHNESS_MAP":true},{},{}],[[[{"roughness":0.681,"metallic":0.982,"specularIntensity":1},"tilingOffset",8,[2,0.1,0.1,0,0],"emissive",8,[4,4288980133],"mainTexture",6,0,"normalMap",6,1,"metallicRoughnessMap",6,2,"occlusionMap",6,3],{},{}],11,0,0]]],0,0,[0,0,0,0,0],[8,14,17,22,5],[75,76,57,57,1]],[[[15,"wheel_mat",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_NORMAL_MAP":true,"USE_ALBEDO_MAP":true,"USE_METALLIC_ROUGHNESS_MAP":true,"USE_OCCLUSION_MAP":true},{},{}],[[[{},"mainTexture",6,0,"normalMap",6,1,"metallicRoughnessMap",6,2,"occlusionMap",6,3],{},{}],11,0,0]]],0,0,[0,0,0,0,0],[8,14,17,22,5],[264,265,266,267,1]],[[[15,"word-mat",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{},{},{}],[[[{"roughness":0.636,"metallic":1,"specularIntensity":1},"mainColor",8,[4,4284329700],"emissive",8,[4,4282664004]],{},{}],11,0,0]]],0,0,[0],[5],[1]],[[{"name":"setting","rect":{"x":0,"y":0,"width":98,"height":97},"offset":{"x":0,"y":0},"originalSize":{"width":98,"height":97},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-49,-48.5,0,49,-48.5,0,-49,48.5,0,49,48.5,0],"indexes":[0,1,2,2,1,3],"uv":[0,97,98,97,0,0,98,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-49,"y":-48.5,"z":0},"maxPos":{"x":49,"y":48.5,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[2],0,[0],[15],[268]],[[[35,"Paint_02"],[30,"Paint_02",[-2],[0,"d20Pnmu+BdMJlZetVDAqli",-1,0],[1,11.403,3.269,5.858],[3,0.4253799091912845,0.42537990919128454,0.5648468224717339,0.5648468224717339],[1,2.723,2.723,2.723],[1,0,73.966,90]],[23,"Paint_02",1,[[4,-3,[1,"0bwKvci/VVC4qNNISml1pB"],[0],[3],1]],[0,"c9CupdszdcMrm29r7XnxMS",1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]]],0,[0,7,1,0,-1,2,0,0,2,0,12,1,3],[0,0],[-1,1],[29,269]],[[[53,"BGM",".mp3",318.171429],-1],0,0,[],[],[]],[[[34],[38,"Vase_Glass",[-2],[0,"e9twxsf1BRVqEWKJ2ocm2D",-1,0]],[91,"Vase_Glass",1,[[4,-3,[1,"a6J2gmQFBTtbBYG4lvt3ev"],[0,1],[3],2]],[0,"ceVrwgyiNW0YUwb6Mzjd7e",1,0],[3,0.06709196362152373,0.7039166629775205,0.7039166629775205,-0.06709196362152373],[1,1.327023983001709,1.3270238637924194,1.2063850164413452],[1,-90.00000000000003,-169.11090153398058,0]]],0,[0,7,1,0,-1,2,0,0,2,0,12,1,3],[0,0,0],[-1,-2,1],[270,271,272]],[[[15,"Branch",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":0}],[[[{"transparencyFactor":0,"albedoScale":1},"mainColor",8,[4,4278201437],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[5],[10]],[[[15,"Glass_Brown",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":0}],[[[{"transparencyFactor":0,"albedoScale":1},"mainColor",8,[4,4279976808],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[5],[10]],[[[6,".bin",3668410377,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":22848,"length":5712,"count":1428,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":68544,"length":6336,"count":1584,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":22848,"count":408,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]},{"view":{"offset":28560,"length":39984,"count":714,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.31486690044403076,-0.6337869167327881,0],"maxPosition",8,[1,0.3822959065437317,0.33594775199890137,2.634000062942505]]],-1],0,0,[],[],[]],[[[15,"Karen",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true,"DCC_APP_NAME":0}],[[[{"transparencyFactor":0,"albedoScale":1},"mainColor",8,[4,4294967295],"emissiveColor",8,[4,4278190080],"mainTexture",6,0]],11]]],0,0,[0,0],[8,5],[273,10]],[[[32,"shadow_one","1",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_ALBEDO_MAP":true},{},{}],[[[{},"mainColor",8,[4,1442840575],"mainTexture",6,0],{},{}],11,0,0]]],0,0,[0,0],[8,5],[274,1]],[[[35,"Black_SUV"],[51,"Black_SUV",[-5],[[152,-2,[1,"d7N9hDjxVL4bjV/yTuTQ7g"],[1,2.2,2,5],64],[81,true,-3,[1,"09w3FNIDlDU6JAuriHoExO"],[1,3,2,8],65],[83,true,false,-4,[1,"50AO8KHBJMfqz2JIvZLuUL"],66]],[0,"dc4v0ihnhZmY6h3UJiW8SB",-1,0],[1,216.411,0,-76.471],[3,0,-0.5143422471580423,0,0.857585011989141],[1,2.9999998211860657,2.9999996423721322,2.9999996423721322],[1,0,-61.907,0]],[74,"LOD0",1,[-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26],[0,"34ciUaQs5ch5+sdE/V6d3x",1,0]],[90,"Light_LOD0",2,[-28,-29,-30,-31,-32,-33,-34,-35],[[4,-27,[1,"45T/yGc8VQg4HK3//mImm0"],[29],[3],30]],[0,"5aJNei+ohbD7CbbKepXxUj",1,0]],[12,"Body_LOD0",2,[[4,-36,[1,"78lq7iZVJSOL1kKld6cVX4"],[0,1],[3],2]],[0,"cdwPEQNq1ZG4XBaUX4Mjn8",1,0]],[28,"BrakeFrontLeft_LOD0",2,[[4,-37,[1,"f5WutLCYRRkohkpcbOQvVR"],[3],[3],4]],[0,"cfjze2hkReyatYmVmPVXlM",1,0],[1,0.8009404540061951,0.3777190148830414,1.4115455150604248]],[28,"BrakeFrontRight_LOD0",2,[[4,-38,[1,"ees7XprPNcyYTEOj4Cl4jC"],[5],[3],6]],[0,"9fNFeC7n9T3Zt68m/j3KLA",1,0],[1,-0.8009403944015503,0.3777190148830414,1.4115455150604248]],[28,"BrakeRearLeft_LOD0",2,[[4,-39,[1,"cfA7CDROZWCpZS8chNg8vy"],[7],[3],8]],[0,"fdT1Mov5pe8J67bQL3PW3J",1,0],[1,0.8134588003158569,0.37771907448768616,-1.3940119743347168]],[28,"BrakeRearRight_LOD0",2,[[4,-40,[1,"adnNnu84hVWLf3UyN+RvLr"],[9],[3],10]],[0,"eeZtRX6yJa068BnkHYApaq",1,0],[1,-0.8134587407112122,0.37771907448768616,-1.3940119743347168]],[12,"Interior_LOD0",2,[[4,-41,[1,"87SNFGFEpb6K/G3LxNKm0r"],[11],[3],12]],[0,"b0ba37n69e6qTTKSM2Kpl2",1,0]],[12,"BrakeLights_LOD0",3,[[4,-42,[1,"43sjC2S9dX0r2SmEjttTiq"],[13],[3],14]],[0,"0dBhH6UZNWXJmEsy9dIUho",1,0]],[12,"DayTimeLight_LOD0",3,[[4,-43,[1,"dfXpITDMpUNLUkWysl98U3"],[15],[3],16]],[0,"07/i2zKkFbtI/CSCqj6KLd",1,0]],[12,"FogLight_LOD0",3,[[4,-44,[1,"18hEBMpxBZrraSwn3gEbYW"],[17],[3],18]],[0,"800VdM85JdopJUMJNHPhNt",1,0]],[12,"MainLight_LOD0",3,[[4,-45,[1,"5adkzBPs5bp6qAcNvR2IZr"],[19],[3],20]],[0,"e3geUUabFepIah1cGwEq6c",1,0]],[12,"ReverseLight_LOD0",3,[[4,-46,[1,"85Sz5CmqpdCYwKxIvftCq2"],[21],[3],22]],[0,"5d1jbUEJpaP76cCTm1gKPu",1,0]],[12,"TailLight_LOD0",3,[[4,-47,[1,"b6CUab6v1UwIJeUGg7/lZO"],[23],[3],24]],[0,"21JqSiDxlTbKYj9sIBIifp",1,0]],[12,"TurnSignalLeft_LOD0",3,[[4,-48,[1,"87im0jkFFbAKw+88PIEPgm"],[25],[3],26]],[0,"7a+5kjZC1bYpT6M3mrdmKB",1,0]],[12,"TurnSignalRight_LOD0",3,[[4,-49,[1,"54C4kB1kVRLaHpbVRgzM21"],[27],[3],28]],[0,"2erBCeZUFWyp3zdhUbxmjQ",1,0]],[12,"Paint_LOD0",2,[[4,-50,[1,"99o34CYdtcEJjK9aG8Aem1"],[31],[3],32]],[0,"06FHVIDzBfypQYfv46jw5i",1,0]],[42,"PlateBackTypeEU_LOD0",false,2,[[4,-51,[1,"eer+ZTnPpbIoNyQe/zx5cS"],[33],[3],34]],[0,"ea2EOKDoFQyrqqQqECpKCI",1,0]],[42,"PlateBackTypeUSA_LOD0",false,2,[[4,-52,[1,"fbJo4Zw05dT4To8RE8u3eg"],[35],[3],36]],[0,"13PC2VYWddCJ0AUK0FsbsR",1,0]],[42,"PlateFrontTypeEU_LOD0",false,2,[[4,-53,[1,"91wroNnYxU0ZrCRYu59sCX"],[37],[3],38]],[0,"a9QY47IJJW9ZPM2xYXlAPd",1,0]],[42,"PlateFrontTypeUSA_LOD0",false,2,[[4,-54,[1,"04/5MOY45W8a54h3SsXR4m"],[39],[3],40]],[0,"c4SUsNqwFc34Ga5wk0ct2Q",1,0]],[8,"SteeringWheel_LOD0",2,[[4,-55,[1,"04MNgkRTxcoalPgm9rxNAD"],[41],[3],42]],[0,"aaUq1AWZtaPK/WK144xX8f",1,0],[1,0.3657144606113434,0.9719341397285461,0.4066537618637085],[3,0.18995242062926912,0,0,0.9817932969302049],[1,21.900015070163104,0,0]],[28,"WheelFrontLeft_LOD0",2,[[4,-56,[1,"bdN6tujYVRkof18wgUiyin"],[43,44],[3],45]],[0,"d1TMSIsbBbTYzG+UntyNXA",1,0],[1,0.8009404540061951,0.3777190148830414,1.4115455150604248]],[28,"WheelFrontRight_LOD0",2,[[4,-57,[1,"55UMhylX1cOaIz0FNQn06D"],[46,47],[3],48]],[0,"69jvZ/tK9cR44oOGMcmC7+",1,0],[1,-0.8009403944015503,0.3777190148830414,1.4115455150604248]],[28,"WheelRearLeft_LOD0",2,[[4,-58,[1,"04pLIzGghQlJ8WV0CfWg6R"],[49,50],[3],51]],[0,"a8y8uBxmdUmKMwZr9QAYBg",1,0],[1,0.8134588003158569,0.37771907448768616,-1.3940119743347168]],[28,"WheelRearRight_LOD0",2,[[4,-59,[1,"f3kItBOWRRUb4sYRm42Fec"],[52,53],[3],54]],[0,"552mv7fA1ZraRFud2jTnqB",1,0],[1,-0.8134587407112122,0.37771907448768616,-1.3940119743347168]],[12,"Windows_LOD0",2,[[4,-60,[1,"92DcijOu1airwN7I3YkAau"],[55,56],[3],57]],[0,"6dQVP4JjNQz67iW9fyY86Z",1,0]],[8,"WipersBack_LOD0",2,[[4,-61,[1,"33VkUe8LBeXJPoN4H20NsF"],[58],[3],59]],[0,"1fO9cDtPtfX5WniLfCsBVu",1,0],[1,-0.01228292565792799,1.1771653890609741,-2.0723986625671387],[3,-0.3007057962135454,0,0,0.9537169517857895],[1,-34.99999960461055,0,0]],[8,"WipersLeft_LOD0",2,[[4,-62,[1,"b4FH56ULZQGb0pNSm3lyvX"],[60],[3],61]],[0,"521lhRQGpboIf0rPRjNmlR",1,0],[1,0.5379314422607422,1.0644166469573975,0.9853072762489319],[3,-0.45282770146310275,0.05915403861820624,-0.03589201793322692,0.8889092392092006],[1,-53.7431395491208,4.195803526461016,-6.741072822679555]],[8,"WipersRight_LOD0",2,[[4,-63,[1,"408QugjV9beYILzmb1gH5j"],[62],[3],63]],[0,"d9/G5Gf69eCqmrh2Sfkb+y",1,0],[1,-0.013764515519142151,1.0576444864273071,1.0735692977905273],[3,-0.4042493155700708,0.013735366226369306,-0.009452033906665321,0.9144968505308173],[1,-47.68100158275309,1.0019818979121444,-1.6270025503896004]]],0,[0,7,1,0,0,1,0,0,1,0,0,1,0,-1,2,0,-1,4,0,-2,5,0,-3,6,0,-4,7,0,-5,8,0,-6,9,0,-7,3,0,-8,18,0,-9,19,0,-10,20,0,-11,21,0,-12,22,0,-13,23,0,-14,24,0,-15,25,0,-16,26,0,-17,27,0,-18,28,0,-19,29,0,-20,30,0,-21,31,0,0,3,0,-1,10,0,-2,11,0,-3,12,0,-4,13,0,-5,14,0,-6,15,0,-7,16,0,-8,17,0,0,4,0,0,5,0,0,6,0,0,7,0,0,8,0,0,9,0,0,10,0,0,11,0,0,12,0,0,13,0,0,14,0,0,15,0,0,16,0,0,17,0,0,18,0,0,19,0,0,20,0,0,21,0,0,22,0,0,23,0,0,24,0,0,25,0,0,26,0,0,27,0,0,28,0,0,29,0,0,30,0,0,31,0,12,1,63],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,-2,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,-2,1,-1,-2,1,-1,-2,1,-1,-2,1,-1,-2,1,-1,1,-1,1,-1,1,6,6,18],[25,5,77,5,78,5,79,5,80,5,81,44,82,33,83,15,84,15,85,33,86,33,87,15,88,15,89,15,90,15,91,92,93,5,94,5,95,5,96,5,97,44,98,5,26,99,5,26,100,5,26,101,5,26,102,8,103,104,25,105,25,106,25,107,0,0,138]],[[[15,"Cap",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_ALBEDO_MAP":true},{},{}],[[[{},"mainTexture",6,0],{},{}],11,0,0]]],0,0,[0,0],[8,5],[275,1]],[[{"name":"textBox02","rect":{"x":0,"y":0,"width":33,"height":33},"offset":{"x":0,"y":0},"originalSize":{"width":33,"height":33},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-16.5,-16.5,0,16.5,-16.5,0,-16.5,16.5,0,16.5,16.5,0],"indexes":[0,1,2,2,1,3],"uv":[0,33,33,33,0,0,33,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-16.5,"y":-16.5,"z":0},"maxPos":{"x":16.5,"y":16.5,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[2],0,[0],[15],[276]],[[[15,"Plastic_Write",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_NORMAL_MAP":true,"USE_ALBEDO_MAP":true},{},{}],[[[{"roughness":0.643,"metallic":0.789,"specularIntensity":0.708},"mainTexture",6,0,"normalMap",6,1],{},{}],11,0,0]]],0,0,[0,0,0],[8,14,5],[55,42,1]],[[[15,"Default_Material",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":0}],[[[{"transparencyFactor":0,"albedoScale":1},"mainColor",8,[4,4294967295],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[5],[10]],[[[34],[38,"Counter_02",[-2],[0,"1dLZH8EpNcUKQWkIakvaE1",-1,0]],[23,"Counter_01",1,[[4,-3,[1,"98O7QBfsdQaKAjFqYptEc5"],[0,1,2,3,4,5,6],[3],7]],[0,"99I0xuPChdTYZYmGnJGIHU",1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]]],0,[0,7,1,0,-1,2,0,0,2,0,12,1,3],[0,0,0,0,0,0,0,0],[-1,-2,-3,-4,-5,-6,-7,1],[30,30,30,30,30,30,30,277]],[[[6,".bin",1268143895,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":37128,"length":6192,"count":1548,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":59784,"length":3120,"count":780,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[2],"indexView":{"offset":115656,"length":10920,"count":2730,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[3],"indexView":{"offset":133184,"length":1344,"count":336,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[4],"indexView":{"offset":193888,"length":9024,"count":2256,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[5],"indexView":{"offset":209744,"length":1344,"count":336,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[6],"indexView":{"offset":212208,"length":120,"count":30,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":37128,"count":663,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]},{"view":{"offset":43320,"length":16464,"count":294,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]},{"view":{"offset":62904,"length":52752,"count":942,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]},{"view":{"offset":126576,"length":6608,"count":118,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]},{"view":{"offset":134528,"length":59360,"count":1060,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]},{"view":{"offset":202912,"length":6832,"count":122,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]},{"view":{"offset":211088,"length":1120,"count":20,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-1.2198569774627686,-3.0875895023345947,0.0008717822493053973],"maxPosition",8,[1,1.2198569774627686,3.0875895023345947,1.3666385412216187]]],-1],0,0,[],[],[]],[[[15,"haibao",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_TEXTURE":true}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[8,5],[278,43]],[[{"name":"jump","rect":{"x":0,"y":0,"width":176,"height":176},"offset":{"x":0,"y":0},"originalSize":{"width":176,"height":176},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-88,-88,0,88,-88,0,-88,88,0,88,88,0],"indexes":[0,1,2,2,1,3],"uv":[0,176,176,176,0,0,176,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-88,"y":-88,"z":0},"maxPos":{"x":88,"y":88,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[2],0,[0],[15],[279]],[[[32,"Coffee","0",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_NORMAL_MAP":true,"USE_ALBEDO_MAP":true,"USE_METALLIC_ROUGHNESS_MAP":true},{},{}],[[[{},"mainTexture",6,0,"normalMap",6,1,"metallicRoughnessMap",6,2],{},{}],11,0,0]]],0,0,[0,0,0,0],[8,14,17,5],[147,280,147,1]],[[{"name":"close_on","rect":{"x":18,"y":15,"width":410,"height":390},"offset":{"x":-20.5,"y":12.5},"originalSize":{"width":487,"height":445},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-205,-195,0,205,-195,0,-205,195,0,205,195,0],"indexes":[0,1,2,2,1,3],"uv":[18,430,428,430,18,40,428,40],"nuv":[0.03696098562628337,0.0898876404494382,0.8788501026694046,0.0898876404494382,0.03696098562628337,0.9662921348314607,0.8788501026694046,0.9662921348314607],"minPos":{"x":-205,"y":-195,"z":0},"maxPos":{"x":205,"y":195,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[2],0,[0],[15],[281]],[[[15,"Light",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{},{},{}],[[[{"occlusion":0,"roughness":0,"metallic":0,"specularIntensity":0},"emissive",8,[4,4294967295]],{},{}],11,0,0]]],0,0,[0],[5],[1]],[[[6,".bin",2541029895,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":2496,"length":576,"count":144,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":2496,"count":52,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.8496700525283813,0.9702513217926025,-2.1728439331054688],"maxPosition",8,[1,0.8496700525283813,0.9937277436256409,-1.9036104679107666]]],-1],0,0,[],[],[]],[[[6,".bin",805939970,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":3136,"length":624,"count":156,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":3136,"count":56,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.13790543377399445,0.5026534795761108,-2.331583023071289],"maxPosition",8,[1,0.13790857791900635,0.6535418033599854,-2.298346996307373]]],-1],0,0,[],[],[]],[[[6,".bin",3372026292,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1536,"length":336,"count":84,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1536,"count":32,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.8066296577453613,0.5123308300971985,2.0572476387023926],"maxPosition",8,[1,0.8066296577453613,0.5344165563583374,2.198835611343384]]],-1],0,0,[],[],[]],[[[6,".bin",2139511521,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":8960,"length":2208,"count":552,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":8960,"count":160,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.3583122193813324,-0.0355105847120285,-0.022951889783143997],"maxPosition",8,[1,0.032974544912576675,0.033855557441711426,0.023947715759277344]]],-1],0,0,[],[],[]],[[[6,".bin",575087799,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":17472,"length":5592,"count":1398,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":45912,"length":9744,"count":2436,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":17472,"count":364,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":23064,"length":22848,"count":476,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.8914296627044678,0.7643213868141174,-2.229525566101074],"maxPosition",8,[1,0.8914296627044678,1.6033686399459839,2.1515581607818604]]],-1],0,0,[],[],[]],[[[6,".bin",2631806904,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":3920,"length":768,"count":192,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":3920,"count":70,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.2647951543331146,0.36407214403152466,2.332676410675049],"maxPosition",8,[1,0.26479509472846985,0.4849008321762085,2.3522021770477295]]],-1],0,0,[],[],[]],[[[6,".bin",3235542975,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":20048,"length":3648,"count":912,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":20048,"count":358,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.04260449483990669,-0.11354487389326096,-0.21696902811527252],"maxPosition",8,[1,0.050773072987794876,0.16586634516716003,-0.11654181778430939]]],-1],0,0,[],[],[]],[[[15,"LightAlbedo",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":0}],[[[{"transparencyFactor":0,"albedoScale":1},"mainColor",8,[4,4294967295],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[5],[10]],[[[6,".bin",794383403,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":20048,"length":3648,"count":912,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":20048,"count":358,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.03237488120794296,-0.012363244779407978,0.0887749046087265],"maxPosition",8,[1,0.040543582290410995,0.18242569267749786,0.21454839408397675]]],-1],0,0,[],[],[]],[[[6,".bin",3939611608,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":12992,"length":2436,"count":609,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":12992,"count":232,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.6037716865539551,-0.02356368862092495,-0.10367800295352936],"maxPosition",8,[1,0.022939851507544518,0.1157914325594902,0.0288710780441761]]],-1],0,0,[],[],[]],[[[6,".bin",2413645338,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":34664,"length":8688,"count":2172,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":277096,"length":53880,"count":13470,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":34664,"count":619,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]},{"view":{"offset":43352,"length":233744,"count":4174,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.13550257682800293,-0.3770428001880646,-0.3770427405834198],"maxPosition",8,[1,0.13550257682800293,0.3770428001880646,0.37704285979270935]]],-1],0,0,[],[],[]],[[[6,".bin",737115871,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":34664,"length":8688,"count":2172,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":277096,"length":53880,"count":13470,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":34664,"count":619,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]},{"view":{"offset":43352,"length":233744,"count":4174,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.13550257682800293,-0.3770428001880646,-0.3770427405834198],"maxPosition",8,[1,0.13550250232219696,0.3770428001880646,0.37704285979270935]]],-1],0,0,[],[],[]],[[[6,".bin",672082385,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":310944,"length":101532,"count":25383,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":310944,"count":6478,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.8128740191459656,0.367521196603775,-2.09716534614563],"maxPosition",8,[1,0.8128740191459656,1.5986658334732056,1.0966339111328125]]],-1],0,0,[],[],[]],[[[6,".bin",4049913396,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":20048,"length":3648,"count":912,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":20048,"count":358,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.05077318474650383,-0.11354487389326096,-0.21696904301643372],"maxPosition",8,[1,0.04260445758700371,0.16586636006832123,-0.11654181778430939]]],-1],0,0,[],[],[]],[[[6,".bin",3225897831,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":142184,"length":36336,"count":9084,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":217384,"length":6624,"count":1656,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":142184,"count":2539,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]},{"view":{"offset":178520,"length":38864,"count":694,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-1.0473122596740723,0.18607689440250397,-2.3494462966918945],"maxPosition",8,[1,1.0473121404647827,1.5096250772476196,2.3490240573883057]]],-1],0,0,[],[],[]],[[[6,".bin",2413645338,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":34664,"length":8688,"count":2172,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":277096,"length":53880,"count":13470,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":34664,"count":619,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]},{"view":{"offset":43352,"length":233744,"count":4174,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.13550257682800293,-0.3770428001880646,-0.3770427405834198],"maxPosition",8,[1,0.13550257682800293,0.3770428001880646,0.37704285979270935]]],-1],0,0,[],[],[]],[[[6,".bin",737115871,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":34664,"length":8688,"count":2172,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":277096,"length":53880,"count":13470,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":34664,"count":619,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]},{"view":{"offset":43352,"length":233744,"count":4174,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.13550257682800293,-0.3770428001880646,-0.3770427405834198],"maxPosition",8,[1,0.13550250232219696,0.3770428001880646,0.37704285979270935]]],-1],0,0,[],[],[]],[[[6,".bin",3137449883,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4512,"length":1032,"count":258,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":4512,"count":94,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.779693067073822,0.7884491682052612,1.8551952838897705],"maxPosition",8,[1,0.779693067073822,0.8984976410865784,1.993822455406189]]],-1],0,0,[],[],[]],[[[6,".bin",2931344869,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":2112,"length":480,"count":120,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":2112,"count":44,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.8984110355377197,0.46394217014312744,-2.248690128326416],"maxPosition",8,[1,0.8984110355377197,0.5251676440238953,-1.9301294088363647]]],-1],0,0,[],[],[]],[[[6,".bin",1863829214,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":3360,"length":744,"count":186,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":3360,"count":70,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.8609111309051514,0.6127041578292847,-2.165402889251709],"maxPosition",8,[1,-0.5110454559326172,1.023269534111023,2.215651273727417]]],-1],0,0,[],[],[]],[[[6,".bin",2167074382,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":89952,"length":28176,"count":7044,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":89952,"count":1874,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.8908237814903259,0.758940577507019,-2.2289960384368896],"maxPosition",8,[1,0.8908237814903259,1.0513807535171509,2.1786105632781982]]],-1],0,0,[],[],[]],[[[6,".bin",952418463,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1152,"length":240,"count":60,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1152,"count":24,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.7813916802406311,0.3238726258277893,2.0902397632598877],"maxPosition",8,[1,0.7813916802406311,0.378160685300827,2.2276792526245117]]],-1],0,0,[],[],[]],[[[6,".bin",2281913941,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":161712,"length":53592,"count":13398,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":161712,"count":3369,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-1.0635932683944702,0.18607689440250397,-2.349658250808716],"maxPosition",8,[1,1.0635932683944702,1.580737590789795,2.334930419921875]]],-1],0,0,[],[],[]],[[[6,".bin",3908650574,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":20048,"length":3648,"count":912,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":20048,"count":358,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.040543634444475174,-0.012363266199827194,0.0887748971581459],"maxPosition",8,[1,0.03237488865852356,0.1824256181716919,0.21454831957817078]]],-1],0,0,[],[],[]],[[[6,".bin",3701568007,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4480,"length":840,"count":210,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":4480,"count":80,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.1611643135547638,0.27415621280670166,2.255405902862549],"maxPosition",8,[1,0.1611643135547638,0.46440184116363525,2.3572311401367188]]],-1],0,0,[],[],[]],[[[6,".bin",3798518367,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":12992,"length":2436,"count":609,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":12992,"count":232,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.620639443397522,-0.02365165762603283,-0.04774591326713562],"maxPosition",8,[1,0.02316790446639061,0.030756685882806778,0.031446367502212524]]],-1],0,0,[],[],[]],[[[6,".bin",1490860635,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":3360,"length":744,"count":186,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":3360,"count":70,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,0.5110454559326172,0.6127041578292847,-2.165402889251709],"maxPosition",8,[1,0.8609111309051514,1.023269534111023,2.215651273727417]]],-1],0,0,[],[],[]],[[[6,".bin",452169020,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":2576,"length":480,"count":120,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":2576,"count":46,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.2477366179227829,0.5204399824142456,-2.325450897216797],"maxPosition",8,[1,0.24774065613746643,0.6329866051673889,-2.2947466373443604]]],-1],0,0,[],[],[]],[[[6,".bin",3205895667,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":39312,"length":13488,"count":3372,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":39312,"count":819,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.1867431402206421,-0.18184180557727814,-0.11523324996232986],"maxPosition",8,[1,0.1867431402206421,0.18720154464244843,0.00025865170755423605]]],-1],0,0,[],[],[]],[[[6,".bin",4203095926,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":8928,"length":2112,"count":528,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":8928,"count":186,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.8710653781890869,0.9263128042221069,-2.182499408721924],"maxPosition",8,[1,0.8710653781890869,1.489924669265747,-1.6803756952285767]]],-1],0,0,[],[],[]],[[{"name":"move02","rect":{"x":0,"y":0,"width":176,"height":176},"offset":{"x":0,"y":0},"originalSize":{"width":176,"height":176},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-88,-88,0,88,-88,0,-88,88,0,88,88,0],"indexes":[0,1,2,2,1,3],"uv":[0,176,176,176,0,0,176,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-88,"y":-88,"z":0},"maxPos":{"x":88,"y":88,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[2],0,[0],[15],[282]],[[[15,"Default_Material",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":0}],[[[{"transparencyFactor":0,"albedoScale":1},"mainColor",8,[4,4294967295],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[5],[10]],[[[6,".bin",2138975311,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":13176,"length":1188,"count":297,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":27108,"length":2412,"count":603,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":13176,"count":183,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]},{"view":{"offset":14364,"length":12744,"count":177,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.20999999344348907,-0.2549999952316284,0],"maxPosition",8,[1,0.2099670171737671,0.2549999952316284,0.8399999737739563]]],-1],0,0,[],[],[]],[[[34],[38,"SDJJA16502",[-2],[0,"55CCRCdlFdAKOL7F/fn9y5",-1,0]],[23,"SDJJA16502",1,[[4,-3,[1,"d81KijX4NWlJc6qhZ8ZU+i"],[0,1],[3],2]],[0,"72/KFCZ51ck5/uSXD+n12I",1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]]],0,[0,7,1,0,-1,2,0,0,2,0,12,1,3],[0,0,0],[-1,-2,1],[148,148,283]],[[{"name":"choose","rect":{"x":0,"y":0,"width":22,"height":22},"offset":{"x":0,"y":0},"originalSize":{"width":22,"height":22},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-11,-11,0,11,-11,0,-11,11,0,11,11,0],"indexes":[0,1,2,2,1,3],"uv":[0,22,22,22,0,0,22,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-11,"y":-11,"z":0},"maxPos":{"x":11,"y":11,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[2],0,[0],[15],[284]],[[[32,"Table","1",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_NORMAL_MAP":true,"USE_ALBEDO_MAP":true},{},{}],[[[{"occlusion":0.475,"roughness":0.288,"metallic":0.296,"specularIntensity":0.288},"mainColor",8,[4,4286221730],"mainTexture",6,0,"normalMap",6,1],{},{}],11,0,0]]],0,0,[0,0,0],[8,14,5],[285,286,1]],[[[15,"MiscMat",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_NORMAL_MAP":true,"USE_ALBEDO_MAP":true,"USE_METALLIC_ROUGHNESS_MAP":true},{},{}],[[[{"roughness":1,"metallic":0.508},"mainTexture",6,0,"normalMap",6,1,"metallicRoughnessMap",6,2,"occlusionMap",6,3],{},{}],11,0,0]]],0,0,[0,0,0,0,0],[8,14,17,22,5],[287,288,289,290,1]],[[[15,"car_matte_mat",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_ALBEDO_MAP":true},{},{}],[[[{},"mainTexture",6,0],{},{}],11,0,0]]],0,0,[0,0],[8,5],[291,1]],[[{"base":"2,2,0,0,0,0","rgbe":false,"mipmaps":[{"front":"e2bYYX5idKkZnCCdD1VcsX","back":"d7gQM3PHxMbJGo4zecWBpV","left":"a6xHAYhZ5BvJapPR8LCIEJ","right":"fbJtWEBuBJlosMuKdSsY6P","top":"deHrJKUDRLRZexhep3bma/","bottom":"00sFs6zJxMzZQlcmMrZZ7/"}]}],[17],0,[],[],[]],[[[32,"Glass","1",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{}],[{},{},{}],[[[{"roughness":0,"metallic":1,"mainTexture":null},"mainColor",8,[4,2332033023]],{},{}],11,0,0]]],0,0,[0],[5],[1]],[[[32,"Glass-001","1",[{"rasterizerState":{},"depthStencilState":{"depthWrite":true},"blendState":{"targets":[{}]}},{},{}],[{},{},{}],[[[{"roughness":0,"metallic":1,"mainTexture":null},"mainColor",8,[4,2323677312]],{},{}],11,0,0]]],0,0,[0],[5],[1]],[[{"name":"default_btn_disabled","rect":{"x":0,"y":0,"width":40,"height":40},"offset":{"x":0,"y":0},"originalSize":{"width":40,"height":40},"rotated":false,"capInsets":[12,12,12,12],"vertices":{"rawPosition":[-20,-20,0,20,-20,0,-20,20,0,20,20,0],"indexes":[0,1,2,2,1,3],"uv":[0,40,40,40,0,0,40,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-20,"y":-20,"z":0},"maxPos":{"x":20,"y":20,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[2],0,[0],[15],[292]],[[[6,".bin",1042864605,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":49008,"length":6672,"count":1668,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":49008,"count":1021,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,0.0003580097109079361,-0.0011225728085264564,-0.0007999999797903001],"maxPosition",8,[1,0.028464805334806442,0.004763349425047636,0.0007999999797903001]]],-1],0,0,[],[],[]],[[[34],[38,"Consultation_Slogan",[-2,-3],[0,"b4LaABy4NZ35MU24zjNTh1",-1,0]],[75,"Text.002",1,[[101,[null],-4,[1,"bdIF6wnFZcT4JPQOwtf7tI"],[3],0]],[0,"9d4VK+qnhXn4+BOSeKmH3u",1,0],[1,-1.3860769271850586,0,0],[3,-0.7071068407911908,0,0,0.7071067215818992],[1,100,100,100],[1,-90.00000965934633,0,0]],[75,"Text.003",1,[[101,[null],-5,[1,"df6muSb6xYKoM/dzsI/MRw"],[3],1]],[0,"ceRB+dDMlS8bqJ6ZZyZR4B",1,0],[1,-1.40244460105896,0,-0.6828687787055969],[3,-0.7071068407911908,0,0,0.7071067215818992],[1,100,100,100],[1,-90.00000965934633,0,0]]],0,[0,7,1,0,-1,2,0,-2,3,0,0,2,0,0,3,0,12,1,5],[0,0],[1,1],[293,294]],[[[6,".bin",940816882,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":107568,"length":13728,"count":3432,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":107568,"count":2241,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,0.00035800953628495336,-0.0011225730413571,-0.0009999999310821295],"maxPosition",8,[1,0.028464805334806442,0.004763349890708923,0.0009999999310821295]]],-1],0,0,[],[],[]],[[[15,"mat-mirror-wood",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_ALBEDO_MAP":true}],[[[{"fresnelMin":0.015,"fresnelMax":0.213,"fresnelPower":2.269,"fresnelScaleInMirror":0.177,"reflectionMaskMap":null},"backColor",8,[4,4284177261],"mainTexture",6,0]],11]]],0,0,[0,0],[8,5],[295,296]],[[[15,"Plastic_Rad",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_NORMAL_MAP":true,"USE_ALBEDO_MAP":true},{},{}],[[[{"occlusion":0.448,"roughness":0.305,"metallic":0.377,"specularIntensity":0.27},"mainColor",8,[4,4279835038],"mainTexture",6,0,"normalMap",6,1],{},{}],11,0,0]]],0,0,[0,0,0],[8,14,5],[55,42,1]],[[[32,"poster1_mtl","1",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_TEXTURE":true}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[8,5],[297,43]],[[{"name":"move01","rect":{"x":0,"y":0,"width":80,"height":80},"offset":{"x":0,"y":0},"originalSize":{"width":80,"height":80},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-40,-40,0,40,-40,0,-40,40,0,40,40,0],"indexes":[0,1,2,2,1,3],"uv":[0,80,80,80,0,0,80,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-40,"y":-40,"z":0},"maxPos":{"x":40,"y":40,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[2],0,[0],[15],[298]],[[[15,"Counter",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_NORMAL_MAP":true,"USE_ALBEDO_MAP":true},{},{}],[[[{},"mainColor",8,[4,4287600547],"mainTexture",6,0,"normalMap",6,1],{},{}],11,0,0]]],0,0,[0,0,0],[8,14,5],[299,42,1]],[[[168,"car1204"],[122,"Collider","f2Nj1AhIFD8avUyfFi51pb",[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29]],[169,"car1204",[-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,1,-84,-85,-86,-87,-88,-89,-90],[148,"944c2e35-0e24-46ea-ba44-fd8bd6b43e1a",[[170,["_cameraComponent"],-58,[2,["3f2oTdCepERZdpmIfLsrhd"]],-57,[2,["4fksSzGytD8pPTPcjomZUc"]]],[71,["joyStick"],-60,-59,[2,["82w3jdFPJNeqCiHIrvo50g"]]],[71,["cocosAnim"],-62,-61,[2,["afyJr8fMBShZ+C9ndjwHor"]]],[71,["cocosAnim"],-64,-63,[2,["afyJr8fMBShZ+C9ndjwHor"]]],[71,["joyStick"],-66,-65,[2,["82w3jdFPJNeqCiHIrvo50g"]]]],[-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56]],[171,[172,24000,0.5208,[2,0.9254901960784314,0.9254901960784314,0.9254901960784314,0.62499975],[2,0.8862745098039215,0.8823529411764706,0.8745098039215686,1],[2,0.2,0.5,0.8,0.5208]],[173,true,1,-0.1,[4,419430400],[0,2048,2048]],[174,1,true,321,322],[175],[176]]],[123,"Shadow","07tltDrYBGWrjZE0AsGYMt",2,[-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111],[1,216.046,0,-105.669]],[20,512,{},2,[19,"b5oNNtYhlNdKS3ovIvQIpk",-118,[70,"edCir7QmBJ25ZK4Rs2Q2HO",null,[[40,[2,["b5oNNtYhlNdKS3ovIvQIpk"]],[-113,-114,-115,-116,-117]]],[[36,[2,["b5oNNtYhlNdKS3ovIvQIpk"]],[[85,false,-112]]]],[[14,"VirtualControl",["_name"],[2,["b5oNNtYhlNdKS3ovIvQIpk"]]],[16,["_lpos"],[2,["b5oNNtYhlNdKS3ovIvQIpk"]],[1,480,320,0]],[16,["_lrot"],[2,["b5oNNtYhlNdKS3ovIvQIpk"]],[3,0,0,0,1]],[16,["_euler"],[2,["b5oNNtYhlNdKS3ovIvQIpk"]],[1,0,0,0]],[14,false,["_enabled"],[2,["cbB/e+r3RNvqdpaa/KgHu3"]]],[16,["_contentSize"],[2,["0dngp/9gNO34wUQjZfN/CX"]],[5,960,640]],[14,false,["_active"],[2,["e7g1nMUgZNKYmKdPjKKCXZ"]]],[110,["_cameraComponent"],[2,["3f2oTdCepERZdpmIfLsrhd"]]],[14,true,["_active"],[2,["b5oNNtYhlNdKS3ovIvQIpk"]]],[14,false,["_active"],[2,["6fWzrcHnhGL4efjJVNWfi6"]]],[14,false,["_active"],[2,["c2TaXI5XpIr5Yyg6W/o1kK"]]]]],1]],[20,512,null,2,[19,"b09eXCKoZVi4NdvSf8rvKn",-132,[70,"77rjOwPK1HxbkbJwX0PEXT",null,[[40,[2,["b09eXCKoZVi4NdvSf8rvKn"]],[-130,-131]]],[[111,[2,["b09eXCKoZVi4NdvSf8rvKn"]],[[-126,-127,[104,0.4,0.6,-128,[1,0,0.7,0],46],[85,false,-129]],1,1,4,4]]],[[14,"Customer",["_name"],[2,["b09eXCKoZVi4NdvSf8rvKn"]]],[16,["_lpos"],[2,["b09eXCKoZVi4NdvSf8rvKn"]],[1,200,0,-65]],[16,["_lrot"],[2,["b09eXCKoZVi4NdvSf8rvKn"]],[3,0,1,0,6.123233995736766e-17]],[16,["_euler"],[2,["b09eXCKoZVi4NdvSf8rvKn"]],[1,0,180,0]],[9,["_materials","0"],[2,["c3fCo524FYPZDkdit3utZy"]],47],[39,["_skinningRoot"],[2,["c3fCo524FYPZDkdit3utZy"]],-119],[9,["_materials","1"],[2,["c3fCo524FYPZDkdit3utZy"]],48],[9,["_materials","0"],[2,["70mDITEItWjJLA0t1DwhlL"]],49],[39,["_skinningRoot"],[2,["70mDITEItWjJLA0t1DwhlL"]],-120],[9,["_materials","0"],[2,["f9zmQ9GoJdsIoJiiBqdntk"]],50],[39,["_skinningRoot"],[2,["f9zmQ9GoJdsIoJiiBqdntk"]],-121],[9,["_materials","0"],[2,["14KXL7E+RUf5Ddpq2DRzCq"]],51],[39,["_skinningRoot"],[2,["14KXL7E+RUf5Ddpq2DRzCq"]],-122],[9,["_materials","0"],[2,["61gQp+KEhVGaJVm1kqlzAh"]],52],[39,["_skinningRoot"],[2,["61gQp+KEhVGaJVm1kqlzAh"]],-123],[7,["_lscale"],-124,[1,3.3,3.3,3.3]],[14,4,["_clips","length"],[2,["afyJr8fMBShZ+C9ndjwHor"]]],[9,["_clips","5"],[2,["afyJr8fMBShZ+C9ndjwHor"]],53],[110,["_defaultClip"],[2,["afyJr8fMBShZ+C9ndjwHor"]]],[9,["_clips","6"],[2,["afyJr8fMBShZ+C9ndjwHor"]],54],[9,["_clips","7"],[2,["afyJr8fMBShZ+C9ndjwHor"]],55],[14,true,["playOnLoad"],[2,["afyJr8fMBShZ+C9ndjwHor"]]],[9,["_clips","8"],[2,["afyJr8fMBShZ+C9ndjwHor"]],56],[9,["_clips","9"],[2,["afyJr8fMBShZ+C9ndjwHor"]],57],[14,1,["_shadowCastingMode"],[2,["c3fCo524FYPZDkdit3utZy"]]],[9,["_clips","0"],[2,["afyJr8fMBShZ+C9ndjwHor"]],58],[9,["_clips","1"],[2,["afyJr8fMBShZ+C9ndjwHor"]],59],[9,["_clips","2"],[2,["afyJr8fMBShZ+C9ndjwHor"]],60],[9,["_clips","3"],[2,["afyJr8fMBShZ+C9ndjwHor"]],61],[9,["_clips","4"],[2,["afyJr8fMBShZ+C9ndjwHor"]],62],[14,false,["_useBakedAnimation"],[2,["afyJr8fMBShZ+C9ndjwHor"]]],[13,true,["_active"],-125]]],0]],[20,512,null,2,[19,"b09eXCKoZVi4NdvSf8rvKn",-145,[108,"41rhh134RPJZu9VieDzVAB",[[177,[2,["b09eXCKoZVi4NdvSf8rvKn"]],[[92,"Target",512,-144,[1,0,1.409,0]]]]],[[111,[2,["b09eXCKoZVi4NdvSf8rvKn"]],[[-140,-141,[104,0.4,0.6,-142,[1,0,0.7,0],64],[85,false,-143]],1,1,4,4]]],[[14,"Customer_UBA",["_name"],[2,["b09eXCKoZVi4NdvSf8rvKn"]]],[16,["_lpos"],[2,["b09eXCKoZVi4NdvSf8rvKn"]],[1,200,0,-65]],[16,["_lrot"],[2,["b09eXCKoZVi4NdvSf8rvKn"]],[3,0,1,0,6.123233995736766e-17]],[16,["_euler"],[2,["b09eXCKoZVi4NdvSf8rvKn"]],[1,0,180,0]],[9,["_materials","0"],[2,["c3fCo524FYPZDkdit3utZy"]],65],[39,["_skinningRoot"],[2,["c3fCo524FYPZDkdit3utZy"]],-133],[9,["_materials","1"],[2,["c3fCo524FYPZDkdit3utZy"]],66],[9,["_materials","0"],[2,["70mDITEItWjJLA0t1DwhlL"]],67],[39,["_skinningRoot"],[2,["70mDITEItWjJLA0t1DwhlL"]],-134],[9,["_materials","0"],[2,["f9zmQ9GoJdsIoJiiBqdntk"]],68],[39,["_skinningRoot"],[2,["f9zmQ9GoJdsIoJiiBqdntk"]],-135],[9,["_materials","0"],[2,["14KXL7E+RUf5Ddpq2DRzCq"]],69],[39,["_skinningRoot"],[2,["14KXL7E+RUf5Ddpq2DRzCq"]],-136],[9,["_materials","0"],[2,["61gQp+KEhVGaJVm1kqlzAh"]],70],[39,["_skinningRoot"],[2,["61gQp+KEhVGaJVm1kqlzAh"]],-137],[7,["_lscale"],-138,[1,3.3,3.3,3.3]],[14,4,["_clips","length"],[2,["afyJr8fMBShZ+C9ndjwHor"]]],[9,["_clips","5"],[2,["afyJr8fMBShZ+C9ndjwHor"]],71],[14,null,["_defaultClip"],[2,["afyJr8fMBShZ+C9ndjwHor"]]],[9,["_clips","6"],[2,["afyJr8fMBShZ+C9ndjwHor"]],72],[9,["_clips","7"],[2,["afyJr8fMBShZ+C9ndjwHor"]],73],[14,true,["playOnLoad"],[2,["afyJr8fMBShZ+C9ndjwHor"]]],[9,["_clips","8"],[2,["afyJr8fMBShZ+C9ndjwHor"]],74],[9,["_clips","9"],[2,["afyJr8fMBShZ+C9ndjwHor"]],75],[14,1,["_shadowCastingMode"],[2,["c3fCo524FYPZDkdit3utZy"]]],[9,["_clips","0"],[2,["afyJr8fMBShZ+C9ndjwHor"]],76],[9,["_clips","1"],[2,["afyJr8fMBShZ+C9ndjwHor"]],77],[9,["_clips","2"],[2,["afyJr8fMBShZ+C9ndjwHor"]],78],[9,["_clips","3"],[2,["afyJr8fMBShZ+C9ndjwHor"]],79],[9,["_clips","4"],[2,["afyJr8fMBShZ+C9ndjwHor"]],80],[14,true,["_useBakedAnimation"],[2,["afyJr8fMBShZ+C9ndjwHor"]]],[13,false,["_active"],-139]]],63]],[20,512,{},2,[19,"ccbZF4f69Vn4Z+6EM/qX/b",-181,[108,"9afnVi8cFHgLykGyXp9J+u",[[40,[2,["ccbZF4f69Vn4Z+6EM/qX/b"]],[-180]]],[[36,[2,["ccbZF4f69Vn4Z+6EM/qX/b"]],[[106,false,-178,84],[155,-179,[1,0,0.5,0],85]]]],[[13,"Dancer",["_name"],-146],[7,["_lpos"],-147,[1,243.018,0.573,-127.315]],[7,["_lrot"],-148,[3,0,-0.7138679473379004,0,0.7002803394095629]],[7,["_euler"],-149,[1,0,-91.101,0]],[7,["_lscale"],-150,[1,3,3,3]],[18,["_clips","0"],-151,86],[18,["_defaultClip"],-152,87],[13,true,["playOnLoad"],-153],[13,true,["_useBakedAnimation"],-154],[13,1,["_shadowCastingMode"],-155],[48,["_skinningRoot"],-157,-156],[13,1,["_shadowCastingMode"],-158],[48,["_skinningRoot"],-160,-159],[13,1,["_shadowCastingMode"],-161],[48,["_skinningRoot"],-163,-162],[13,1,["_shadowCastingMode"],-164],[48,["_skinningRoot"],-166,-165],[13,1,["_shadowCastingMode"],-167],[48,["_skinningRoot"],-169,-168],[13,1,["_shadowCastingMode"],-170],[48,["_skinningRoot"],-172,-171],[13,1,["_shadowCastingMode"],-173],[48,["_skinningRoot"],-175,-174],[13,2,["_clips","length"],-176],[18,["_clips","1"],-177,88]]],81]],[20,0,{},2,[19,"45pjvhPQlOQ5i3RtTESUF5",-190,[70,"68wSlmw4RD+oc2KM0UOZja",null,[[40,[2,["d6kQ8ZjtZIvJh7ar10dIK1","26pr7CrUVQQqc7iSlbd9UL"]],[-184,-185]],[40,[2,["45pjvhPQlOQ5i3RtTESUF5"]],[-186,-187,-188,-189]]],[[36,[2,["faaGMr3lZFboYN+YoUhFv+","23+eXbIoNVc5Dwg5KiRjlo"]],[[59,[1,3,3,1],284]]],[36,[2,["e0heKK/FJJsYtGIYUjnl40","99I0xuPChdTYZYmGnJGIHU"]],[[153,[1,-0.3,0,1],[1,1.5,4.5,1],285],[156,[1,-0.5,-2,1],286],[157,0.6,[1,-0.5,2,1],287],[158,0.5,[1,0.6,-1.3,1],288]]]],[[14,"Table_Chair",["_name"],[2,["45pjvhPQlOQ5i3RtTESUF5"]]],[16,["_lpos"],[2,["45pjvhPQlOQ5i3RtTESUF5"]],[1,199.385,0,-132.658]],[16,["_lrot"],[2,["45pjvhPQlOQ5i3RtTESUF5"]],[3,0,0.7953359659738758,0,0.6061688718735087]],[16,["_euler"],[2,["45pjvhPQlOQ5i3RtTESUF5"]],[1,0,105.37400000000004,0]],[16,["_lpos"],[2,["e0heKK/FJJsYtGIYUjnl40","99I0xuPChdTYZYmGnJGIHU"]],[1,12.451,0,-2.131]],[16,["_lrot"],[2,["e0heKK/FJJsYtGIYUjnl40","99I0xuPChdTYZYmGnJGIHU"]],[3,0.014247114618621918,-0.706963237887971,-0.7069632378879709,-0.01424711461862192]],[7,["_euler"],-182,[1,-90,-182.309,0]],[16,["_lpos"],[2,["d6kQ8ZjtZIvJh7ar10dIK1","a77/qrHadbiphyZscO6UfQ"]],[1,0.751,1.012,-0.144]],[14,true,["_active"],[2,["faaGMr3lZFboYN+YoUhFv+","23+eXbIoNVc5Dwg5KiRjlo"]]],[14,false,["_active"],[2,["f2AK3Rk2VEv4myAlzwiXBe","0e4mXNjKJcP512XmSuo2DT"]]],[14,true,["_active"],[2,["faaGMr3lZFboYN+YoUhFv+","37yqt8h/9ed5B9SL01MGnw"]]],[14,false,["_active"],[2,["8aLlnLYNdGrqkWWHBJ/d/r","0e4mXNjKJcP512XmSuo2DT"]]],[16,["_lpos"],[2,["faaGMr3lZFboYN+YoUhFv+","37yqt8h/9ed5B9SL01MGnw"]],[1,-1.935,0,0.75]],[14,false,["_active"],[2,["194vF2HL9NK7Z5KzKbZ6/d","e9twxsf1BRVqEWKJ2ocm2D"]]],[9,["_materials","4"],[2,["e0heKK/FJJsYtGIYUjnl40","98O7QBfsdQaKAjFqYptEc5"]],289],[16,["_lscale"],[2,["e0heKK/FJJsYtGIYUjnl40","1dLZH8EpNcUKQWkIakvaE1"]],[1,1.5,1.5,1.4999999999999996]],[7,["_lscale"],-183,[1,1,1,0.7]]]],269]],[76,"isEnter_Web_Cayenne",512,false,33554432,4,[-193,-194,-195,-196],[[86,"pageView-horizontal<UITransform>",-191,[5,500,400]],[113,"pageView-horizontal<Sprite>",1,0,-192,18]],[1,0.75,0.75,1]],[93,"Mention",512,33554432,4,[-199,-200,-201,-202],[[86,"pageView-horizontal<UITransform>",-197,[5,1000,800]],[178,"pageView-horizontal<Sprite>",1,0,-198]],[1,1,0.88,1]],[76,"isDance",512,false,33554432,4,[-205,-206,-207,-208],[[86,"pageView-horizontal<UITransform>",-203,[5,500,400]],[113,"pageView-horizontal<Sprite>",1,0,-204,45]],[1,0.75,0.75,1]],[124,"Chairs",512,"523255YoRMb4RH1BKiu1cL",2,[-209,-210,-211,-212,-213,-214],[1,195.387,1.113,-98.527]],[125,"Button",512,33554432,[-219],[[22,-215,[5,40,40]],[49,1,0,-216,3],[50,2,-218,[[37,"7f5430jupZHI7dZB76XWDDm","Web_Cayenne_Close",4]],[4,4292269782],-217,4,5,6,7]],[1,390,190,0],[3,0,0,0.38183552768457185,0.9242302904567911],[1,1.2495266594113328,1.2495266594113328,1],[1,0,0,44.89485179806824]],[66,"Button_true",512,33554432,9,[-224],[[22,-220,[5,100,40]],[49,1,0,-221,8],[50,2,-223,[[37,"7f5430jupZHI7dZB76XWDDm","Web_Cayenne_Open",4]],[4,4292269782],-222,9,10,11,12]],[1,-100,-100,0]],[66,"Button_false",512,33554432,9,[-229],[[22,-225,[5,100,40]],[49,1,0,-226,13],[50,2,-228,[[37,"7f5430jupZHI7dZB76XWDDm","Web_Cayenne_mention_back",4]],[4,4292269782],-227,14,15,16,17]],[1,100,-100,0]],[126,"Button_fake",false,33554432,10,[-234],[[22,-230,[5,100,40]],[49,1,0,-231,20],[182,false,2,-233,[4,4292269782],-232,21,22,23,24]],[1,0,-100,0]],[127,"Button_c",33554432,10,[-239],[[22,-235,[5,100,40]],[179,1,0,-236,[4,10526880],25],[50,2,-238,[[37,"7f5430jupZHI7dZB76XWDDm","BGM_for_ios",4]],[4,4292269782],-237,26,27,28,29]],[1,0,0,2],[1,10,20.000000000000004,0.9999999999999999]],[128,"Button",33554432,10,[-244],[[22,-240,[5,100,40]],[49,1,0,-241,30],[50,2,-243,[[37,"7f5430jupZHI7dZB76XWDDm","Enter_Game",4]],[4,4292269782],-242,31,32,33,34]],[1,0,-100,0]],[66,"Button_true",512,33554432,11,[-249],[[22,-245,[5,100,40]],[49,1,0,-246,35],[50,2,-248,[[37,"7f5430jupZHI7dZB76XWDDm","Dance_accept",4]],[4,4292269782],-247,36,37,38,39]],[1,-100,-100,0]],[66,"Button_false",512,33554432,11,[-254],[[22,-250,[5,100,40]],[49,1,0,-251,40],[50,2,-253,[[37,"7f5430jupZHI7dZB76XWDDm","Dance_refuse",4]],[4,4292269782],-252,41,42,43,44]],[1,100,-100,0]],[2,["11SsLMqbtaTb5fjCAh56K2"]],[2,["c2ZYi1RLtUULrfguAP26B/"]],[76,"Web_Cayenne",512,false,33554432,4,[-257,13],[[22,-255,[5,700,380]],[184,"https://1000ride.cn/cocos/Shopping/car_webpage/Cayenne",-256]],[1,0.8,0.8,1]],[93,"Sprite",512,33554432,23,[-260,-261],[[22,-258,[5,608,682]],[180,-259,2]],[1,1.5000000000000002,0.7500000000000001,1]],[2,["ccbZF4f69Vn4Z+6EM/qX/b"]],[20,512,{},2,[19,"56h8lGGPFQU53Ba9Dor6fB",-270,[164,"3deFd4a+FPtYWcTQ2dUAUl",[[40,[2,["56h8lGGPFQU53Ba9Dor6fB"]],[-269]]],[[36,[2,["56h8lGGPFQU53Ba9Dor6fB"]],[[106,false,-268,92]]]],[[13,"SR_Girl_Cayenne",["_name"],-262],[7,["_lpos"],-263,[1,223.784,0,-74.036]],[7,["_lrot"],-264,[3,0,-0.4935396617093893,0,0.8697232906619102]],[7,["_euler"],-265,[1,0,-59.147,0]],[13,2,["_clips","length"],22],[18,["_clips","3"],22,93],[18,["_defaultClip"],22,94],[18,["_clips","1"],22,95],[18,["_clips","2"],22,96],[18,["_clips","0"],22,97],[7,["_size"],-266,[1,1,1,1.5]],[7,["_center"],-267,[1,0,0,1.5]],[16,["_center"],[2,["a10Bvh9tBOy7I9EOug2MyA"]],[1,0,1,0]]],[[2,["c3ntpgnzlLBo35Ks07FzHS"]]]],89]],[2,["56h8lGGPFQU53Ba9Dor6fB"]],[2,["c2ZYi1RLtUULrfguAP26B/"]],[2,["674sTBPE5UM7fkObMCzKlN"]],[2,["caxXq8+tNTma0FYIbh+EOA"]],[20,512,{},2,[19,"dc4v0ihnhZmY6h3UJiW8SB",-273,[165,"6exXIU+TtH5pIKFCVijP2x",[[36,[2,["dc4v0ihnhZmY6h3UJiW8SB"]],[[33,-271,[1,2.2,2,5],116],[160,true,false,-272]]]],[[14,"Blue_SUV",["_name"],[2,["dc4v0ihnhZmY6h3UJiW8SB"]]],[16,["_lpos"],[2,["dc4v0ihnhZmY6h3UJiW8SB"]],[1,214.621,0,-92.077]],[16,["_lrot"],[2,["dc4v0ihnhZmY6h3UJiW8SB"]],[3,0,-0.5143422471580423,0,0.857585011989141]],[16,["_euler"],[2,["dc4v0ihnhZmY6h3UJiW8SB"]],[1,0,-61.907,0]],[14,true,["_active"],[2,["06FHVIDzBfypQYfv46jw5i"]]],[9,["_materials","0"],[2,["99o34CYdtcEJjK9aG8Aem1"]],117]]],115]],[20,512,null,2,[19,"deGe0G1/dbhpH6uO2Ukkx3",-282,[70,"c3zEkFO1dHEYxkUEwYmD8y",null,[[40,[2,["deGe0G1/dbhpH6uO2Ukkx3"]],[-278]],[40,[2,["b3exWRLoNbOZIkH9ADpcb3"]],[-279,-280]],[40,[2,["daaNTi75lQPaPCnRhDr8MW"]],[-281]]],[[36,[2,["76tbWJ1mlbjK57B/zTeas4"]],[[185,-276]]],[36,[2,["adqrGqT09c6pfsLWWij59o"]],[[59,[1,1.356,1,13.795],134]]],[36,[2,["17gLlpSOFbQZr1y76QdeiA"]],[[59,[1,1.273,1.422,9.606],135]]],[36,[2,["49pOyMbABWKLiIvQGp+6yd"]],[[59,[1,1.306,2.082,11.995],136]]],[36,[2,["deGe0G1/dbhpH6uO2Ukkx3"]],[[161,true,-277,137]]]],[[14,"VirtualShop",["_name"],[2,["deGe0G1/dbhpH6uO2Ukkx3"]]],[16,["_lpos"],[2,["deGe0G1/dbhpH6uO2Ukkx3"]],[1,221.343,0.05,-99.989]],[16,["_lrot"],[2,["deGe0G1/dbhpH6uO2Ukkx3"]],[3,0,0,0,1]],[16,["_euler"],[2,["deGe0G1/dbhpH6uO2Ukkx3"]],[1,0,0,0]],[16,["_lscale"],[2,["deGe0G1/dbhpH6uO2Ukkx3"]],[1,3,3,3]],[14,false,["_active"],[2,["52CWBJJoddZ49IL0MFFK7I"]]],[14,true,["_active"],[2,["76tbWJ1mlbjK57B/zTeas4"]]],[9,["_materials","0"],[2,["3fknMIquBT/4lJ/EQ6SnVp"]],138],[14,1,["_shadowReceivingMode"],[2,["5emJEceWlQob/DkjlmOy0U"]]],[14,true,["_active"],[2,["bcMvjf0X1UVZJvhRsKOrN9"]]],[14,true,["_active"],[2,["deGe0G1/dbhpH6uO2Ukkx3"]]],[14,true,["_active"],[2,["b55YFGLKpYNr+G99FncsvO"]]],[9,["_materials","0"],[2,["52DJbrgyVXIpRDXlseUI60"]],139],[9,["_materials","0"],[2,["dbb0xL2Rxe2qLDCBrcByUj"]],140],[9,["_materials","0"],[2,["f7fGr5zgReyL0Ym4SU3J8T"]],141],[9,["_materials","0"],[2,["aeOkOYBjJZVYNytJMuzORU"]],142],[9,["_materials","0"],[2,["db5g9EdE9bIJiRYvnTOFT7"]],143],[9,["_materials","0"],[2,["f89moNIIdV/JIx4tVOoryS"]],144],[14,true,["_active"],[2,["b3exWRLoNbOZIkH9ADpcb3"]]],[14,true,["_active"],[2,["64E9/wwixY0bTGTBGjtJ6I"]]],[14,true,["_active"],[2,["d6JnDRUSFVW4+pT3sRxjd6"]]],[14,true,["_active"],[2,["17gLlpSOFbQZr1y76QdeiA"]]],[9,["_materials","0"],[2,["a192J9FdJeUJEaLA4RiHU2"]],145],[9,["_materials","0"],[2,["208wLVU3hdcIxV6htp65mo"]],146],[9,["_materials","0"],[2,["43xrtpUhNQbZWrxcicgKK4"]],147],[9,["_materials","0"],[2,["5emJEceWlQob/DkjlmOy0U"]],148],[9,["_materials","0"],[2,["39t/lgtmxZiosZh9W8QUtC"]],149],[9,["_materials","0"],[2,["f7lpVrTfxfuJJX3WH9vuiK"]],150],[13,true,["_active"],-274],[9,["_materials","0"],[2,["d8xqeIy9FS5a1B/7fIgIDO"]],151],[9,["_materials","0"],[2,["e81T5fgqRZdaURFJtzj4io"]],152],[7,["_lscale"],-275,[1,1.02,1,1]],[14,true,["_active"],[2,["77tinOVVRWIYpgFI8BJ5iG"]]]]],127]],[2,["26pr7CrUVQQqc7iSlbd9UL"]],[2,["d20Pnmu+BdMJlZetVDAqli"]],[2,["c0lZvWBDhV9K6p8cnCHiNZ"]],[2,["55CCRCdlFdAKOL7F/fn9y5"]],[2,["55CCRCdlFdAKOL7F/fn9y5"]],[2,["55CCRCdlFdAKOL7F/fn9y5"]],[2,["55CCRCdlFdAKOL7F/fn9y5"]],[2,["55CCRCdlFdAKOL7F/fn9y5"]],[2,["55CCRCdlFdAKOL7F/fn9y5"]],[129,"Sprite",33554432,10,[-285],[[22,-283,[5,500,400]],[181,0,-284,19]],[1,0.75,0.75,1]],[2,["56h8lGGPFQU53Ba9Dor6fB"]],[2,["c2ZYi1RLtUULrfguAP26B/"]],[2,["56h8lGGPFQU53Ba9Dor6fB"]],[2,["bap47oI4BSfJ5H3d8qViCd"]],[2,["caxXq8+tNTma0FYIbh+EOA"]],[2,["dc4v0ihnhZmY6h3UJiW8SB"]],[130,"DancePlace",512,"74BFJ7bXxEE5I/k2aDEvT5",2,[-286,-287,-288]],[67,"Ditai",512,49,[[149,"Cube<ModelComponent>",0,-289,[123],[151,true],124],[154,true,-290,[1,0,0,0.3],125],[162,true,false,-291,126]],[1,247.461,0.287,-127.437],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,15.441,0.561,15.275],[1,0,-89.99999999999999,0]],[2,["9aHHfOVMdT7qPax9QpzJnz"]],[2,["9aHHfOVMdT7qPax9QpzJnz"]],[2,["77SLfwXEdV4ZwWE2C50LmH"]],[2,["62UUom7AtawbKsHADMP1H0"]],[2,["b4LaABy4NZ35MU24zjNTh1"]],[143,"Main Camera","c9DMICJLFO5IeO07EPon7U",2,[-292,-293],[1,0.23300000000000054,6.3260000000000005,13.983000000000002],[3,-0.126078620072519,0.25660481229257065,0.03378266443126181,0.9576621969425487],[1,-14.999999999999993,29.999999999999996,1.5902773407317584e-15]],[186,true,true,2,2,2,20,false,5,56,[0,1,15],[1,2,120,0]],[187,11,"idle1122","walking1122","walking1122",5,57],[189,"label123123132131\n2321312312",0,0,50,50,[4,4278848240]],[146,"Label",512,false,33554432,4,[[[22,-294,[5,439.33,90.4]],59],4,1],[1,-85.939,201.62,0]],[77,"Label",512,33554432,24,[[22,-295,[5,0,50.4]],[63,"",20,20,-296]],[1,-5.684341886080802e-14,290,0],[1,0.625,1.3333333333333333,1]],[77,"Label-001",512,33554432,24,[[22,-297,[5,81.12,50.4]],[63,"SUV介绍",20,20,-298]],[1,0,-290,0],[1,0.5,1,1]],[43,"Label",512,33554432,13,[[22,-299,[5,100,40]],[54,"",20,20,1,false,-300]]],[43,"Label",512,33554432,14,[[22,-301,[5,100,40]],[54,"是",20,20,1,false,-302]]],[43,"Label",512,33554432,15,[[22,-303,[5,100,40]],[54,"否",20,20,1,false,-304]]],[68,"RichText",512,33554432,9,[[22,-305,[5,226.4,50.4]],[116,"是否浏览SUV详情页",25,-306]],[1,0,10,0]],[68,"Label",512,33554432,9,[[22,-307,[5,40,50.4]],[63,"提示",20,20,-308]],[1,0,150,0]],[77,"Label",512,33554432,42,[[22,-309,[5,445.85,290.4]],[63,"元宇宙车行操作指南\n\n\n1.左边遥摇杆控制人物移动。\n2.点击和滑动屏幕控制人物视角和方向。\n\n",25,25,-310]],[1,0,40,0],[1,0.8,1,1]],[43,"Label",512,33554432,16,[[22,-311,[5,100,40]],[115,"请等待5秒",20,20,1,false,-312,[4,4288716960]]]],[43,"Label",512,33554432,17,[[22,-313,[5,100,40]],[115,"button",20,20,1,false,-314,[4,4278190080]]]],[43,"Label",512,33554432,18,[[22,-315,[5,100,40]],[54,"  开始探索吧！",15,15,1,false,-316]]],[43,"Label",512,33554432,19,[[22,-317,[5,100,40]],[54,"好！",20,20,1,false,-318]]],[43,"Label",512,33554432,20,[[22,-319,[5,100,40]],[54,"不了",20,20,1,false,-320]]],[68,"RichText",512,33554432,11,[[22,-321,[5,225,50.4]],[116,"嘿，一起来跳舞吧！",25,-322]],[1,0,10,0]],[68,"Label",512,33554432,11,[[22,-323,[5,40,50.4]],[63,"邀请",20,20,-324]],[1,0,150,0]],[188,11,"idle1122","walking1122","walking1122",6,57,59,[190]],[131,"Node",512,7,[[117,"新晋车主",-325,82],[99,-326,[83],[3]]],[1,0,1.821,0],[1,0.316,0.316,0.316]],[17,"Node-004",26,[[117,"销售顾问",-327,90],[99,-328,[91],[3]]],[1,0,1.889,0],[3,0,-0.008770167059933153,0,0.9999615413453363],[1,0.31,0.31,0.31],[1,0,-1.005,0]],[20,512,{},2,[19,"56h8lGGPFQU53Ba9Dor6fB",-329,[31,"c68Dg1n5JGMq+Lr/q88qY1",[[13,"SR_Girl",["_name"],27],[7,["_lpos"],27,[1,212.662,0,-115.352]],[7,["_lrot"],27,[3,0,-0.7071067811865475,0,0.7071067811865476]],[7,["_euler"],27,[1,0,-90,0]],[13,2,["_clips","length"],44],[18,["_clips","0"],44,99],[18,["_clips","1"],44,100],[18,["_defaultClip"],44,101],[13,false,["_active"],27]]],98]],[20,0,{},2,[19,"56h8lGGPFQU53Ba9Dor6fB",-332,[31,"caOdg4W+tHWbrDCR08uCxQ",[[13,"Counsellor_Girl",["_name"],45],[7,["_lpos"],45,[1,241,0,-84.2]],[7,["_lrot"],45,[3,0,-0.7071067811865475,0,0.7071067811865476]],[7,["_euler"],45,[1,0,-90,0]],[13,2,["_clips","length"],28],[18,["_clips","0"],28,103],[18,["_clips","1"],28,104],[18,["_defaultClip"],28,105],[18,["_clips","2"],28,106],[7,["_center"],-330,[1,0,0,2]],[7,["_size"],-331,[1,1.5,1,1]],[9,["_clip"],[2,["9cv3SLM4lGBo6t9sUb2RRh"]],107]]],102]],[20,512,{},2,[19,"bap47oI4BSfJ5H3d8qViCd",-337,[31,"a5T8q5N8FOv5oIgMNu3N2W",[[13,"Counsellor_Terry",["_name"],46],[7,["_lpos"],46,[1,241.5,0,-76]],[7,["_lrot"],46,[3,0,-0.7071067811865475,0,0.7071067811865476]],[7,["_euler"],46,[1,0,-90,0]],[13,2,["_clips","length"],29],[13,null,["_clips","2"],29],[18,["_clips","1"],29,109],[18,["_clips","0"],29,110],[18,["_defaultClip"],29,111],[7,["_center"],-333,[1,0,0,2]],[7,["_size"],-334,[1,1.5,1,1]],[13,false,["_active"],-335],[7,["_lscale"],-336,[1,0.405,0.405,0.405]]]],108]],[20,512,{},2,[19,"caxXq8+tNTma0FYIbh+EOA",-338,[109,"a1dYx9DUNPZ4Qk4J46gBrK",[[13,"Matallic_Grey_C-Class",["_name"],47],[7,["_lpos"],47,[1,214.451,1.96,-107.556]],[7,["_lrot"],47,[3,0,0.4948293786054299,0,-0.8689901530333725]],[7,["_euler"],47,[1,0,300.683,0]]],[[2,["d08LuiK85DuYGY5mDu4a8v"]]]],112]],[20,0,{},2,[19,"caxXq8+tNTma0FYIbh+EOA",-339,[31,"9dHwbWwM5Kirdp1O7Jn3lb",[[13,"Red_C-Class",["_name"],30],[7,["_lpos"],30,[1,210,17,-122]],[7,["_lrot"],30,[3,0,0.7071067811865475,0,0.7071067811865476]],[7,["_euler"],30,[1,0,90,0]],[9,["_clip"],[2,["92iXdI2pJAdZmXLGubO0m3"]],114],[14,true,["_active"],[2,["a6zETpiE9aV4iED9TZ7+ba"]]],[13,false,["_active"],30]]],113]],[20,512,{},2,[19,"dc4v0ihnhZmY6h3UJiW8SB",-340,[109,"78Ex9GsnJGir2JktIBvj+4",[[13,"Black_SUV",["_name"],48],[7,["_lpos"],48,[1,216.411,0,-76.471]],[7,["_lrot"],48,[3,0,-0.5143422471580423,0,0.857585011989141]],[7,["_euler"],48,[1,0,-61.907,0]]],[[2,["09w3FNIDlDU6JAuriHoExO"]]]],118]],[132,"Floor-Collider","4f2cSLyhhIEoTUALYBMpKY",2,[[21,"Cube<ModelComponent>",-341,[153],[3],154],[33,-342,[1,244.276,1,217.708],155]],[1,231.32,-0.524,-89.096]],[17,"Cube",1,[[27,"Cube<ModelComponent>",false,-343,[156],[3],157],[29,-344,158]],[1,215.173,3.545,-144.661],[3,0.23565099843639653,0,0,0.9718377472273494],[1,7.941,1,16.394],[1,27.26,0,0]],[94,"Cube-001",1,[[27,"Cube<ModelComponent>",false,-345,[159],[3],160],[29,-346,161]],[1,222.014,7.121,-154.655],[1,22.494,1,6.258]],[17,"Cube-002",1,[[27,"Cube<ModelComponent>",false,-347,[162],[3],163],[29,-348,164]],[1,227.561,11.008,-144.736],[3,-0.23514211310259003,0,0,0.9719610005785462],[1,7.941,1,16.394],[1,-27.2,0,0]],[94,"Cube-003",1,[[27,"Cube<ModelComponent>",false,-349,[165],[3],166],[29,-350,167]],[1,222.014,14.722,-122.965],[1,63.856,1,29.213]],[17,"Cube-004",1,[[27,"Cube<ModelComponent>",false,-351,[168],[3],169],[29,-352,170]],[1,222.014,8.764,-156.649],[3,-0.7071067811865475,0,0,0.7071067811865476],[1,22.494,1,6.258],[1,-90,0,0]],[17,"Cube-005",1,[[27,"Cube<ModelComponent>",false,-353,[171],[3],172],[29,-354,173]],[1,221.116,8.418,-151.553],[3,-0.7071067811865475,0,0,0.7071067811865476],[1,6.665,1,6.258],[1,-90,0,0]],[17,"Cube-006",1,[[27,"Cube<ModelComponent>",false,-355,[174],[3],175],[29,-356,176]],[1,217.118,16.812,-137.185],[3,-0.7071067811865475,0,0,0.7071067811865476],[1,14.319,1,6.258],[1,-90,0,0]],[17,"Cube-007",1,[[27,"Cube<ModelComponent>",false,-357,[177],[3],178],[29,-358,179]],[1,219.146,19.457,-110.131],[3,-0.7071067811865475,0,0,0.7071067811865476],[1,69.029,1,8.769],[1,-90,0,0]],[17,"Cube-008",1,[[27,"Cube<ModelComponent>",false,-359,[180],[3],181],[29,-360,182]],[1,219.146,3.5,-60.153],[3,-0.7071067811865475,0,0,0.7071067811865476],[1,69.029,1,8.769],[1,-90,0,0]],[17,"Cube-009",1,[[27,"Cube<ModelComponent>",false,-361,[183],[3],184],[29,-362,185]],[1,221.119,20.554,-156.617],[3,-0.7071067811865475,0,0,0.7071067811865476],[1,63.522,1,50.365],[1,-90,0,0]],[17,"Cube-010",1,[[27,"Cube<ModelComponent>",false,-363,[186],[3],187],[29,-364,188]],[1,248.083,20.554,-107.699],[3,-0.5,0.5,0.4999999999999999,0.5000000000000001],[1,111.318,1,50.365],[1,-90,90,0]],[17,"Cube-011",1,[[27,"Cube<ModelComponent>",false,-365,[189],[3],190],[29,-366,191]],[1,194.615,20.554,-107.699],[3,-0.5,0.5,0.4999999999999999,0.5000000000000001],[1,111.318,1,50.365],[1,-90,90,0]],[17,"Cube-012",1,[[27,"Cube<ModelComponent>",false,-367,[192],[3],193],[29,-368,194]],[1,209.874,16.812,-147.028],[3,-0.5,0.5,0.4999999999999999,0.5000000000000001],[1,20.054,1,6.258],[1,-90,90,0]],[17,"Cube-013",1,[[27,"Cube<ModelComponent>",false,-369,[195],[3],196],[29,-370,197]],[1,232.719,16.812,-147.028],[3,-0.5,0.5,0.4999999999999999,0.5000000000000001],[1,20.054,1,6.258],[1,-90,90,0]],[17,"Cube-014",1,[[27,"Cube<ModelComponent>",false,-371,[198],[3],199],[29,-372,200]],[1,231.518,8.481,-147.028],[3,-0.5,0.5,0.4999999999999999,0.5000000000000001],[1,20.054,1,6.258],[1,-90,90,0]],[17,"Cube-015",1,[[27,"Cube<ModelComponent>",false,-373,[201],[3],202],[33,-374,[1,1,1,2],203]],[1,231.518,11.581,-145.559],[3,-0.6039402327418005,0.6039402327418005,0.3677719337793189,0.36777193377931916],[1,20.054,1,6.258],[1,-90,90,-27.321]],[17,"Cube-016",1,[[27,"Cube<ModelComponent>",false,-375,[204],[3],205],[33,-376,[1,1,1,2],206]],[1,223.904,12.622,-143.541],[3,-0.6039402327418005,0.6039402327418005,0.3677719337793189,0.36777193377931916],[1,16.507,1,6.258],[1,-90,90,-27.321]],[17,"Cube-017",1,[[27,"Cube<ModelComponent>",false,-377,[207],[3],208],[33,-378,[1,1,1,2],209]],[1,218.322,4.139,-144.211],[3,-0.373300790195083,0.373300790195083,0.6005385250254363,0.6005385250254365],[1,16.507,1,6.258],[1,-90,90,26.269]],[17,"Cube-018",1,[[27,"Cube<ModelComponent>",false,-379,[210],[3],211],[29,-380,212]],[1,210.815,4.139,-144.211],[3,-0.373300790195083,0.373300790195083,0.6005385250254363,0.6005385250254365],[1,16.507,1,6.258],[1,-90,90,26.269]],[17,"Cube-019",1,[[27,"Cube<ModelComponent>",false,-381,[213],[3],214],[33,-382,[1,1,1,2],215]],[1,210.809,8.481,-147.028],[3,-0.5,0.5,0.4999999999999999,0.5000000000000001],[1,20.054,1,6.258],[1,-90,90,0]],[17,"Cube-020",1,[[27,"Cube<ModelComponent>",false,-383,[216],[3],217],[29,-384,218]],[1,226.298,1.27,-138.564],[3,-0.7071067811865475,0,0,0.7071067811865476],[1,14.319,1,6.258],[1,-90,0,0]],[20,0,{},8,[19,"26pr7CrUVQQqc7iSlbd9UL",-388,[47,"d6kQ8ZjtZIvJh7ar10dIK1",8,[[13,"Paint_05",["_name"],33],[7,["_lpos"],33,[1,-9.00363502957169,2.215,-5.663702080288957]],[7,["_lrot"],33,[3,0,-0.7953359659738759,0,0.6061688718735084]],[7,["_euler"],33,[1,0,-105.37400000000008,0]],[9,["_materials","0"],[2,["d0n0nkIGVbmoDyTjNhCedw"]],271],[7,["_lpos"],-385,[1,0.751,1.378,0]],[7,["_lscale"],33,[1,1.4999999999999996,1.5,1.4999999999999996]],[7,["_lrot"],-386,[3,-0.5,-0.5,-0.4999999999999999,0.5000000000000001]],[7,["_euler"],-387,[1,-90,-90,0]]]],270]],[2,["a77/qrHadbiphyZscO6UfQ"]],[69,0,8,[19,"37yqt8h/9ed5B9SL01MGnw",-391,[166,"69YshOfu1CK69/b0r7nHGH",null,[[36,[2,["23+eXbIoNVc5Dwg5KiRjlo"]],[[59,[1,3.5,3,1],277]]]],[[14,"Table_03",["_name"],[2,["37yqt8h/9ed5B9SL01MGnw"]]],[16,["_lpos"],[2,["37yqt8h/9ed5B9SL01MGnw"]],[1,-9.524,7.585,15.858]],[16,["_lrot"],[2,["37yqt8h/9ed5B9SL01MGnw"]],[3,0,-0.8280260855902403,0,0.5606895768445354]],[16,["_euler"],[2,["37yqt8h/9ed5B9SL01MGnw"]],[1,0,-111.793,0]],[9,["_materials","0"],[2,["5cdUDAwgZRypXqcN8zjPxm"]],278],[9,["_materials","1"],[2,["5cdUDAwgZRypXqcN8zjPxm"]],279],[9,["_materials","2"],[2,["5cdUDAwgZRypXqcN8zjPxm"]],280],[7,["_lscale"],-389,[1,1.4999999999999996,1.5,1.4999999999999996]],[13,true,["_active"],-390]]],276],[{},"mountedRoot",1,8]],[69,0,8,[19,"d20Pnmu+BdMJlZetVDAqli",-392,[31,"4cZH3F8AZMRqIzrvZIckH1",[[13,"Paint_02",["_name"],34],[7,["_lpos"],34,[1,11.403,3.269,5.858]],[7,["_lrot"],34,[3,0.4253799091912845,0.42537990919128454,0.5648468224717339,0.5648468224717339]],[7,["_euler"],34,[1,0,73.966,90]],[14,null,["_materials","0"],[2,["0bwKvci/VVC4qNNISml1pB"]]],[13,false,["_active"],34]]],281],[{},"mountedRoot",1,8]],[69,0,8,[19,"9aHHfOVMdT7qPax9QpzJnz",-393,[31,"4eRpUxsThDhIQTGIibLJE3",[[13,"Paint_03",["_name"],51],[7,["_lpos"],51,[1,12.106,3.225,2.765]],[7,["_lrot"],51,[3,-0.4309746445460727,0.43805801513413123,-0.5532725631492245,0.5623659858147707]],[7,["_euler"],51,[1,0,75.834,-89.066]],[16,["_lpos"],[2,["39Yx/R27lU5K+R6IjwZTgy"]],[1,0,0,0.029]]]],282],[{},"mountedRoot",1,8]],[69,0,8,[19,"9aHHfOVMdT7qPax9QpzJnz",-394,[31,"67AtC8j6tAl4GtWBDL6IVR",[[13,"Paint_04",["_name"],52],[7,["_lpos"],52,[1,-15.865,3.01,20.253]],[7,["_lrot"],52,[3,0.09243666501669831,0.09243666501669832,-0.7010388455432343,-0.7010388455432344]],[7,["_euler"],52,[1,0,344.977,90]]]],283],[{},"mountedRoot",1,8]],[133,"Coffee","5bEVjpp+FMRJiePiDpb3nh",2,[-395,-396],[1,237.439,4.097,-73.367],[1,3.468,3.468,3.468]],[20,0,null,113,[19,"77SLfwXEdV4ZwWE2C50LmH",-397,[31,"ad7+1OI0BIjpU2sdPPNF7T",[[13,"CoffeeMaker2",["_name"],53],[7,["_lpos"],53,[1,1.013,0,0]],[7,["_lrot"],53,[3,0,0,0,1]],[7,["_euler"],53,[1,0,0,0]],[9,["_materials","0"],[2,["59MHX+FrFSHZ0M0Vqab9HT"]],291],[16,["_lpos"],[2,["f2KhE4XJJbIY1fLraqK15P"]],[1,0,-0.36,0]]]],290]],[20,0,null,113,[19,"c0lZvWBDhV9K6p8cnCHiNZ",-398,[31,"7by+nTFepAIJugWAPODxZF",[[13,"Cup",["_name"],35],[7,["_lpos"],35,[1,0.4478085351787797,-0.36,-0.005478662053054251]],[7,["_lrot"],35,[3,0,0,0,1]],[7,["_euler"],35,[1,0,0,0]],[9,["_materials","0"],[2,["afKd3ahIJa+oOmKGJJwzqc"]],293],[9,["_materials","0"],[2,["f61U+r2dVc/biASOcT8LeV"]],294],[9,["_materials","0"],[2,["33uNNTDYtcjapY0/pwmtgF"]],295],[7,["_lscale"],35,[1,1.037773933102653,1.037773933102653,1.037773933102653]]]],292]],[20,512,null,12,[19,"55CCRCdlFdAKOL7F/fn9y5",-401,[31,"3bImoOM5JFm4CLBxXdf5Cv",[[13,"SDJJA16502",["_name"],36],[7,["_lpos"],36,[1,7.838,-1.113,-27.097]],[7,["_lrot"],36,[3,0,-0.983643856593094,0,0.18012429982283]],[7,["_euler"],36,[1,0,-159.246,0]],[18,["_materials","0"],-399,297],[18,["_materials","1"],-400,298],[7,["_lscale"],36,[1,3.816,3.816,3.816]]]],296]],[20,512,null,12,[19,"55CCRCdlFdAKOL7F/fn9y5",-404,[31,"3bgzAWPFhDB5fkRo0hshFA",[[13,"SDJJA16503",["_name"],37],[7,["_lpos"],37,[1,6.145,-1.113,-35.126]],[7,["_lrot"],37,[3,0,-0.03227425892688634,0,-0.9994790504111231]],[7,["_euler"],37,[1,0,-356.301,0]],[18,["_materials","0"],-402,300],[18,["_materials","1"],-403,301],[7,["_lscale"],37,[1,3.816,3.816,3.816]]]],299]],[20,512,null,12,[19,"55CCRCdlFdAKOL7F/fn9y5",-407,[31,"b8kSQPmxRDMZcIAx6YTVnm",[[13,"SDJJA16504",["_name"],38],[7,["_lpos"],38,[1,2.609,-1.113,-34.13]],[7,["_lrot"],38,[3,0,-0.2694577101021804,0,-0.9630122234252737]],[7,["_euler"],38,[1,0,-328.736,0]],[18,["_materials","0"],-405,303],[18,["_materials","1"],-406,304],[7,["_lscale"],38,[1,3.816,3.816,3.816]]]],302]],[20,512,null,12,[19,"55CCRCdlFdAKOL7F/fn9y5",-410,[31,"36kSUI4otHALNz6r8/Wqjt",[[13,"SDJJA16505",["_name"],39],[7,["_lpos"],39,[1,36.576,14.029,-28.368]],[7,["_lrot"],39,[3,0,-0.2694577101021804,0,-0.9630122234252737]],[7,["_euler"],39,[1,0,-328.736,0]],[18,["_materials","0"],-408,306],[18,["_materials","1"],-409,307],[7,["_lscale"],39,[1,3.816,3.816,3.816]]]],305]],[20,512,null,12,[19,"55CCRCdlFdAKOL7F/fn9y5",-413,[31,"64LD5gsm1K74a/Isfvnb3E",[[13,"SDJJA16506",["_name"],40],[7,["_lpos"],40,[1,40.574,14.029,-29.644]],[7,["_lrot"],40,[3,0,-0.03227425892688634,0,-0.9994790504111231]],[7,["_euler"],40,[1,0,-356.301,0]],[18,["_materials","0"],-411,309],[18,["_materials","1"],-412,310],[7,["_lscale"],40,[1,3.816,3.816,3.816]]]],308]],[20,512,null,12,[19,"55CCRCdlFdAKOL7F/fn9y5",-416,[31,"b6cUmT2tBJP7X+SpYXPBcb",[[13,"SDJJA16507",["_name"],41],[7,["_lpos"],41,[1,41.741,14.029,-19.034]],[7,["_lrot"],41,[3,0,-0.983643856593094,0,0.18012429982283]],[7,["_euler"],41,[1,0,-159.246,0]],[18,["_materials","0"],-414,312],[18,["_materials","1"],-415,313],[7,["_lscale"],41,[1,3.816,3.816,3.816]]]],311]],[20,0,null,2,[19,"b4LaABy4NZ35MU24zjNTh1",-419,[167,"10asQjEWxCdpPwnXEZgcSL",null,[[14,"Consultation_Slogan",["_name"],[2,["b9CO8yFXJcGpitwV6krrIg"]]],[16,["_lpos"],[2,["b9CO8yFXJcGpitwV6krrIg"]],[1,250.55,5,-79]],[16,["_lrot"],[2,["b9CO8yFXJcGpitwV6krrIg"]],[3,0.5,-0.5,0.4999999999999999,0.5000000000000001]],[16,["_euler"],[2,["b9CO8yFXJcGpitwV6krrIg"]],[1,90,-90,0]],[7,["_lscale"],-417,[1,5,0,5]],[13,true,["_active"],-418],[13,false,["lightmapSettings","_bakeable"],54],[13,false,["lightmapSettings","_castShadow"],54],[13,false,["lightmapSettings","_receiveShadow"],54],[13,null,["_mesh"],54],[7,["_lpos"],55,[1,250.55,3,-80.6]],[7,["_lrot"],55,[3,0.5,-0.5,0.4999999999999999,0.5000000000000001]],[7,["_euler"],55,[1,90,-90,0]],[7,["_lscale"],55,[1,5,1,5]],[14,null,["_mesh"],[2,["bdIF6wnFZcT4JPQOwtf7tI"]]],[9,["_materials","0"],[2,["df6muSb6xYKoM/dzsI/MRw"]],315],[14,false,["_active"],[2,["9d4VK+qnhXn4+BOSeKmH3u"]]]]],314]],[95,"Poster_1",512,"beNS4rzA9KjaA5TV2EgxC7",2,[[21,"Plane<ModelComponent>",-420,[318],[3],319],[195,-421,320]],[1,192.1,7,-86],[3,0.5,0.5000000000000001,-0.4999999999999999,0.5000000000000001],[1,1.538,1,0.864],[1,89.99999999999999,90,0]],[191,2000,14,1822425087,56],[92,"Target",512,5,[1,0,1.409,0]],[144,"CheckCamera",5,[-422],[1,0.03,0.961,-0.599],[3,0,1,0,6.123233995736766e-17],[1,0.30303030303030304,0.30303030303030304,0.30303030303030304],[1,0,180,0]],[192,"Camera<CameraComponent>",-0.3,1822425087,126,[4,4286073907]],[118,100,5,[1,0,0,0]],[2,["b09eXCKoZVi4NdvSf8rvKn"]],[134,"TPC","607PZseFVPmpwvxCuRi8ZH",2,[[196,false,-423,[1,0,3,0]]],[1,-7.84,2,0],[3,-0.12607862007251908,0.25660481229257065,0.03378266443126182,0.9576621969425486],[1,-15,30,0]],[118,100,6,[1,0,0,0]],[2,["b09eXCKoZVi4NdvSf8rvKn"]],[2,["8a6I8B/mxcoIyaAidThO7Z"]],[2,["0bav3scb1cxqJBZ/5CzePZ"]],[2,["84dZwlxwpV9YvESZgbEKnO"]],[2,["2emkxMcptc3rqA574cv2BA"]],[2,["1bzIdb1+9foIreo1EKySr+"]],[2,["07TPYgmEFcpJxy4mZ+srEn"]],[2,["90DoioNFhcrKPXVHEH0Vxi"]],[2,["d49BHlK0lNu5D88KCiBZ/1"]],[2,["30itUdW7tKs72wqoGyijVP"]],[2,["856IBSBxhPe7+Rk8McLVDF"]],[2,["d5Ea806uFB9IG0xwXrzOxt"]],[67,"Poster",512,49,[[21,"Plane<ModelComponent>",-424,[119],[3],120]],[1,247.095,4.597,-127.471],[3,0.5,-0.5,0.4999999999999999,0.5000000000000001],[1,1.538,1,0.864],[1,89.99999999999999,-89.99999999999999,0]],[67,"HaibaoBg",512,49,[[21,"Cube<ModelComponent>",-425,[121],[3],122]],[1,247.461,4.597,-127.471],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,15.2,8.534,0.549],[1,0,-89.99999999999999,0]],[67,"Main Light",512,32,[[197,6018,45000.1,true,2,2,1,100,4,-426,[198]]],[1,-0.057,2.444,2.112],[3,-0.0389608858682888,-0.6716138012780065,-0.6303201714410287,0.3874447480348863],[1,0.33333333333333337,0.3333333333333333,0.3333333333333333],[1,-77.005,-140.736,-25.855]],[96,"Plane",[[21,"Plane<ModelComponent>",-427,[128],[3],129]],[1,-9.082,-15.099,-4.953],[3,0,0,-0.7071067811865475,0.7071067811865476],[1,0.03,1,1],[1,0,0,-90]],[135,"Plane-001",[[21,"Plane<ModelComponent>",-428,[130],[3],131]],[1,-9.067,-15.12,-4.953],[1,0.003,1.108,0.904]],[96,"Wall-upfix",[[21,"Plane<ModelComponent>",-429,[132],[3],133]],[1,-5.891,4.573,14.616],[3,0,0,1,6.123233995736766e-17],[1,0.667,1,0.309],[1,0,0,180]],[2,["e8wJKaiN5XW7OuudGbaWYR"]],[44,"Cube-021",1,[[33,-430,[1,2,5,15],219]],[1,222.5,1,-146]],[44,"Cube-022",1,[[33,-431,[1,0.8,5,10],220]],[1,231.5,1,-150]],[44,"Cube-023",1,[[33,-432,[1,30,5,1],221]],[1,235,1,-150]],[44,"Cube-024",1,[[33,-433,[1,20,1,25],222]],[1,243,14.67,-150]],[44,"Cube-025",1,[[33,-434,[1,20,1,25],223]],[1,200,14.67,-150]],[44,"Cube-026",1,[[33,-435,[1,11,10,8],224]],[1,245,14.67,-154.5]],[44,"Cube-027",1,[[33,-436,[1,4,10,6.8],225]],[1,248.9,14.67,-142.9]],[44,"Cube-028",1,[[33,-437,[1,4,10,6.8],226]],[1,248.9,14.67,-112.5]],[17,"Plane",3,[[21,"Plane<ModelComponent>",-438,[227],[3],228]],[1,-24.202,12.719,-2.655],[3,0,0,-0.7071067811865475,0.7071067811865476],[1,0.208,0.208,0.208],[1,0,0,-90]],[17,"Plane-001",3,[[21,"Plane<ModelComponent>",-439,[229],[3],230]],[1,-24.2,12.719,43.902],[3,0.5,0.5,-0.4999999999999999,0.5000000000000001],[1,0.208,0.208,0.208],[1,90,90,0]],[17,"Plane-002",3,[[21,"Plane<ModelComponent>",-440,[231],[3],232]],[1,-23.189,12.719,44.9],[3,-0.49999999999999994,0.5000000000000001,-0.5,0.49999999999999994],[1,0.208,0.208,0.208],[1,90,180,-90]],[17,"Plane-003",3,[[21,"Plane<ModelComponent>",-441,[233],[3],234]],[1,-1.96,12.646,51.771],[3,-0.49999999999999994,0.5000000000000001,-0.5,0.49999999999999994],[1,0.208,0.208,0.208],[1,90,180,-90]],[17,"Plane-004",3,[[21,"Plane<ModelComponent>",-442,[235],[3],236]],[1,33.499,12.716,52.164],[3,4.329780281177466e-17,0.7071067811865476,-0.7071067811865475,4.329780281177467e-17],[1,0.208,0.208,0.208],[1,90,180,0]],[17,"Plane-005",3,[[21,"Plane<ModelComponent>",-443,[237],[3],238]],[1,34.533,12.754,51.178],[3,-0.7071067811865475,0.7071067811865476,-4.329780281177466e-17,4.329780281177467e-17],[1,0.208,0.208,0.208],[1,0,180,-90]],[17,"Plane-006",3,[[21,"Plane<ModelComponent>",-444,[239],[3],240]],[1,34.54,12.754,-2.663],[3,0.49999999999999994,-0.49999999999999994,0.5000000000000001,0.49999999999999994],[1,0.208,0.208,0.208],[1,-90,90,180]],[17,"Plane-007",3,[[21,"Plane<ModelComponent>",-445,[241],[3],242]],[1,34.54,11.533,-11.172],[3,-0.7071067811865475,0.7071067811865475,-5.551115123125783e-17,-5.551115123125783e-17],[1,0.208,0.208,0.208],[1,90,270,-90]],[17,"Plane-008",3,[[21,"Plane<ModelComponent>",-446,[243],[3],244]],[1,34.54,11.533,-32.913],[3,-0.4999999999999999,0.5000000000000001,-0.5,-0.5],[1,0.208,0.208,0.208],[1,90,270,0]],[17,"Plane-009",3,[[21,"Plane<ModelComponent>",-447,[245],[3],246]],[1,34.54,11.533,-43.864],[3,-0.4999999999999999,0.5000000000000001,-0.5,-0.5],[1,0.208,0.208,0.208],[1,90,270,0]],[17,"Plane-010",3,[[21,"Plane<ModelComponent>",-448,[247],[3],248]],[1,33.614,11.533,-44.793],[3,0.49999999999999994,-0.5000000000000001,-0.5,0.49999999999999994],[1,0.208,0.208,0.208],[1,-90,-180,-90]],[17,"Plane-011",3,[[21,"Plane<ModelComponent>",-449,[249],[3],250]],[1,23.639,11.533,-45.856],[3,0.7071067790056523,-0.7071067790056524,0.00005553603666977432,-0.000055536036669774325],[1,0.208,0.208,0.208],[1,0,-180.009,-90]],[17,"Plane-012",3,[[21,"Plane<ModelComponent>",-450,[251],[3],252]],[1,23.64,11.533,-51.056],[3,0.49996072854974477,-0.5000392683660038,0.5000392683660038,0.4999607285497448],[1,0.208,0.208,0.208],[1,90,-90.009,0]],[17,"Plane-013",3,[[21,"Plane<ModelComponent>",-451,[253],[3],254]],[1,22.594,11.533,-52.044],[3,0.5,-0.4999999999999999,-0.5,0.5000000000000001],[1,0.208,0.208,0.208],[1,90,0,-90]],[17,"Plane-014",3,[[21,"Plane<ModelComponent>",-452,[255],[3],256]],[1,-23.302,11.533,-52.044],[3,0.7071067811865475,0,0,0.7071067811865476],[1,0.208,0.208,0.208],[1,90,0,0]],[17,"Plane-015",3,[[21,"Plane<ModelComponent>",-453,[257],[3],258]],[1,-24.261,11.533,-51.018],[3,5.551115123125783e-17,5.551115123125783e-17,-0.7071067811865475,0.7071067811865475],[1,0.208,0.208,0.208],[1,90,90,-90]],[17,"Plane-016",3,[[21,"Plane<ModelComponent>",-454,[259],[3],260]],[1,-24.261,11.533,-41.45],[3,0.5,0.5,-0.4999999999999999,0.5000000000000001],[1,0.208,0.208,0.208],[1,90,90,0]],[17,"Plane-017",3,[[21,"Plane<ModelComponent>",-455,[261],[3],262]],[1,-23.285,11.533,-40.46],[3,-0.49999999999999994,0.5000000000000001,-0.5,0.49999999999999994],[1,0.208,0.208,0.208],[1,90,180,-90]],[17,"Plane-018",3,[[21,"Plane<ModelComponent>",-456,[263],[3],264]],[1,-24.261,11.533,-11.188],[3,0.5,0.5,-0.4999999999999999,0.5000000000000001],[1,0.208,0.208,0.208],[1,90,90,0]],[17,"Plane-019",3,[[21,"Plane<ModelComponent>",-457,[265],[3],266]],[1,-23.272,11.533,-33.905],[3,0.7071067811865475,0,0,0.7071067811865476],[1,0.208,0.208,0.208],[1,90,0,0]],[17,"Plane-020",3,[[21,"Plane<ModelComponent>",-458,[267],[3],268]],[1,-24.261,11.533,-32.887],[3,5.551115123125783e-17,5.551115123125783e-17,-0.7071067811865475,0.7071067811865475],[1,0.208,0.208,0.208],[1,90,90,-90]],[17,"Paint_06",107,[[100,-459,[272],[3],273]],[1,0.751,6.385,-10.192],[3,-0.5,-0.5,-0.4999999999999999,0.5000000000000001],[1,1.9999998807907104,1,2.000000238418579],[1,-90,-90,0]],[17,"Paint_07",107,[[100,-460,[274],[3],275]],[1,3.907,0.698,-15.128],[3,-4.329780281177466e-17,0.7071067811865476,0.7071067811865475,4.329780281177467e-17],[1,1.76,0.88,1.76],[1,-90,180,0]],[2,["37yqt8h/9ed5B9SL01MGnw"]],[2,["e0heKK/FJJsYtGIYUjnl40","99I0xuPChdTYZYmGnJGIHU"]],[2,["d81KijX4NWlJc6qhZ8ZU+i"]],[2,["d81KijX4NWlJc6qhZ8ZU+i"]],[2,["d81KijX4NWlJc6qhZ8ZU+i"]],[2,["d81KijX4NWlJc6qhZ8ZU+i"]],[2,["d81KijX4NWlJc6qhZ8ZU+i"]],[2,["d81KijX4NWlJc6qhZ8ZU+i"]],[2,["b9CO8yFXJcGpitwV6krrIg"]],[95,"Poster",512,"36wzLvdzpHirT5k/Xjw34d",2,[[21,"Plane<ModelComponent>",-461,[316],[3],317]],[1,192.1,7,-86],[3,0.5,0.5000000000000001,-0.4999999999999999,0.5000000000000001],[1,1.538,1,0.864],[1,89.99999999999999,90,0]]],0,[0,-1,86,0,-2,87,0,-3,88,0,-4,89,0,-5,90,0,-6,91,0,-7,92,0,-8,93,0,-9,94,0,-10,95,0,-11,96,0,-12,97,0,-13,98,0,-14,99,0,-15,100,0,-16,101,0,-17,102,0,-18,103,0,-19,104,0,-20,105,0,-21,106,0,-22,151,0,-23,152,0,-24,153,0,-25,154,0,-26,155,0,-27,156,0,-28,157,0,-29,158,0,-1,5,0,-2,6,0,-3,7,0,-4,26,0,-5,79,0,-6,80,0,-7,81,0,-8,82,0,-9,83,0,-10,31,0,-11,84,0,-12,32,0,-13,4,0,-14,8,0,-15,109,0,-16,110,0,-17,111,0,-18,112,0,-19,114,0,-20,115,0,-21,116,0,-22,117,0,-23,118,0,-24,119,0,-25,120,0,-26,121,0,-27,122,0,23,4,0,24,4,0,23,4,0,24,58,0,23,5,0,24,58,0,23,6,0,24,76,0,23,4,0,24,76,0,-1,56,0,-2,130,0,-3,5,0,-4,6,0,-5,7,0,-6,26,0,-7,79,0,-8,80,0,-9,81,0,-10,82,0,-11,83,0,-12,31,0,-13,84,0,-14,49,0,-15,32,0,-16,4,0,-17,85,0,-19,3,0,-20,8,0,-21,113,0,-22,12,0,-23,122,0,-24,191,0,-25,123,0,-1,159,0,-2,160,0,-3,161,0,-4,162,0,-5,163,0,-6,164,0,-7,165,0,-8,166,0,-9,167,0,-10,168,0,-11,169,0,-12,170,0,-13,171,0,-14,172,0,-15,173,0,-16,174,0,-17,175,0,-18,176,0,-19,177,0,-20,178,0,-21,179,0,0,4,0,-1,60,0,-2,23,0,-3,9,0,-4,10,0,-5,11,0,7,4,0,2,5,0,2,5,0,2,5,0,2,5,0,2,5,0,4,129,0,4,129,0,-1,58,0,-2,128,0,0,5,0,0,5,0,-1,125,0,-2,126,0,7,5,0,2,6,0,2,6,0,2,6,0,2,6,0,2,6,0,4,132,0,4,132,0,-1,76,0,-2,131,0,0,6,0,0,6,0,3,6,0,7,6,0,4,25,0,4,25,0,4,25,0,4,25,0,4,25,0,4,21,0,4,21,0,4,21,0,4,21,0,4,133,0,2,7,0,4,133,0,4,134,0,2,7,0,4,134,0,4,135,0,2,7,0,4,135,0,4,136,0,2,7,0,4,136,0,4,137,0,2,7,0,4,137,0,4,138,0,2,7,0,4,138,0,4,139,0,2,7,0,4,139,0,4,21,0,4,21,0,0,7,0,0,7,0,-1,77,0,7,7,0,4,183,0,4,183,0,-1,180,0,-2,181,0,-1,109,0,-2,110,0,-3,111,0,-4,112,0,7,8,0,0,9,0,0,9,0,-1,14,0,-2,15,0,-3,66,0,-4,67,0,0,10,0,0,10,0,-1,42,0,-2,16,0,-3,17,0,-4,18,0,0,11,0,0,11,0,-1,19,0,-2,20,0,-3,74,0,-4,75,0,-1,116,0,-2,117,0,-3,118,0,-4,119,0,-5,120,0,-6,121,0,0,13,0,0,13,0,16,13,0,0,13,0,-1,63,0,0,14,0,0,14,0,16,14,0,0,14,0,-1,64,0,0,15,0,0,15,0,16,15,0,0,15,0,-1,65,0,0,16,0,0,16,0,16,16,0,0,16,0,-1,69,0,0,17,0,0,17,0,16,17,0,0,17,0,-1,70,0,0,18,0,0,18,0,16,18,0,0,18,0,-1,71,0,0,19,0,0,19,0,16,19,0,0,19,0,-1,72,0,0,20,0,0,20,0,16,20,0,0,20,0,-1,73,0,0,23,0,0,23,0,-1,24,0,0,24,0,0,24,0,-1,61,0,-2,62,0,4,43,0,4,43,0,4,43,0,4,43,0,4,140,0,4,140,0,0,26,0,-1,78,0,7,26,0,0,31,0,0,31,0,7,31,0,4,150,0,4,150,0,34,124,0,0,32,0,-1,146,0,-1,147,0,-2,148,0,-1,149,0,7,32,0,0,42,0,0,42,0,-1,68,0,-1,144,0,-2,145,0,-3,50,0,0,50,0,0,50,0,0,50,0,-1,124,0,-2,57,0,0,60,0,0,61,0,0,61,0,0,62,0,0,62,0,0,63,0,0,63,0,0,64,0,0,64,0,0,65,0,0,65,0,0,66,0,0,66,0,0,67,0,0,67,0,0,68,0,0,68,0,0,69,0,0,69,0,0,70,0,0,70,0,0,71,0,0,71,0,0,72,0,0,72,0,0,73,0,0,73,0,0,74,0,0,74,0,0,75,0,0,75,0,0,77,0,0,77,0,0,78,0,0,78,0,7,79,0,4,141,0,4,141,0,7,80,0,4,142,0,4,142,0,4,143,0,4,143,0,7,81,0,7,82,0,7,83,0,7,84,0,0,85,0,0,85,0,0,86,0,0,86,0,0,87,0,0,87,0,0,88,0,0,88,0,0,89,0,0,89,0,0,90,0,0,90,0,0,91,0,0,91,0,0,92,0,0,92,0,0,93,0,0,93,0,0,94,0,0,94,0,0,95,0,0,95,0,0,96,0,0,96,0,0,97,0,0,97,0,0,98,0,0,98,0,0,99,0,0,99,0,0,100,0,0,100,0,0,101,0,0,101,0,0,102,0,0,102,0,0,103,0,0,103,0,0,104,0,0,104,0,0,105,0,0,105,0,0,106,0,0,106,0,4,108,0,4,108,0,4,108,0,7,107,0,4,182,0,4,182,0,7,109,0,7,110,0,7,111,0,7,112,0,-1,114,0,-2,115,0,7,114,0,7,115,0,4,184,0,4,184,0,7,116,0,4,185,0,4,185,0,7,117,0,4,186,0,4,186,0,7,118,0,4,187,0,4,187,0,7,119,0,4,188,0,4,188,0,7,120,0,4,189,0,4,189,0,7,121,0,4,190,0,4,190,0,7,122,0,0,123,0,0,123,0,-1,127,0,0,130,0,0,144,0,0,145,0,0,146,0,0,147,0,0,148,0,0,149,0,0,151,0,0,152,0,0,153,0,0,154,0,0,155,0,0,156,0,0,157,0,0,158,0,0,159,0,0,160,0,0,161,0,0,162,0,0,163,0,0,164,0,0,165,0,0,166,0,0,167,0,0,168,0,0,169,0,0,170,0,0,171,0,0,172,0,0,173,0,0,174,0,0,175,0,0,176,0,0,177,0,0,178,0,0,179,0,0,180,0,0,181,0,0,191,0,35,2,1,3,2,13,3,23,57,16,125,58,36,127,58,37,59,58,33,128,59,0,60,76,33,131,461],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,127],[9,9,10,10,13,19,20,21,10,13,19,20,21,10,13,19,20,21,10,10,10,13,19,20,21,10,13,19,20,21,10,13,19,20,21,10,13,19,20,21,10,13,19,20,21,10,6,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,9,6,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,9,6,-1,18,6,2,2,2,9,6,-1,18,2,2,2,2,2,9,2,2,2,9,2,2,2,2,2,9,2,2,2,9,9,2,9,6,2,9,-1,1,-1,1,-1,1,6,18,9,-1,1,-1,1,-1,1,6,6,6,18,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,-1,1,6,-1,1,6,-1,1,6,-1,1,6,-1,1,6,-1,1,6,-1,1,6,-1,1,6,-1,1,6,-1,1,6,-1,1,6,-1,1,6,-1,1,6,-1,1,6,-1,1,6,-1,1,6,-1,1,6,-1,1,6,-1,1,6,-1,1,6,-1,1,6,-1,1,6,6,6,6,6,6,6,6,6,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,9,9,2,-1,1,-1,1,9,6,2,2,2,9,9,9,6,6,6,6,6,2,9,2,9,2,2,2,9,2,2,9,2,2,9,2,2,9,2,2,9,2,2,9,2,2,9,2,-1,1,-1,1,38,39,40,41],[149,300,47,150,150,151,151,34,18,18,13,13,34,18,18,13,13,34,47,47,13,13,13,13,13,59,59,59,301,34,18,18,13,13,18,18,18,13,13,34,18,18,13,13,34,47,48,11,11,11,11,11,11,16,16,16,16,16,152,56,153,49,16,149,48,11,11,11,11,11,11,16,16,16,16,16,152,56,153,49,16,302,35,35,303,0,49,49,20,304,35,35,305,20,20,20,20,23,154,23,20,20,154,23,20,23,20,306,307,20,23,23,308,309,155,310,0,311,312,313,4,7,6,314,6,0,155,315,3,4,3,4,27,4,0,0,0,316,156,12,156,12,12,12,12,27,27,27,27,27,27,12,27,7,6,0,7,6,48,7,6,0,7,6,48,7,6,0,7,6,0,7,6,0,7,6,0,7,6,0,7,6,0,7,6,0,7,6,0,7,6,0,7,6,0,7,6,0,7,6,0,7,6,0,7,6,0,7,6,0,7,6,0,7,6,0,7,6,0,0,0,0,0,0,0,0,0,9,4,9,4,9,4,9,4,9,4,9,4,9,4,9,4,9,4,9,4,9,4,9,4,9,4,9,4,9,4,9,4,9,4,9,4,9,4,9,4,9,4,317,146,29,29,58,29,58,140,0,141,142,143,318,319,320,0,0,0,0,0,32,321,322,323,324,325,326,36,37,38,36,37,38,36,37,38,36,37,38,36,37,38,36,37,38,327,328,329,4,157,4,157,330,331,332]],[[{"name":"textBox01","rect":{"x":0,"y":0,"width":177,"height":71},"offset":{"x":0,"y":0},"originalSize":{"width":177,"height":71},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-88.5,-35.5,0,88.5,-35.5,0,-88.5,35.5,0,88.5,35.5,0],"indexes":[0,1,2,2,1,3],"uv":[0,71,177,71,0,0,177,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-88.5,"y":-35.5,"z":0},"maxPos":{"x":88.5,"y":35.5,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[2],0,[0],[15],[333]],[[{"fmt":"1","w":0,"h":0},-1],[1],0,[],[],[]],[[[32,"Glass","1",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{},{},{}],[[[{"roughness":0.52,"metallic":0.511,"specularIntensity":0.538},"mainColor",8,[4,1931166569]],{},{}],11,0,0]]],0,0,[0],[5],[1]],[[[35,"SR_Girl_Cayenne"],[51,"SR_Girl_Cayenne",[-6,-7,-8,-9,-10,-11],[[79,true,-2,[1,"c2ZYi1RLtUULrfguAP26B/"],[[null,17,null],0,6,0]],[80,true,-3,[1,"d49BHlK0lNu5D88KCiBZ/1"],[1,0,0,1.5],[1,0.5,1,0.5],18],[82,-4,[1,"a10Bvh9tBOy7I9EOug2MyA"],19],[105,false,-5,[1,"c3ntpgnzlLBo35Ks07FzHS"]]],[0,"56h8lGGPFQU53Ba9Dor6fB",-1,0],[1,225,0,-72],[3,0,-0.3826834323650898,0,0.9238795325112867],[1,3,3,3],[1,0,-45,0]],[30,"mixamorig:RightHand",[-12,-13,-14,-15,-16],[0,"9clnOie8RVNrvEbJQq8v0G",1,0],[1,-0.0000034432430311426288,0.000006639084858761635,0.24298104643821716],[3,0.01360794689334438,-0.034225589866867225,0.07317042209627833,0.9966391132751439],[1,1.0000035762786865,1.0000513792037964,1.0000189542770386],[1,1.8610563502341224,-4.069220824717699,8.33250351650913]],[30,"mixamorig:LeftHand",[-17,-18,-19,-20,-21],[0,"70PTV00hBWBZzlsXIXZydA",1,0],[1,-0.0000014225752238417044,-0.000011036961041099858,0.24313096702098846],[3,0.016454573840333213,0.028110362793747026,-0.0802140465250583,0.9962453318552679],[1,0.9999858140945435,1.0000828504562378,1.0000077486038208],[1,2.164876145566908,3.405613008914394,-9.143091827417996]],[55,"mixamorig:Hips",1,[-22,-23,-24],[0,"55NX289clQzY3dcHvCHYap",1,0],[1,0,0.7598279714584351,-0.02771100029349327],[3,0,0.7071067811865476,0.7071067811865476,8.659560751628624e-17],[1,-90.00000000000003,180,7.016709451900449e-15]],[45,"mixamorig:Spine2",[-25,-26,-27],[0,"fbaZlJsG1Wq6DtuEYWMahW",1,0],[1,-6.571454692342039e-19,0.000004227554654789856,0.1153070330619812]],[12,"Karen_body",1,[[107,1,-28,[1,"d0CW+ZNTtRQr7wEtIZOTtU"],[0,1,2],[3],1,3,4]],[0,"14ghY5xypRz4JzZoPu36/c",1,0]],[12,"Karen_hair",1,[[25,-29,[1,"d28SIqOt1b+ZtvOsJXXh6W"],[5],[3],1,6,7]],[0,"0aw+oDm5ZTDaRDKmkoyatQ",1,0]],[12,"Karen_pants",1,[[25,-30,[1,"3esK7eLGRafom4zgN4qVW+"],[8],[3],1,9,10]],[0,"b6uyTYC59btqS8FODFpsGc",1,0]],[12,"Karen_shoes",1,[[25,-31,[1,"bbPIOeWd1Zf5lUD6rr8+Ao"],[11],[3],1,12,13]],[0,"37Y/XoqZlYuJXBOXk7vFb3",1,0]],[12,"Karen_tshirt",1,[[25,-32,[1,"01h0KrnUFecKntzvVY4bPw"],[14],[3],1,15,16]],[0,"c925QNBw5XwLpBGL+4HksE",1,0]],[5,"mixamorig:Spine",4,[-33],[0,"c6DS1+8CRRW4TF1ZFMbBDN",1,0],[1,-4.927978647109298e-19,0.004023999907076359,0.08638399839401245],[3,-0.023256715663660554,3.748385206406917e-33,8.719871725416944e-35,0.9997295260101803],[1,1,0.999981701374054,0.999981701374054],[1,-2.665263604887311,4.29649513659828e-31,3.811234230531542e-40]],[46,"mixamorig:Spine1",11,[5],[0,"22XCxSnchX2YyWpqdzqDJx",1,0],[1,-5.750941155526188e-19,0.0000044715634430758655,0.10089319199323654]],[5,"mixamorig:Neck",5,[-34],[0,"f6SqrywK5dQImUjayZ/mh8",1,0],[1,-7.39319297345235e-19,0.0000050754856601997744,0.12971892952919006],[3,0.023256715663660554,-2.8482302098926363e-18,1.2243603317803223e-16,0.9997295260101803],[1,1,1.0000182390213013,1.0000182390213013],[1,2.665263604887311,-6.525897439471037e-16,1.4018750536119725e-14]],[58,"mixamorig:Head",13,[[10,"mixamorig:HeadTop_End",-35,[0,"d95o+vlQlURI9AzSCc5eyS",1,0],[1,-6.939706195268755e-18,0.05666700005531311,0.3004800081253052]]],[0,"002fciVQZel6lGs939GzzM",1,0],[1,2.0796952213341377e-18,0.016982000321149826,0.09004700183868408]],[5,"mixamorig:RightShoulder",5,[-36],[0,"96m3mML8xYma8ovSNMUnD6",1,0],[1,0.045917998999357224,0.0007866040687076747,0.1135755106806755],[3,0.5816024528988893,-0.5717965351807134,0.4056466808882289,-0.4125991752557072],[1,1.0000628232955933,0.9999746084213257,0.9999850988388062],[1,-109.31027250051311,-0.01567830944859292,-89.02598293762216]],[5,"mixamorig:RightArm",15,[-37],[0,"9bngOQYRtbh6w3rSykac42",1,0],[1,0.000006249770649446873,0.000005086226792627713,0.09753921627998352],[3,0.1305643758250226,0.02527631243286411,-0.003381620138266603,0.9911118082438828],[1,0.9999703764915466,0.9999983310699463,0.9999900460243225],[1,15.009472847216758,2.922569396180545,-0.005887450073719543]],[5,"mixamorig:RightForeArm",16,[2],[0,"baiECjP39daJsVRrwIjWk+",1,0],[1,-0.000007147949872887693,-3.3064247872971464e-7,0.20756368339061737],[3,0.06362503011317068,-0.10821657609726618,0.007007633324171273,0.9920644743544024],[1,0.9999561905860901,1.0000345706939697,1.0000081062316895],[1,7.3399941585837,-12.451162506688474,0.007647973286588901]],[5,"mixamorig:RightHandIndex1",2,[-38],[0,"a9y0BdABxe+IV09LXanHV+",1,0],[1,-0.029763730242848396,-0.0002482774725649506,0.10437147319316864],[3,-0.003487278742590059,-0.038228225349527134,-0.0001424063244334014,0.999262939067609],[1,1.00008225440979,0.999967098236084,0.9999818801879883],[1,-0.3999452466257097,-4.3817299137112435,-0.0010300503079290796]],[5,"mixamorig:RightHandIndex2",18,[-39],[0,"71jOZJbf5UdoQLAur9FXE7",1,0],[1,-0.000002398016022198135,-0.0000011596857802942395,0.026979636400938034],[3,0.0015092614242356026,2.7755544003813748e-17,-4.1890419584123057e-20,0.999998861064328],[1,1,1.0000226497650146,1.000029444694519],[1,0.1729486852403547,3.1805546814635164e-15,0]],[11,"mixamorig:RightHandIndex3",19,[[10,"mixamorig:RightHandIndex4",-40,[0,"d4x7i1VJBS3pgrp5/ef5pE",1,0],[1,0.0000011132145800729631,4.6465348191304656e-7,0.021967468783259392]]],[0,"d1iq/L0GJZUbADJOj/W0hu",1,0],[1,0.0000016153761634996044,5.846828798894421e-7,0.027087954804301262],[3,-0.00015021949196708843,1.0423571170584707e-21,-6.938893825616049e-18,0.999999988717052],[1,1,0.999976634979248,0.9999774694442749],[1,-0.0172138858453682,0,-7.951386703658791e-16]],[5,"mixamorig:RightHandMiddle1",2,[-41],[0,"726HiAd/JQgpGuUuGEwNg2",1,0],[1,-0.011648532003164291,0.00013709474296774715,0.10247785598039627],[3,0.012839652043351872,0.03090228789828215,-0.0003852716294482395,0.999439864876236],[1,1.0000580549240112,0.9999222755432129,0.9999593496322632],[1,1.472017841469981,3.541980270797305,0.001342875410895994]],[5,"mixamorig:RightHandMiddle2",21,[-42],[0,"8en0oGBJBVJoF2Zv+dJPTx",1,0],[1,-0.000014644689144915901,0.0000016605879409326008,0.031247776001691818],[3,0.020683530593314826,2.774963794579242e-17,-5.740832973809236e-19,0.9997860728986954],[1,1,1.0000306367874146,1.000033974647522],[1,2.3703270449953466,3.1805546814635168e-15,0]],[11,"mixamorig:RightHandMiddle3",22,[[10,"mixamorig:RightHandMiddle4",-43,[0,"6ap5RRntlVd4tPIckcInAE",1,0],[1,0.00007599249511258677,2.847425548679894e-7,0.022624170407652855]]],[0,"38WVCk7dRddaq+rjU7iEpl",1,0],[1,-0.00005877185321878642,-0.00000127793157389533,0.029726898297667503],[3,-0.1387503260762911,2.8519306011326626e-7,-0.000049748722272360416,0.9903273926024191],[1,0.9999899864196777,0.9999740719795227,1.000014066696167],[1,-15.951078979518858,-0.0007586209836771267,-0.00565017667204615]],[5,"mixamorig:RightHandPinky1",2,[-44],[0,"43qNmicwla6phgl2IeI1M9",1,0],[1,0.03001558966934681,-0.0003140551852993667,0.08637554943561554],[3,0.004475062762682214,0.10303793216833522,-0.0004836367496868171,0.9946672430733999],[1,1.0000056028366089,0.99998939037323,0.9999727010726929],[1,0.515787157498333,11.828400894719055,-0.0022868371743805438]],[5,"mixamorig:RightHandPinky2",24,[-45],[0,"83VC3Fx49bTY41y/j1OUNf",1,0],[1,0.000007871652996982448,0.0000025668534817668842,0.03206361085176468],[3,0.007210736090344364,-3.319253046368626e-18,2.0841157776164954e-17,0.9999740023045776],[1,1,0.9999679923057556,0.9999836683273315],[1,0.826296650934089,-3.975693225808975e-16,2.385416009337135e-15]],[11,"mixamorig:RightHandPinky3",25,[[10,"mixamorig:RightHandPinky4",-46,[0,"b2o2hUF6FU36GLpwAn2Sur",1,0],[1,-0.00001135389811679488,1.323222562632509e-7,0.021798497065901756]]],[0,"e9OCvRUA5TtZxrJv+J54/m",1,0],[1,0.0000021988546450302238,-4.806747710972559e-7,0.02561076544225216],[3,0.02857194943497133,0,0,0.9995917385140222],[1,1,0.9999516010284424,1.0000333786010742],[1,3.274549866498169,0,0]],[5,"mixamorig:RightHandRing1",2,[-47],[0,"ceWJ7DG0lTaJfpioZzEskk",1,0],[1,0.011412135325372219,0.0011368828127160668,0.0986737608909607],[3,0.021652395072328433,0.043156717304734,-0.0009673492824602478,0.998833187161138],[1,1.0000206232070923,0.9999784231185913,0.9999752640724182],[1,2.483848488583375,4.948173949025551,-0.0036410635730759044]],[5,"mixamorig:RightHandRing2",27,[-48],[0,"ffjS+OjhNUJJfnJbEOo+hI",1,0],[1,-0.000011713743333530147,5.519517571883625e-7,0.029158152639865875],[3,-0.009696567566961276,0.000004845425860049317,0.00004949996651941377,0.9999529859466866],[1,1.0000102519989014,0.9999268054962158,0.9999900460243225],[1,-1.1111622392603622,0.000610220432267118,0.005666627697922006]],[11,"mixamorig:RightHandRing3",28,[[10,"mixamorig:RightHandRing4",-49,[0,"08ROW/o2ldBokDnObgNpS9",1,0],[1,0.000036169341910863295,9.222274002240738e-7,0.022989900782704353]]],[0,"94dBbT0tpVxayosThVPrqH",1,0],[1,-0.000019211698599974625,-3.108218606939772e-7,0.0298824030905962],[3,-0.0837850264772313,-1.3247615849928268e-17,-8.077246552015625e-18,0.9964838530243275],[1,1,1.000034213066101,1.0000275373458862],[1,-9.612325566665929,-1.5902773171181014e-15,-7.951386723513313e-16]],[5,"mixamorig:RightHandThumb1",2,[-50],[0,"208JDcx0NYIYrIUlnm87iB",1,0],[1,-0.024590039625763893,0.0063820346258580685,0.023592239245772362],[3,-0.08225713034060318,-0.5163709589633649,-0.049925599907966176,0.8509419673051822],[1,0.9999960660934448,0.999976396560669,1.0000698566436768],[1,-11.043391355230465,-62.5007543766444,-0.000984906316673703]],[5,"mixamorig:RightHandThumb2",30,[-51],[0,"7dFRQXC+BWtIJKCMrNL9W9",1,0],[1,0.0076600732281804085,-2.0586772109254525e-7,0.026657773181796074],[3,-0.12545940333971844,0.000009914809240337083,-0.000048994839955336003,0.992098752954989],[1,1.0000019073486328,0.9999578595161438,1.0000046491622925],[1,-14.414573017089847,0.0004227977626295748,-0.005712575515257973]],[11,"mixamorig:RightHandThumb3",31,[[10,"mixamorig:RightHandThumb4",-52,[0,"d3qaMg6dNYf5risXrIpNB9",1,0],[1,-0.0017108344472944736,-0.0000013352492942431127,0.023537851870059967]]],[0,"34DJMkitNaxZfuGlsRcF1N",1,0],[1,-0.005949236452579498,-4.894905032415409e-7,0.02967561036348343],[3,0.07716618672457172,-0.000012280389764543246,0.00004845975976480807,0.9970182431265899],[1,0.9999980330467224,0.9999845623970032,0.9999697208404541],[1,8.851393052328786,-0.0018315429658644893,0.005427931000428848]],[5,"mixamorig:LeftShoulder",5,[-53],[0,"dex9wvACBc06s2PtYD8C5R",1,0],[1,-0.045917998999357224,0.000727666774764657,0.11357276886701584],[3,0.5812614001474695,0.572204593524874,-0.40587216876783794,-0.4122922149002193],[1,1.0000416040420532,0.9999879598617554,1.0000181198120117],[1,-109.32009693390246,0.016976713720142443,89.10045527598827]],[5,"mixamorig:LeftArm",33,[-54],[0,"9dUAXVCfFVrqjBv4Rv4H28",1,0],[1,-0.000002451075033604866,-0.0000037109746244823327,0.09753599017858505],[3,0.1306511754224147,-0.02453842003680856,0.003278119475665819,0.9911192613583603],[1,0.9999566674232483,1.0000516176223755,0.9999527931213379],[1,15.01919752328849,-2.837161862260435,0.004931325427835162]],[5,"mixamorig:LeftForeArm",34,[3],[0,"a6x8bY4OFQkojjBPeWci0I",1,0],[1,0.00000787410135671962,-4.848506591770274e-7,0.20756512880325317],[3,0.0635964416672215,0.10972452047308809,-0.007030929829852314,0.9919004931140756],[1,1.000046730041504,0.9999332427978516,0.9999863505363464],[1,7.3370285936579425,12.624815136733513,0.00047054737035761657]],[5,"mixamorig:LeftHandMiddle1",3,[-55],[0,"249kdekT9QIaYc6XuQKbWq",1,0],[1,0.009820107370615005,0.00037238109507597983,0.09805892407894135],[3,0.011886837664349031,-0.013498637566465146,0.00018986184659106954,0.9998382138259517],[1,0.9999863505363464,0.9999533295631409,1.000006914138794],[1,1.3623329355106237,-1.547026253809614,0.0033661288963316945]],[5,"mixamorig:LeftHandMiddle2",36,[-56],[0,"14T34BcDZYh4UomiYT3BQp",1,0],[1,0.00003054197077290155,5.620260026262258e-7,0.032401829957962036],[3,-0.0005063483213213758,-7.026994560141105e-21,1.3877786028760893e-17,0.9999998718056805],[1,1,1.0000090599060059,1.0000207424163818],[1,-0.05802324602991467,0,1.5902773407317584e-15]],[11,"mixamorig:LeftHandMiddle3",37,[[10,"mixamorig:LeftHandMiddle4",-57,[0,"0f3RhteFFX/4vRlMvWMCoD",1,0],[1,-0.00005090103149996139,-5.491865522344597e-7,0.02431681752204895]]],[0,"06jsHI5jpbA6I1nlmlOjfN",1,0],[1,0.00002325664354430046,-0.0000010947272812700248,0.030516570433974266],[3,-0.0638993687072106,-0.0000016959782162719405,-0.00004964806481748518,0.9979563458443527],[1,1.0000113248825073,0.9999697208404541,1.0000203847885132],[1,-7.327320497902626,-0.0005574870461849502,-0.005665203792373803]],[5,"mixamorig:LeftHandPinky1",3,[-58],[0,"b6w1KLUt9fX5rs7vrsKPa2",1,0],[1,-0.031042784452438354,0.0003660395450424403,0.08977702260017395],[3,0.018947411289655783,-0.08729319256504521,0.001630472365213429,0.9960011223372637],[1,1.0000258684158325,0.999998927116394,0.9999939799308777],[1,2.1793661920635197,-10.017561693274246,-0.0034409228640732295]],[5,"mixamorig:LeftHandPinky2",39,[-59],[0,"14xGH9IidSk43yRlMPoCdC",1,0],[1,0.000006635598765569739,-3.3664400689303875e-7,0.030946988612413406],[3,-0.018801572195526025,0.000003816219839772204,0.00004947068840965181,0.9998232335873496],[1,0.9999877214431763,0.9999216794967651,0.9999878406524658],[1,-2.154628455464339,0.0005438139534737432,0.005659699193671753]],[11,"mixamorig:LeftHandPinky3",40,[[10,"mixamorig:LeftHandPinky4",-60,[0,"0bQA0d2KhQMKLnoakRImDJ",1,0],[1,0.000006559500889125047,-5.561059310821292e-7,0.020343994721770287]]],[0,"7aH0NGNo9We7/tVrmm3cQC",1,0],[1,-0.00001035764034895692,0.0000013294798009155784,0.024655021727085114],[3,0.021734323215036794,-0.000003961457853107807,-0.00004946579033987483,0.9997637804660793],[1,1.0000122785568237,1.0000604391098022,1.0000360012054443],[1,2.4907660928791415,-0.00033064438872240583,-0.005676889352970554]],[5,"mixamorig:LeftHandRing1",3,[-61],[0,"d5fGnbyqRbe6z9IVs9OEZs",1,0],[1,-0.010574562475085258,0.0004123144317418337,0.09733209758996964],[3,0.007356237470430902,-0.05039464952326853,0.0004065826568908986,0.9987022077477593],[1,1.000030279159546,0.9999841451644897,1.0000061988830566],[1,0.8442472157949733,-5.777435322778097,0.004049664316991417]],[5,"mixamorig:LeftHandRing2",42,[-62],[0,"aciGYVQoFVwqKHr2XJstNc",1,0],[1,0.000009358907846035436,-6.017040732331225e-7,0.030585160478949547],[3,-0.007070530040537308,-0.0000036904506533237365,-0.00004950938339458734,0.9999750022576301],[1,1.0000118017196655,0.9999583959579468,1.0000152587890625],[1,-0.8102298353788766,-0.000462997568874963,-0.005670225529515161]],[11,"mixamorig:LeftHandRing3",43,[[10,"mixamorig:LeftHandRing4",-63,[0,"29OaL+x79bFKb2DZEnSqRK",1,0],[1,-0.000013564610526373144,-1.669732938580637e-7,0.02451709657907486]]],[0,"88DV+DBDNdh4W+r2darbUI",1,0],[1,0.000006248490535654128,-8.687352988090424e-7,0.029886307194828987],[3,-0.022128559412822844,-1.3720841720674955e-17,-7.244290563108099e-18,0.9997551334493427],[1,1,1.0000181198120117,1.0000280141830444],[1,-2.5359531155283492,-1.5902773237499461e-15,-7.951387062959283e-16]],[5,"mixamorig:LeftHandThumb1",3,[-64],[0,"10Y9VfrudePoRgfqSl3YJr",1,0],[1,0.024633940309286118,0.007799278013408184,0.022856174036860466],[3,-0.10070449270482891,0.5198182544499136,0.06184524393909123,0.846063090609573],[1,1.000097632408142,0.9999443888664246,0.9999347925186157],[1,-13.574015055393739,63.13253106659413,-0.0026419526813703724]],[5,"mixamorig:LeftHandThumb2",45,[-65],[0,"09qQhSsdtaY7rMDMSryI25",1,0],[1,-0.007403497118502855,-6.831232326476311e-7,0.026585761457681656],[3,-0.08914843955414743,-1.3513235263008926e-17,-4.692816063236513e-18,0.9960183510985431],[1,1,1.0000098943710327,1.0000258684158325],[1,-10.229238692781918,-1.5902773093344222e-15,-3.975693498890071e-16]],[11,"mixamorig:LeftHandThumb3",46,[[10,"mixamorig:LeftHandThumb4",-66,[0,"23xD7LF8dZbb0E5Y0K1vEm",1,0],[1,0.0020763862412422895,-0.0000010571753819021978,0.024049684405326843]]],[0,"1bqlVMc71agbZRtEWNdlvL",1,0],[1,0.005323044024407864,0.0000019810706817224855,0.028939666226506233],[3,0.0021868930043691544,-7.587309268257245e-21,-3.4694386556269145e-18,0.9999976087466347],[1,1,0.9999953508377075,1.0000134706497192],[1,0.2505996785432146,0,-3.975693351829396e-16]],[5,"mixamorig:LeftHandIndex1",3,[-67],[0,"d6Gg2z3JJbeKqsO2BSXMMP",1,0],[1,0.03179012984037399,-0.0008816058398224413,0.09924770891666412],[3,-0.031069420973786722,0.021896193294284043,0.0006714019259837009,0.9992771372442315],[1,0.9999608397483826,0.9999880194664001,1.0000636577606201],[1,-3.5616978699014386,2.5104987995548314,-0.001075493650964419]],[5,"mixamorig:LeftHandIndex2",48,[-68],[0,"c6ig3AW8BRF6Y5aOR+5kTn",1,0],[1,-0.00001156820962933125,9.660933528721216e-7,0.030536191537976265],[3,0.01363844297741823,9.463570883479371e-20,6.938248532035605e-18,0.9999069921113422],[1,1,0.9999374151229858,0.9999372959136963],[1,1.5628988977478036,0,7.951386703658791e-16]],[11,"mixamorig:LeftHandIndex3",49,[[10,"mixamorig:LeftHandIndex4",-69,[0,"40sjxYD5JfQIPmdoMzGNKC",1,0],[1,0.000005422420144896023,0.0000012069104968759348,0.021943993866443634]]],[0,"a3/MW4GCZb5YS2CirqKm26",1,0],[1,0.000007706039468757808,-5.215513283474138e-7,0.027638649567961693],[3,0.0008554050512051797,-5.551706677003217e-17,-6.891406648987607e-18,0.9999996341410324],[1,1,0.9999837875366211,1.0000252723693848],[1,0.09802221037055961,-6.361109395390841e-15,-7.951386478074579e-16]],[5,"mixamorig:LeftUpLeg",4,[-70],[0,"c9Bap+dXBQUaqEZptn8eFu",1,0],[1,-0.07677999883890152,0.00021100000594742596,-0.04799799993634224],[3,-0.00007468013070496029,0.9996471414030361,-0.026409238600668555,0.002852932552581915],[1,1.0000163316726685,0.9999948740005493,1.0000110864639282],[1,3.0265910545602526,179.6734175878133,-0.017188454012337415]],[5,"mixamorig:LeftLeg",51,[-71],[0,"b6TSJ7E59bU7wKPJUBZDcx",1,0],[1,0.00001683535083429888,0.000010538574315432925,0.34423330426216125],[3,0.0003494797255532236,0.004956277991795624,-0.000013442729978037921,0.9999876564196593],[1,0.9999925494194031,1.0000371932983398,1.0000298023223877],[1,0.040054570310631955,0.5679504511077268,-0.00134191819245242]],[5,"mixamorig:LeftFoot",52,[-72],[0,"10FVnudhJR4KZAHY8LD1cm",1,0],[1,0.000006139491233625449,0.00000873165117809549,0.28511571884155273],[3,-0.479616336575581,-0.001541030453026191,0.0027543296612546277,0.8774726255462781],[1,1.0000195503234863,0.999971330165863,0.9999681711196899],[1,-57.320995376818274,-0.0035742433276755854,0.36164789105303075]],[11,"mixamorig:LeftToeBase",53,[[10,"mixamorig:LeftToe_End",-73,[0,"a0gLO5dv5Wr4m/QjMvqXVS",1,0],[1,-0.000001384120992042881,0.000002341124854865484,0.048779554665088654]]],[0,"5bbwz21dNR9ZSc4RBFPNz7",1,0],[1,0.000008686407454661094,-0.0000032168320558412233,0.12623876333236694],[3,-0.31799137674227834,-0.0030799596649769604,0.009330061288369638,0.9480426931960226],[1,0.9999279975891113,0.9999603629112244,1.0000324249267578],[1,-37.08489869316374,0.005380628778315759,1.1258998107590064]],[5,"mixamorig:RightUpLeg",4,[-74],[0,"2baNazTWlch5nt/ua+2mdz",1,0],[1,0.07677999883890152,-0.00036199999158270657,-0.04799799993634224],[3,0.00008153291822983612,0.9997076948098107,-0.024007918216792646,-0.00285274487706512],[1,1.0000163316726685,0.9999527335166931,0.999968945980072],[1,2.7513313465673668,-179.67341759424372,0.017188453527047984]],[5,"mixamorig:RightLeg",55,[-75],[0,"f8jFWg7PJa5INdAX+CHpg8",1,0],[1,-0.000016344867617590353,-0.000010120271326741204,0.3441654145717621],[3,0.006007375718430104,-0.004956683191124799,0.00001767518204803354,0.9999696707482224],[1,0.9999925494194031,1.0000488758087158,1.0000414848327637],[1,0.688400272746128,-0.5679982987167566,-0.001386788453889698]],[5,"mixamorig:RightFoot",56,[-76],[0,"c43IJ3/9FcSLc2N5A63gFN",1,0],[1,-0.0000057656980061437935,-1.1231261964894657e-7,0.28523045778274536],[3,-0.48660981981094087,0.0014567952700690447,-0.0026837645744010002,0.8736140786519034],[1,1.00001859664917,1.0000110864639282,1.0000088214874268],[1,-58.236303957409795,-0.003812456441181038,-0.34990353554362036]],[11,"mixamorig:RightToeBase",57,[[10,"mixamorig:RightToe_End",-77,[0,"dcToFvCSRfL75obdU1koPQ",1,0],[1,6.738453635080077e-7,0.0000021420198663690826,0.04878755286335945]]],[0,"32/l5xuoZW94seooiqrnHk",1,0],[1,0.000006049368039384717,0.0000036953574635845143,0.12793463468551636],[3,-0.3135044591226993,0.0031613882331682215,-0.009535586511579304,0.9495335867279806],[1,0.9999389052391052,0.9999600648880005,1.0000230073928833],[1,-36.543000812664296,0.001420696842498502,-1.1512034056824716]]],0,[0,7,1,0,0,1,0,0,1,0,0,1,0,0,1,0,-1,6,0,-2,7,0,-3,8,0,-4,9,0,-5,10,0,-6,4,0,-1,18,0,-2,21,0,-3,24,0,-4,27,0,-5,30,0,-1,36,0,-2,39,0,-3,42,0,-4,45,0,-5,48,0,-1,11,0,-2,51,0,-3,55,0,-1,13,0,-2,15,0,-3,33,0,0,6,0,0,7,0,0,8,0,0,9,0,0,10,0,-1,12,0,-1,14,0,3,14,0,-1,16,0,-1,17,0,-1,19,0,-1,20,0,3,20,0,-1,22,0,-1,23,0,3,23,0,-1,25,0,-1,26,0,3,26,0,-1,28,0,-1,29,0,3,29,0,-1,31,0,-1,32,0,3,32,0,-1,34,0,-1,35,0,-1,37,0,-1,38,0,3,38,0,-1,40,0,-1,41,0,3,41,0,-1,43,0,-1,44,0,3,44,0,-1,46,0,-1,47,0,3,47,0,-1,49,0,-1,50,0,3,50,0,-1,52,0,-1,53,0,-1,54,0,3,54,0,-1,56,0,-1,57,0,-1,58,0,3,58,0,12,1,2,3,17,3,3,35,5,3,12,77],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,-2,-3,1,11,-1,1,11,-1,1,11,-1,1,11,-1,1,11,-2,6,6],[14,14,14,62,63,14,64,65,14,66,67,14,68,69,14,70,71,41,0,0]],[[[53,"Dance_Invitation",".mp3",4.519184],-1],0,0,[],[],[]],[[[15,"Poster",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_ALBEDO_MAP":true},{},{}],[[[{},"mainTexture",6,0],{},{}],11,0,0]]],0,0,[0,0],[8,5],[334,1]],[[[35,"Red_C-Class"],[51,"Red_C-Class",[-6],[[103,-2,[1,"5bcyxDL2ZICb8Jsr1E5PWp"],[1,0,0,0.5],[1,2.2,2,5],71],[159,-3,[1,"6e4o/wGORISasPO6QoCgyE"],[1,1.1,0,0.7],72],[83,true,false,-4,[1,"92iXdI2pJAdZmXLGubO0m3"],73],[81,true,-5,[1,"f74MpOKyxPA7602k08eAoq"],[1,3,2,8],74]],[0,"caxXq8+tNTma0FYIbh+EOA",-1,0],[1,215.584,1.96,-91.965],[3,0,0.4948293786054299,0,-0.8689901530333725],[1,3,3,3],[1,0,300.683,0]],[45,"Electric_1",[-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27],[0,"ddvt4xUJVfXqAmxC2Uvfoq",1,0],[1,-6.576113700866699,0.6715857982635498,4.729059219360352]],[46,"Example_Assembly",1,[-28,-29,-30,-31,-32,-33,-34,-35,2],[0,"dc4ro0WHFcdbgXNrSrSQLM",1,0],[1,6.47,-1.263,-4.261]],[8,"Electric_1_FrontBumper_3",3,[[4,-36,[1,"15YW54JvxZRI7Y1xbse3Vk"],[0,1],[3],2]],[0,"28SFqBLg9TyrSVorF9VXoD",1,0],[1,-6.576113700866699,0.6715857982635498,4.729059219360352],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[8,"Electric_1_RearBumper_2",3,[[4,-37,[1,"68PH6+Dq5TL7DzgZRwTCUQ"],[3,4],[3],5]],[0,"65g2k95gBRLYtiIFO/kejw",1,0],[1,-6.576113700866699,0.6715857982635498,4.729059219360352],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[8,"Electric_1_RightBumper_3",3,[[4,-38,[1,"57kGp3KAZYyaK9J5yiaZSk"],[6,7],[3],8]],[0,"92VDeR6adSm71y4/fJ0fWb",1,0],[1,-6.576113700866699,0.6715857982635498,4.729059219360352],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[8,"Electric_1_LeftBumper_2",3,[[4,-39,[1,"31UIt6u6dShr03dBYmUlNT"],[9],[3],10]],[0,"953OUc9TRT/YiNdaGCmgk2",1,0],[1,-6.576113700866699,0.6715857982635498,4.729059219360352],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[8,"Electric_1_Wheel",3,[[4,-40,[1,"252CLebzxTq6dT9umZjaLb"],[11],[3],12]],[0,"37X9vBuCxfwZpfWVEZWAOr",1,0],[1,-7.468113899230957,0.9915857911109924,6.244059085845947],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[8,"Electric_1_Wheel__1_",3,[[4,-41,[1,"49TChVcKpQuKS+nfv2nm6H"],[13],[3],14]],[0,"0149TVGiZel4gG6VVtvG3F",1,0],[1,-7.468113899230957,0.9915857911109924,3.32905912399292],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[8,"Electric_1_Wheel__2_",3,[[4,-42,[1,"c13fl0V29W5aT1l8xzC5W2"],[15],[3],16]],[0,"d1Dx5rabVbeoOczvpTSX2i",1,0],[1,-5.6771135330200195,0.9915857911109924,3.32905912399292],[3,-0.0000018831392803152352,0.7071067811840399,0.7071067811840399,0.0000018831392803152352],[1,-90,179.99969482421645,0]],[8,"Electric_1_Wheel__3_",3,[[4,-43,[1,"c5TKrlgKxW5oEslhq0lJ/m"],[17],[3],18]],[0,"07EYBtrNFYoaDJ8XCKFqLZ",1,0],[1,-5.6771135330200195,0.9915857911109924,6.244059085845947],[3,-0.0000018831392803152352,0.7071067811840399,0.7071067811840399,0.0000018831392803152352],[1,-90,179.99969482421645,0]],[23,"Elecric_1",2,[[4,-44,[1,"1fhVWqd11QDZfP9xKnzU3h"],[19,20,21],[3],22]],[0,"a6zETpiE9aV4iED9TZ7+ba",1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[8,"Elecric_1_Door_FL",2,[[4,-45,[1,"d5wGCccRJdKrH4feaGJiDd"],[23,24],[3],25]],[0,"6fTg+euNVXM4Vtec1SilvZ",1,0],[1,0.9143298268318176,0.7311053276062012,0.872050940990448],[3,-0.6498830672528845,-0.2786610824962516,-0.27866108249625154,0.6498830672528846],[1,-90,-46.418,0]],[8,"Elecric_1_Door_FR",2,[[4,-46,[1,"bdVdsP8f9SoZyeogUKrBSG"],[26,27],[3],28]],[0,"01/FTjgi5Ti4y9LgvCtbBt",1,0],[1,-0.9143298268318176,0.7311053276062012,0.8720508217811584],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[8,"Elecric_1_Door_RL",2,[[4,-47,[1,"eeoX2GjrpU25bD5SuEY8Ny"],[29,30],[3],31]],[0,"1et2hO3dFbZYtRZH+jEmZ+",1,0],[1,0.9035815000534058,0.8048096895217896,-0.20108069479465485],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[8,"Elecric_1_Door_RR",2,[[4,-48,[1,"4agL4UcjlXxa9OGejdukQP"],[32,33],[3],34]],[0,"5bbf90NexSDZkghbZiXoIT",1,0],[1,-0.9035821557044983,0.8048096299171448,-0.20108076930046082],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[8,"Elecric_1_Hood",2,[[4,-49,[1,"81Qwje+SBdwLODpq3Z8wE7"],[35,36],[3],37]],[0,"ecWOoscSdWJ4N/ujk3qWAI",1,0],[1,0,0.9403597712516785,1.0017929077148438],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[23,"Elecric_1_Roof",2,[[4,-50,[1,"37spt2q4lSb4w0yrJfFNRV"],[38,39],[3],40]],[0,"31xxOUap5Tora1oLuORuvM",1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[8,"Elecric_1_Trunk",2,[[4,-51,[1,"d5WXUBc5lfpY7fp4I5vHrJ"],[41,42,43],[3],44]],[0,"1bBDb4ndhQga2AyTmyjVI5",1,0],[1,0,1.2916659116744995,-1.2361178398132324],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[23,"Electric_1_Dashboard",2,[[4,-52,[1,"b4aJQM50VR26r1KBTGaGlH"],[45],[3],46]],[0,"04D5MZhF9bXLrgDjZU7pL7",1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[8,"Electric_1_Dashboard_SteringWheel",2,[[4,-53,[1,"72GqqvIvtdQpIObmgW0hDr"],[47],[3],48]],[0,"2eMC2n7dRRKrO/PSDG+mmz",1,0],[1,0.35165831446647644,0.8131845593452454,0.41130098700523376],[3,-0.596979855870917,0,0,0.8022562257061887],[1,-73.30780119634963,0,0]],[23,"Electric_1_RearMirror",2,[[4,-54,[1,"a7ftUecoVQQ49kmgiM6ZYX"],[49],[3],50]],[0,"973X8fmPxZm5po6fpvXBNJ",1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[8,"Electric_1_Window_B",2,[[4,-55,[1,"desWBer9ZQHpoahsREwXVB"],[51],[3],52]],[0,"93dEWc1UtUIpsyk1S6TZRN",1,0],[1,0,1.2916659116744995,-1.2361178398132324],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[23,"Electric_1_Window_F",2,[[4,-56,[1,"08V9tHOf9SC7cDDdgeHMfY"],[53],[3],54]],[0,"21swFehQNQ2LtFudkw4u1y",1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[8,"Electric_1_Window_FL",2,[[4,-57,[1,"da4vDUWwRebJXt654h/7mF"],[55],[3],56]],[0,"2eUplmwvZYka2my7JE+1ju",1,0],[1,0.9143298268318176,0.7311053276062012,0.8720510005950928],[3,-0.6498830672528845,-0.2786610824962516,-0.27866108249625154,0.6498830672528846],[1,-90,-46.418,0]],[8,"Electric_1_Window_FR",2,[[4,-58,[1,"ed1XgnypNdJI3nVfoH6hfP"],[57],[3],58]],[0,"4dc9FxHhRYzJzE0qj7Y2mZ",1,0],[1,-0.9143298268318176,0.7311053276062012,0.8720508217811584],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[8,"Electric_1_Window_ML",2,[[4,-59,[1,"e1q3iT4idZQZsboG2I9ByR"],[59],[3],60]],[0,"e9fYeNpZBZy5svVqMgRwaD",1,0],[1,0.9035815000534058,0.8048095703125,-0.20108069479465485],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[8,"Electric_1_Window_MR",2,[[4,-60,[1,"39UPalDQBaIbIullZs4ocj"],[61],[3],62]],[0,"e1V6UTWfJQzLOYik9adyXn",1,0],[1,-0.9035821557044983,0.8048095703125,-0.20108073949813843],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[23,"Electric_1_Window_RL",2,[[4,-61,[1,"95/5mNyTxZ4751xfk3gmap"],[63],[3],64]],[0,"0a86t2gYtXf4HkmYUFRV/c",1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[23,"Electric_1_Window_RR",2,[[4,-62,[1,"45vG2AZuFWwqWHCBiPbsk5"],[65],[3],66]],[0,"8aqjsxgJ5XG5ojeU2kORrw",1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[23,"Electric_1_Window_TaillightsL",2,[[4,-63,[1,"c9N3IqfsxclIGyjtStU6JR"],[67],[3],68]],[0,"11r16PrihYoYcvmucrBf2V",1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[23,"Electric_1_Window_TaillightsR",2,[[4,-64,[1,"99RJE7oBlc55cNBDHMEVI6"],[69],[3],70]],[0,"a2CCiKfgxbuJupfOwK478a",1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]]],0,[0,7,1,0,0,1,0,0,1,0,0,1,0,0,1,0,-1,3,0,-1,12,0,-2,13,0,-3,14,0,-4,15,0,-5,16,0,-6,17,0,-7,18,0,-8,19,0,-9,20,0,-10,21,0,-11,22,0,-12,23,0,-13,24,0,-14,25,0,-15,26,0,-16,27,0,-17,28,0,-18,29,0,-19,30,0,-20,31,0,-21,32,0,-1,4,0,-2,5,0,-3,6,0,-4,7,0,-5,8,0,-6,9,0,-7,10,0,-8,11,0,0,4,0,0,5,0,0,6,0,0,7,0,0,8,0,0,9,0,0,10,0,0,11,0,0,12,0,0,13,0,0,14,0,0,15,0,0,16,0,0,17,0,0,18,0,0,19,0,0,20,0,0,21,0,0,22,0,0,23,0,0,24,0,0,25,0,0,26,0,0,27,0,0,28,0,0,29,0,0,30,0,0,31,0,0,32,0,12,1,2,3,3,64],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,-2,1,-1,-2,1,-1,-2,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,-2,-3,1,-1,-2,1,-1,-2,1,-1,-2,1,-1,-2,1,-1,-2,1,-1,-2,1,-1,-2,-3,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,6,6,18,6],[19,2,108,19,2,109,19,2,110,2,111,2,112,2,113,2,114,2,115,19,2,45,116,19,2,117,19,2,118,19,2,119,19,2,120,19,121,122,19,2,123,19,2,45,124,46,125,46,126,2,127,8,128,8,129,8,130,8,131,8,132,8,133,8,134,8,135,8,136,8,137,0,0,335,0]],[[[84,"../Mat/builtin-standard-carpaint",[{"hash":2993728960,"name":"../Mat/builtin-standard-carpaint|standard-vs|standard-fs","blocks":[{"name":"Constants","stageFlags":17,"binding":0,"members":[{"name":"tilingOffset","type":16,"count":1},{"name":"albedo","type":16,"count":1},{"name":"albedoScaleAndCutoff","type":16,"count":1},{"name":"pbrParams","type":16,"count":1},{"name":"emissive","type":16,"count":1},{"name":"emissiveScaleParam","type":16,"count":1},{"name":"secondPaintColor","type":16,"count":1},{"name":"coatTiling","type":16,"count":1},{"name":"flakeTiling","type":16,"count":1},{"name":"fresnelScale","type":13,"count":1},{"name":"fresnelHard","type":13,"count":1},{"name":"reflEnvMapScale","type":13,"count":1},{"name":"reflScale","type":13,"count":1},{"name":"reflHard","type":13,"count":1},{"name":"reflLightScale","type":13,"count":1},{"name":"coatNormalScale","type":13,"count":1},{"name":"flakeSize","type":13,"count":1},{"name":"flakeDist","type":13,"count":1},{"name":"flakeNormalScale","type":13,"count":1}],"defines":[]}],"samplerTextures":[{"name":"albedoMap","type":28,"count":1,"stageFlags":16,"binding":1,"defines":["USE_ALBEDO_MAP"]},{"name":"normalMap","type":28,"count":1,"stageFlags":16,"binding":2,"defines":["USE_NORMAL_MAP"]},{"name":"pbrMap","type":28,"count":1,"stageFlags":16,"binding":3,"defines":["USE_PBR_MAP"]},{"name":"metallicRoughnessMap","type":28,"count":1,"stageFlags":16,"binding":4,"defines":["USE_METALLIC_ROUGHNESS_MAP"]},{"name":"occlusionMap","type":28,"count":1,"stageFlags":16,"binding":5,"defines":["USE_OCCLUSION_MAP"]},{"name":"emissiveMap","type":28,"count":1,"stageFlags":16,"binding":6,"defines":["USE_EMISSIVE_MAP"]},{"name":"reflEnvMap","type":31,"count":1,"stageFlags":16,"binding":7,"defines":["USE_CLEARCOAT"]},{"name":"reflLightMap","type":31,"count":1,"stageFlags":16,"binding":8,"defines":["USE_CLEARCOAT"]},{"name":"coatNormal","type":28,"count":1,"stageFlags":16,"binding":9,"defines":["USE_CLEARCOAT"]},{"name":"flakeMask","type":28,"count":1,"stageFlags":16,"binding":10,"defines":["USE_FLAKE"]},{"name":"flakeNormal","type":28,"count":1,"stageFlags":16,"binding":11,"defines":["USE_FLAKE"]}],"samplers":[],"textures":[],"buffers":[{"name":"b_ccLightsBuffer","memoryAccess":1,"stageFlags":16,"binding":12,"defines":["CC_FORWARD_ADD"]},{"name":"b_clusterLightIndicesBuffer","memoryAccess":1,"stageFlags":16,"binding":13,"defines":["CC_FORWARD_ADD"]},{"name":"b_clusterLightGridBuffer","memoryAccess":1,"stageFlags":16,"binding":14,"defines":["CC_FORWARD_ADD"]}],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_normal","format":32,"location":1,"defines":[]},{"name":"a_texCoord","format":21,"location":2,"defines":[]},{"name":"a_tangent","format":44,"location":3,"defines":[]},{"name":"a_joints","location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","format":44,"isInstanced":true,"location":6,"defines":["USE_INSTANCING","CC_USE_BAKED_ANIMATION"]},{"name":"a_matWorld0","format":44,"isInstanced":true,"location":7,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING","CC_USE_LIGHTMAP"]},{"name":"a_localShadowBias","format":21,"isInstanced":true,"location":11,"defines":["USE_INSTANCING","CC_RECEIVE_SHADOW"]},{"name":"a_dyn_batch_id","format":11,"location":12,"defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"a_vertexId","format":11,"location":13,"defines":["CC_USE_MORPH"]},{"name":"a_color","format":44,"location":14,"defines":["USE_VERTEX_COLOR"]},{"name":"a_texCoord1","format":21,"location":15,"defines":[]}],"fragColors":[{"name":"fragColorX","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":["CC_FORWARD_ADD"]},{"name":"fragColor0","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":1,"defines":["CC_FORWARD_ADD","CC_PIPELINE_TYPE"]},{"name":"fragColor1","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":2,"defines":["CC_FORWARD_ADD","CC_PIPELINE_TYPE"]},{"name":"fragColor2","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":3,"defines":["CC_FORWARD_ADD","CC_PIPELINE_TYPE"]}],"glsl3":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\nin vec4 a_tangent;\n#if CC_USE_SKINNING\n    in vec4 a_joints;\n  in vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    in highp vec4 a_jointAnimInfo;\n  #endif\n  in vec4 a_matWorld0;\n  in vec4 a_matWorld1;\n  in vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    in vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    in vec2 a_localShadowBias;\n  #endif\n#elif USE_BATCHING\n  in float a_dyn_batch_id;\n#endif\n#if CC_USE_MORPH\n    in float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\n#if CC_USE_MORPH\n  layout(std140) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n  #endif\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n  vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n  vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n  vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n  }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    layout(std140) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(std140) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      uniform highp sampler2D cc_realtimeJoint;\n    #else\n      layout(std140) uniform CCSkinning {\n        highp vec4 cc_joints[CC_JOINT_UNIFORM_CAPACITY * 3];\n      };\n    #endif\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n        mat4 getJointMatrix (float i) {\n          float x = i;\n          vec4 v1 = texture(cc_realtimeJoint, vec2( x / 256.0, 0.5 / 3.0));\n          vec4 v2 = texture(cc_realtimeJoint, vec2( x / 256.0, 1.5 / 3.0));\n          vec4 v3 = texture(cc_realtimeJoint, vec2( x / 256.0, 2.5 / 3.0));\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #else\n        mat4 getJointMatrix (float i) {\n         float x = 4.0 * i;\n          vec4 v1 = vec4(\n            decode32(texture(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 0.5 / 3.0)))\n          );\n          vec4 v2 = vec4(\n            decode32(texture(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 1.5 / 3.0)))\n          );\n          vec4 v3 = vec4(\n            decode32(texture(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 2.5 / 3.0)))\n          );\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #endif\n    #else\n      mat4 getJointMatrix (float i) {\n        int idx = int(i);\n        vec4 v1 = cc_joints[idx * 3];\n        vec4 v2 = cc_joints[idx * 3 + 1];\n        vec4 v3 = cc_joints[idx * 3 + 2];\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_debug_view_mode;\n  mediump vec4 cc_debug_view_composite_pack_1;\n  mediump vec4 cc_debug_view_composite_pack_2;\n  mediump vec4 cc_debug_view_composite_pack_3;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if !USE_INSTANCING\n  #if USE_BATCHING\n    layout(std140) uniform CCLocalBatched {\n      highp mat4 cc_matWorlds[10];\n    };\n  #else\n    layout(std140) uniform CCLocal {\n      highp mat4 cc_matWorld;\n      highp mat4 cc_matWorldIT;\n      highp vec4 cc_lightingMapUVParam;\n      highp vec4 cc_localShadowBias;\n    };\n  #endif\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n  vec4 secondPaintColor;\n  vec4 coatTiling;\n  vec4 flakeTiling;\n  float fresnelScale;\n  float fresnelHard;\n  float reflEnvMapScale;\n  float reflScale;\n  float reflHard;\n  float reflLightScale;\n  float coatNormalScale;\n  float flakeSize;\n  float flakeDist;\n  float flakeNormalScale;\n};\n#if CC_USE_FOG != 4\n  float LinearFog(vec4 pos, vec3 cameraPos, float fogStart, float fogEnd) {\n      vec4 wPos = pos;\n      float cam_dis = distance(cameraPos, wPos.xyz);\n      return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n  }\n  float ExpFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * fogDensity);\n      return f;\n  }\n  float ExpSquaredFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n      return f;\n  }\n  float LayeredFog(vec4 pos, vec3 cameraPos, float fogTop, float fogRange, float fogAtten) {\n      vec4 wPos = pos;\n      vec3 camWorldProj = cameraPos.xyz;\n      camWorldProj.y = 0.;\n      vec3 worldPosProj = wPos.xyz;\n      worldPosProj.y = 0.;\n      float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n      float fDeltaY, fDensityIntegral;\n      if (cameraPos.y > fogTop) {\n          if (wPos.y < fogTop) {\n              fDeltaY = (fogTop - wPos.y) / fogRange * 2.0;\n              fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n          }\n          else {\n              fDeltaY = 0.;\n              fDensityIntegral = 0.;\n          }\n      }\n      else {\n          if (wPos.y < fogTop) {\n              float fDeltaA = (fogTop - cameraPos.y) / fogRange * 2.;\n              float fDeltaB = (fogTop - wPos.y) / fogRange * 2.;\n              fDeltaY = abs(fDeltaA - fDeltaB);\n              fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n          }\n          else {\n              fDeltaY = abs(fogTop - cameraPos.y) / fogRange * 2.;\n              fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n          }\n      }\n      float fDensity;\n      if (fDeltaY != 0.) {\n          fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n      }\n      else {\n          fDensity = 0.;\n      }\n      float f = exp(-fDensity);\n      return f;\n  }\n#endif\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n#if CC_USE_FOG == 0\n\tfactor = LinearFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.y);\n#elif CC_USE_FOG == 1\n\tfactor = ExpFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 2\n\tfactor = ExpSquaredFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 3\n\tfactor = LayeredFog(pos, cc_cameraPos.xyz, cc_fogAdd.x, cc_fogAdd.y, cc_fogAdd.z);\n#else\n\tfactor = 1.0;\n#endif\n}\n#if !CC_USE_ACCURATE_FOG\nout mediump float v_fog_factor;\n#endif\nvoid CC_TRANSFER_FOG(vec4 pos) {\n#if !CC_USE_ACCURATE_FOG\n    CC_TRANSFER_FOG_BASE(pos, v_fog_factor);\n#endif\n}\nout highp vec4 v_shadowPos;\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n#if CC_SUPPORT_CASCADED_SHADOW_MAP\n  layout(std140) uniform CCCSM {\n    highp vec4 cc_csmViewDir0[4];\n    highp vec4 cc_csmViewDir1[4];\n    highp vec4 cc_csmViewDir2[4];\n    highp vec4 cc_csmAtlas[4];\n    highp mat4 cc_matCSMViewProj[4];\n    highp vec4 cc_csmProjDepthInfo[4];\n    highp vec4 cc_csmProjInfo[4];\n    highp vec4 cc_csmSplitsInfo;\n  };\n#endif\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotShadowMap;\n  #if CC_SUPPORT_CASCADED_SHADOW_MAP\n  #else\n  #endif\n#endif\n#if CC_RECEIVE_SHADOW\n#endif\n#if USE_VERTEX_COLOR\n  in vec4 a_color;\n  out vec4 v_color;\n#endif\nout vec3 v_position;\nout vec3 v_normal;\nout vec2 v_uv;\nout vec2 v_uv1;\nout vec4 viewWorld;\nout vec4 p_position;\nout vec3 v_tangent;\nout vec3 v_bitangent;\n#if HAS_SECOND_UV || CC_USE_LIGHTMAP\n  in vec2 a_texCoord1;\n#endif\n#if CC_USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  out vec3 v_luv;\n  void CCLightingMapCaclUV()\n  {\n  #if !USE_INSTANCING\n    v_luv.xy = cc_lightingMapUVParam.xy + a_texCoord1 * cc_lightingMapUVParam.z;\n    v_luv.z = cc_lightingMapUVParam.w;\n  #else\n    v_luv.xy = a_lightingMapUVParam.xy + a_texCoord1 * a_lightingMapUVParam.z;\n    v_luv.z = a_lightingMapUVParam.w;\n  #endif\n  }\n#endif\nvoid main () {\n  StandardVertInput In;\n  CCVertInput(In);\n  mat4 matWorld, matWorldIT;\n  CCGetWorldMatrixFull(matWorld, matWorldIT);\n  vec4 pos = matWorld * In.position;\n  v_position = pos.xyz;\n  v_normal = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz);\n  #if USE_TWOSIDE\n    vec3 viewDirect = normalize(cc_cameraPos.xyz - v_position);\n    v_normal *= dot(v_normal, viewDirect) < 0.0 ? -1.0 : 1.0;\n  #endif\n  v_tangent = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n  v_bitangent = cross(v_normal, v_tangent) * In.tangent.w;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if SAMPLE_FROM_RT\n    v_uv = cc_cameraPos.w > 1.0 ? vec2(v_uv.x, 1.0 - v_uv.y) : v_uv;\n  #endif\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n    #if SAMPLE_FROM_RT\n      v_uv1 = cc_cameraPos.w > 1.0 ? vec2(v_uv1.x, 1.0 - v_uv1.y) : v_uv1;\n    #endif\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  CC_TRANSFER_FOG(pos);\n  v_shadowPos = cc_matLightViewProj * pos;\n  #if CC_USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    CCLightingMapCaclUV();\n  #endif\n  viewWorld = normalize(cc_cameraPos - In.position);\n  p_position = cc_matProj * (cc_matView * matWorld) * In.position;\n  gl_Position = p_position;\n}","frag":"\nprecision highp float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_debug_view_mode;\n  mediump vec4 cc_debug_view_composite_pack_1;\n  mediump vec4 cc_debug_view_composite_pack_2;\n  mediump vec4 cc_debug_view_composite_pack_3;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n  vec4 secondPaintColor;\n  vec4 coatTiling;\n  vec4 flakeTiling;\n  float fresnelScale;\n  float fresnelHard;\n  float reflEnvMapScale;\n  float reflScale;\n  float reflHard;\n  float reflLightScale;\n  float coatNormalScale;\n  float flakeSize;\n  float flakeDist;\n  float flakeNormalScale;\n};\n#if CC_USE_FOG != 4\n  float LinearFog(vec4 pos, vec3 cameraPos, float fogStart, float fogEnd) {\n      vec4 wPos = pos;\n      float cam_dis = distance(cameraPos, wPos.xyz);\n      return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n  }\n  float ExpFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * fogDensity);\n      return f;\n  }\n  float ExpSquaredFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n      return f;\n  }\n  float LayeredFog(vec4 pos, vec3 cameraPos, float fogTop, float fogRange, float fogAtten) {\n      vec4 wPos = pos;\n      vec3 camWorldProj = cameraPos.xyz;\n      camWorldProj.y = 0.;\n      vec3 worldPosProj = wPos.xyz;\n      worldPosProj.y = 0.;\n      float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n      float fDeltaY, fDensityIntegral;\n      if (cameraPos.y > fogTop) {\n          if (wPos.y < fogTop) {\n              fDeltaY = (fogTop - wPos.y) / fogRange * 2.0;\n              fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n          }\n          else {\n              fDeltaY = 0.;\n              fDensityIntegral = 0.;\n          }\n      }\n      else {\n          if (wPos.y < fogTop) {\n              float fDeltaA = (fogTop - cameraPos.y) / fogRange * 2.;\n              float fDeltaB = (fogTop - wPos.y) / fogRange * 2.;\n              fDeltaY = abs(fDeltaA - fDeltaB);\n              fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n          }\n          else {\n              fDeltaY = abs(fogTop - cameraPos.y) / fogRange * 2.;\n              fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n          }\n      }\n      float fDensity;\n      if (fDeltaY != 0.) {\n          fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n      }\n      else {\n          fDensity = 0.;\n      }\n      float f = exp(-fDensity);\n      return f;\n  }\n#endif\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n#if CC_USE_FOG == 0\n\tfactor = LinearFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.y);\n#elif CC_USE_FOG == 1\n\tfactor = ExpFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 2\n\tfactor = ExpSquaredFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 3\n\tfactor = LayeredFog(pos, cc_cameraPos.xyz, cc_fogAdd.x, cc_fogAdd.y, cc_fogAdd.z);\n#else\n\tfactor = 1.0;\n#endif\n}\nvoid CC_APPLY_FOG_BASE(inout vec4 color, float factor) {\n\tcolor = vec4(mix(cc_fogColor.rgb, color.rgb, factor), color.a);\n}\n#if !CC_USE_ACCURATE_FOG\nin mediump float v_fog_factor;\n#endif\nvoid CC_APPLY_FOG(inout vec4 color) {\n#if !CC_USE_ACCURATE_FOG\n    CC_APPLY_FOG_BASE(color, v_fog_factor);\n#endif\n}\nvoid CC_APPLY_FOG(inout vec4 color, vec3 worldPos) {\n#if CC_USE_ACCURATE_FOG\n    float factor;\n    CC_TRANSFER_FOG_BASE(vec4(worldPos, 1.0), factor);\n#else\n    float factor = v_fog_factor;\n#endif\n    CC_APPLY_FOG_BASE(color, factor);\n}\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_WORLD_POS CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT + 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR CC_SURFACES_DEBUG_VIEW_WORLD_POS + 1\n#define CC_SURFACES_DEBUG_VIEW_FACE_SIDE CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR + 1\n#define CC_SURFACES_DEBUG_VIEW_UV0 CC_SURFACES_DEBUG_VIEW_FACE_SIDE + 1\n#define CC_SURFACES_DEBUG_VIEW_UV1 CC_SURFACES_DEBUG_VIEW_UV0 + 1\n#define CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP CC_SURFACES_DEBUG_VIEW_UV1 + 1\n#define CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP + 1\n#define CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT + 1\n#define CC_SURFACES_DEBUG_VIEW_BASE_COLOR CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR CC_SURFACES_DEBUG_VIEW_BASE_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSPARENCY CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_METALLIC CC_SURFACES_DEBUG_VIEW_TRANSPARENCY + 1\n#define CC_SURFACES_DEBUG_VIEW_ROUGHNESS CC_SURFACES_DEBUG_VIEW_METALLIC + 1\n#define CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY CC_SURFACES_DEBUG_VIEW_ROUGHNESS + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_ALL CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE CC_SURFACES_DEBUG_VIEW_DIRECT_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_ALL CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_EMISSIVE CC_SURFACES_DEBUG_VIEW_ENV_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_LIGHT_MAP CC_SURFACES_DEBUG_VIEW_EMISSIVE + 1\n#define CC_SURFACES_DEBUG_VIEW_SHADOW CC_SURFACES_DEBUG_VIEW_LIGHT_MAP + 1\n#define CC_SURFACES_DEBUG_VIEW_AO CC_SURFACES_DEBUG_VIEW_SHADOW + 1\n#define CC_SURFACES_DEBUG_VIEW_FOG CC_SURFACES_DEBUG_VIEW_AO + 1\n#define CC_SURFACES_DEBUG_VIEW_SINGLE 1\n#define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC 2\n#define IS_DEBUG_VIEW_LIGHTING_ENABLE_WITH_ALBEDO (cc_debug_view_mode.y > 0.0)\n#define IS_DEBUG_VIEW_MISC_ENABLE_CSM_LAYER_COLORATION (cc_debug_view_mode.z > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_DIFFUSE (cc_debug_view_composite_pack_1.x > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_SPECULAR (cc_debug_view_composite_pack_1.y > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_ENV_DIFFUSE (cc_debug_view_composite_pack_1.z > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_ENV_SPECULAR (cc_debug_view_composite_pack_1.w > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_EMISSIVE (cc_debug_view_composite_pack_2.x > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_LIGHT_MAP (cc_debug_view_composite_pack_2.y > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_SHADOW (cc_debug_view_composite_pack_2.z > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_AO (cc_debug_view_composite_pack_2.w > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_NORMAL_MAP (cc_debug_view_composite_pack_3.x > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_FOG (cc_debug_view_composite_pack_3.y > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TONE_MAPPING (cc_debug_view_composite_pack_3.z > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION (cc_debug_view_composite_pack_3.w > 0.0)\nvec3 SRGBToLinear (vec3 gamma) {\n#ifdef CC_USE_SURFACE_SHADER\n  #if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION) {\n      return gamma;\n    }\n  #endif\n#endif\n  return gamma * gamma;\n}\nvec3 LinearToSRGB(vec3 linear) {\n#ifdef CC_USE_SURFACE_SHADER\n  #if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION) {\n      return linear;\n    }\n  #endif\n#endif\n  return sqrt(linear);\n}\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n#if CC_SUPPORT_CASCADED_SHADOW_MAP\n  layout(std140) uniform CCCSM {\n    highp vec4 cc_csmViewDir0[4];\n    highp vec4 cc_csmViewDir1[4];\n    highp vec4 cc_csmViewDir2[4];\n    highp vec4 cc_csmAtlas[4];\n    highp mat4 cc_matCSMViewProj[4];\n    highp vec4 cc_csmProjDepthInfo[4];\n    highp vec4 cc_csmProjInfo[4];\n    highp vec4 cc_csmSplitsInfo;\n  };\n#endif\nfloat GetLinearDepthFromViewSpace(vec3 viewPos, float near, float far) {\n  float dist = length(viewPos);\n  return (dist - near) / (far - near);\n}\nvec3 RotationVecFromAxisY(vec3 v, float cosTheta, float sinTheta)\n{\n    vec3 result;\n    result.x = dot(v, vec3(cosTheta, 0.0, -sinTheta));\n    result.y = v.y;\n    result.z = dot(v, vec3(sinTheta, 0.0,  cosTheta));\n    return result;\n}\nfloat CCGetLinearDepth(vec3 worldPos, float viewSpaceBias) {\n\tvec4 viewPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  viewPos.z += viewSpaceBias;\n\treturn GetLinearDepthFromViewSpace(viewPos.xyz, cc_shadowNFLSInfo.x, cc_shadowNFLSInfo.y);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n\treturn CCGetLinearDepth(worldPos, 0.0);\n}\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotShadowMap;\n    highp float unpackHighpData (float mainPart, float modPart) {\n      highp float data = mainPart;\n      return data + modPart;\n    }\n    highp float unpackHighpData (float mainPart, float modPart, const float modValue) {\n      highp float data = mainPart * modValue;\n      return data + modPart * modValue;\n    }\n    highp vec2 unpackHighpData (vec2 mainPart, vec2 modPart) {\n      highp vec2 data = mainPart;\n      return data + modPart;\n    }\n    highp vec2 unpackHighpData (vec2 mainPart, vec2 modPart, const float modValue) {\n      highp vec2 data = mainPart * modValue;\n      return data + modPart * modValue;\n    }\n    highp vec3 unpackHighpData (vec3 mainPart, vec3 modPart) {\n      highp vec3 data = mainPart;\n      return data + modPart;\n    }\n    highp vec3 unpackHighpData (vec3 mainPart, vec3 modPart, const float modValue) {\n      highp vec3 data = mainPart * modValue;\n      return data + modPart * modValue;\n    }\n    highp vec4 unpackHighpData (vec4 mainPart, vec4 modPart) {\n      highp vec4 data = mainPart;\n      return data + modPart;\n    }\n    highp vec4 unpackHighpData (vec4 mainPart, vec4 modPart, const float modValue) {\n      highp vec4 data = mainPart * modValue;\n      return data + modPart * modValue;\n    }\n  float NativePCFShadowFactorHard (vec3 shadowNDCPos, sampler2D shadowMap, vec2 shadowMapResolution)\n  {\n    #if CC_SHADOWMAP_FORMAT == 1\n      return step(shadowNDCPos.z, dot(texture(shadowMap, shadowNDCPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    #else\n      return step(shadowNDCPos.z, texture(shadowMap, shadowNDCPos.xy).x);\n    #endif\n  }\n  float NativePCFShadowFactorSoft (vec3 shadowNDCPos, sampler2D shadowMap, vec2 shadowMapResolution)\n  {\n    vec2 oneTap = 1.0 / shadowMapResolution;\n    vec2 shadowNDCPos_offset = shadowNDCPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    #if CC_SHADOWMAP_FORMAT == 1\n      block0 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos_offset.x, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos_offset.x, shadowNDCPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    #else\n      block0 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos.y)).x);\n      block1 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos_offset.x, shadowNDCPos.y)).x);\n      block2 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset.y)).x);\n      block3 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos_offset.x, shadowNDCPos_offset.y)).x);\n    #endif\n    float coefX   = mod(shadowNDCPos.x, oneTap.x) * shadowMapResolution.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(shadowNDCPos.y, oneTap.y) * shadowMapResolution.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float NativePCFShadowFactorSoft3X (vec3 shadowNDCPos, sampler2D shadowMap, vec2 shadowMapResolution)\n  {\n    vec2 oneTap = 1.0 / shadowMapResolution;\n    float shadowNDCPos_offset_L = shadowNDCPos.x - oneTap.x;\n    float shadowNDCPos_offset_R = shadowNDCPos.x + oneTap.x;\n    float shadowNDCPos_offset_U = shadowNDCPos.y - oneTap.y;\n    float shadowNDCPos_offset_D = shadowNDCPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    #if CC_SHADOWMAP_FORMAT == 1\n      block0 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    #else\n      block0 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos_offset_U)).x);\n      block1 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset_U)).x);\n      block2 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos_offset_U)).x);\n      block3 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos.y)).x);\n      block4 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos.y)).x);\n      block5 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos.y)).x);\n      block6 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos_offset_D)).x);\n      block7 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset_D)).x);\n      block8 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos_offset_D)).x);\n    #endif\n    float coefX = mod(shadowNDCPos.x, oneTap.x) * shadowMapResolution.x;\n    float coefY = mod(shadowNDCPos.y, oneTap.y) * shadowMapResolution.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\n  float NativePCFShadowFactorSoft5X (vec3 shadowNDCPos, sampler2D shadowMap, vec2 shadowMapResolution)\n  {\n    vec2 oneTap = 1.0 / shadowMapResolution;\n    vec2 twoTap = oneTap * 2.0;\n    vec2 offset1 = shadowNDCPos.xy + vec2(-twoTap.x, -twoTap.y);\n    vec2 offset2 = shadowNDCPos.xy + vec2(-oneTap.x, -twoTap.y);\n    vec2 offset3 = shadowNDCPos.xy + vec2(0.0, -twoTap.y);\n    vec2 offset4 = shadowNDCPos.xy + vec2(oneTap.x, -twoTap.y);\n    vec2 offset5 = shadowNDCPos.xy + vec2(twoTap.x, -twoTap.y);\n    vec2 offset6 = shadowNDCPos.xy + vec2(-twoTap.x, -oneTap.y);\n    vec2 offset7 = shadowNDCPos.xy + vec2(-oneTap.x, -oneTap.y);\n    vec2 offset8 = shadowNDCPos.xy + vec2(0.0, -oneTap.y);\n    vec2 offset9 = shadowNDCPos.xy + vec2(oneTap.x, -oneTap.y);\n    vec2 offset10 = shadowNDCPos.xy + vec2(twoTap.x, -oneTap.y);\n    vec2 offset11 = shadowNDCPos.xy + vec2(-twoTap.x, 0.0);\n    vec2 offset12 = shadowNDCPos.xy + vec2(-oneTap.x, 0.0);\n    vec2 offset13 = shadowNDCPos.xy + vec2(0.0, 0.0);\n    vec2 offset14 = shadowNDCPos.xy + vec2(oneTap.x, 0.0);\n    vec2 offset15 = shadowNDCPos.xy + vec2(twoTap.x, 0.0);\n    vec2 offset16 = shadowNDCPos.xy + vec2(-twoTap.x, oneTap.y);\n    vec2 offset17 = shadowNDCPos.xy + vec2(-oneTap.x, oneTap.y);\n    vec2 offset18 = shadowNDCPos.xy + vec2(0.0, oneTap.y);\n    vec2 offset19 = shadowNDCPos.xy + vec2(oneTap.x, oneTap.y);\n    vec2 offset20 = shadowNDCPos.xy + vec2(twoTap.x, oneTap.y);\n    vec2 offset21 = shadowNDCPos.xy + vec2(-twoTap.x, twoTap.y);\n    vec2 offset22 = shadowNDCPos.xy + vec2(-oneTap.x, twoTap.y);\n    vec2 offset23 = shadowNDCPos.xy + vec2(0.0, twoTap.y);\n    vec2 offset24 = shadowNDCPos.xy + vec2(oneTap.x, twoTap.y);\n    vec2 offset25 = shadowNDCPos.xy + vec2(twoTap.x, twoTap.y);\n    float block1, block2, block3, block4, block5, block6, block7, block8, block9, block10, block11, block12, block13, block14, block15, block16, block17, block18, block19, block20, block21, block22, block23, block24, block25;\n    #if CC_SHADOWMAP_FORMAT == 1\n      block1 = step(shadowNDCPos.z, dot(texture(shadowMap, offset1), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(shadowNDCPos.z, dot(texture(shadowMap, offset2), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(shadowNDCPos.z, dot(texture(shadowMap, offset3), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(shadowNDCPos.z, dot(texture(shadowMap, offset4), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(shadowNDCPos.z, dot(texture(shadowMap, offset5), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(shadowNDCPos.z, dot(texture(shadowMap, offset6), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(shadowNDCPos.z, dot(texture(shadowMap, offset7), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(shadowNDCPos.z, dot(texture(shadowMap, offset8), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block9 = step(shadowNDCPos.z, dot(texture(shadowMap, offset9), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block10 = step(shadowNDCPos.z, dot(texture(shadowMap, offset10), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block11 = step(shadowNDCPos.z, dot(texture(shadowMap, offset11), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block12 = step(shadowNDCPos.z, dot(texture(shadowMap, offset12), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block13 = step(shadowNDCPos.z, dot(texture(shadowMap, offset13), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block14 = step(shadowNDCPos.z, dot(texture(shadowMap, offset14), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block15 = step(shadowNDCPos.z, dot(texture(shadowMap, offset15), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block16 = step(shadowNDCPos.z, dot(texture(shadowMap, offset16), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block17 = step(shadowNDCPos.z, dot(texture(shadowMap, offset17), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block18 = step(shadowNDCPos.z, dot(texture(shadowMap, offset18), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block19 = step(shadowNDCPos.z, dot(texture(shadowMap, offset19), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block20 = step(shadowNDCPos.z, dot(texture(shadowMap, offset20), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block21 = step(shadowNDCPos.z, dot(texture(shadowMap, offset21), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block22 = step(shadowNDCPos.z, dot(texture(shadowMap, offset22), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block23 = step(shadowNDCPos.z, dot(texture(shadowMap, offset23), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block24 = step(shadowNDCPos.z, dot(texture(shadowMap, offset24), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block25 = step(shadowNDCPos.z, dot(texture(shadowMap, offset25), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    #else\n      block1 = step(shadowNDCPos.z, texture(shadowMap, offset1).x);\n      block2 = step(shadowNDCPos.z, texture(shadowMap, offset2).x);\n      block3 = step(shadowNDCPos.z, texture(shadowMap, offset3).x);\n      block4 = step(shadowNDCPos.z, texture(shadowMap, offset4).x);\n      block5 = step(shadowNDCPos.z, texture(shadowMap, offset5).x);\n      block6 = step(shadowNDCPos.z, texture(shadowMap, offset6).x);\n      block7 = step(shadowNDCPos.z, texture(shadowMap, offset7).x);\n      block8 = step(shadowNDCPos.z, texture(shadowMap, offset8).x);\n      block9 = step(shadowNDCPos.z, texture(shadowMap, offset9).x);\n      block10 = step(shadowNDCPos.z, texture(shadowMap, offset10).x);\n      block11 = step(shadowNDCPos.z, texture(shadowMap, offset11).x);\n      block12 = step(shadowNDCPos.z, texture(shadowMap, offset12).x);\n      block13 = step(shadowNDCPos.z, texture(shadowMap, offset13).x);\n      block14 = step(shadowNDCPos.z, texture(shadowMap, offset14).x);\n      block15 = step(shadowNDCPos.z, texture(shadowMap, offset15).x);\n      block16 = step(shadowNDCPos.z, texture(shadowMap, offset16).x);\n      block17 = step(shadowNDCPos.z, texture(shadowMap, offset17).x);\n      block18 = step(shadowNDCPos.z, texture(shadowMap, offset18).x);\n      block19 = step(shadowNDCPos.z, texture(shadowMap, offset19).x);\n      block20 = step(shadowNDCPos.z, texture(shadowMap, offset20).x);\n      block21 = step(shadowNDCPos.z, texture(shadowMap, offset21).x);\n      block22 = step(shadowNDCPos.z, texture(shadowMap, offset22).x);\n      block23 = step(shadowNDCPos.z, texture(shadowMap, offset23).x);\n      block24 = step(shadowNDCPos.z, texture(shadowMap, offset24).x);\n      block25 = step(shadowNDCPos.z, texture(shadowMap, offset25).x);\n    #endif\n    vec2 coef = fract(shadowNDCPos.xy * shadowMapResolution);\n    vec2 v1X1 = mix(vec2(block1, block6), vec2(block2, block7), coef.xx);\n    vec2 v1X2 = mix(vec2(block2, block7), vec2(block3, block8), coef.xx);\n    vec2 v1X3 = mix(vec2(block3, block8), vec2(block4, block9), coef.xx);\n    vec2 v1X4 = mix(vec2(block4, block9), vec2(block5, block10), coef.xx);\n    float v1 = mix(v1X1.x, v1X1.y, coef.y) + mix(v1X2.x, v1X2.y, coef.y) + mix(v1X3.x, v1X3.y, coef.y) + mix(v1X4.x, v1X4.y, coef.y);\n    vec2 v2X1 = mix(vec2(block6, block11), vec2(block7, block12), coef.xx);\n    vec2 v2X2 = mix(vec2(block7, block12), vec2(block8, block13), coef.xx);\n    vec2 v2X3 = mix(vec2(block8, block13), vec2(block9, block14), coef.xx);\n    vec2 v2X4 = mix(vec2(block9, block14), vec2(block10, block15), coef.xx);\n    float v2 = mix(v2X1.x, v2X1.y, coef.y) + mix(v2X2.x, v2X2.y, coef.y) + mix(v2X3.x, v2X3.y, coef.y) + mix(v2X4.x, v2X4.y, coef.y);\n    vec2 v3X1 = mix(vec2(block11, block16), vec2(block12, block17), coef.xx);\n    vec2 v3X2 = mix(vec2(block12, block17), vec2(block13, block18), coef.xx);\n    vec2 v3X3 = mix(vec2(block13, block18), vec2(block14, block19), coef.xx);\n    vec2 v3X4 = mix(vec2(block14, block19), vec2(block15, block20), coef.xx);\n    float v3 = mix(v3X1.x, v3X1.y, coef.y) + mix(v3X2.x, v3X2.y, coef.y) + mix(v3X3.x, v3X3.y, coef.y) + mix(v3X4.x, v3X4.y, coef.y);\n    vec2 v4X1 = mix(vec2(block16, block21), vec2(block17, block22), coef.xx);\n    vec2 v4X2 = mix(vec2(block17, block22), vec2(block18, block23), coef.xx);\n    vec2 v4X3 = mix(vec2(block18, block23), vec2(block19, block24), coef.xx);\n    vec2 v4X4 = mix(vec2(block19, block24), vec2(block20, block25), coef.xx);\n    float v4 = mix(v4X1.x, v4X1.y, coef.y) + mix(v4X2.x, v4X2.y, coef.y) + mix(v4X3.x, v4X3.y, coef.y) + mix(v4X4.x, v4X4.y, coef.y);\n    float fAvg = (v1 + v2 + v3 + v4) * 0.0625;\n    return fAvg;\n  }\n  bool GetShadowNDCPos(out vec3 shadowNDCPos, vec4 shadowPosWithDepthBias)\n  {\n  \tshadowNDCPos = shadowPosWithDepthBias.xyz / shadowPosWithDepthBias.w * 0.5 + 0.5;\n  \tif (shadowNDCPos.x < 0.0 || shadowNDCPos.x > 1.0 ||\n  \t\tshadowNDCPos.y < 0.0 || shadowNDCPos.y > 1.0 ||\n  \t\tshadowNDCPos.z < 0.0 || shadowNDCPos.z > 1.0) {\n  \t\treturn false;\n  \t}\n  \tshadowNDCPos.xy = cc_cameraPos.w == 1.0 ? vec2(shadowNDCPos.xy.x, 1.0 - shadowNDCPos.xy.y) : shadowNDCPos.xy;\n  \treturn true;\n  }\n  vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal, float normalBias, vec3 matViewDir0, vec3 matViewDir1, vec3 matViewDir2, vec2 projScaleXY)\n  {\n    vec4 newShadowPos = shadowPos;\n    if (normalBias > EPSILON_LOWP)\n    {\n      vec3 viewNormal = vec3(dot(matViewDir0, worldNormal), dot(matViewDir1, worldNormal), dot(matViewDir2, worldNormal));\n      if (viewNormal.z < 0.1)\n        newShadowPos.xy += viewNormal.xy * projScaleXY * normalBias * clamp(viewNormal.z, 0.001, 0.1);\n    }\n    return newShadowPos;\n  }\n  vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal, float normalBias, mat4 matLightView, vec2 projScaleXY)\n  {\n  \tvec4 newShadowPos = shadowPos;\n  \tif (normalBias > EPSILON_LOWP)\n  \t{\n  \t\tvec4 viewNormal = matLightView * vec4(worldNormal, 0.0);\n  \t\tif (viewNormal.z < 0.1)\n  \t\t\tnewShadowPos.xy += viewNormal.xy * projScaleXY * normalBias * clamp(viewNormal.z, 0.001, 0.1);\n  \t}\n  \treturn newShadowPos;\n  }\n  vec4 ApplyShadowDepthBias_Perspective(vec4 shadowPos, float viewspaceDepthBias)\n  {\n  \tvec3 viewSpacePos;\n  \tviewSpacePos.xy = shadowPos.xy * cc_shadowProjInfo.zw;\n  \tviewSpacePos.z = shadowPos.z * cc_shadowInvProjDepthInfo.x + shadowPos.w * cc_shadowInvProjDepthInfo.y;\n  \tviewSpacePos.xyz += cc_shadowProjDepthInfo.z * normalize(viewSpacePos.xyz) * viewspaceDepthBias;\n  \tvec4 clipSpacePos;\n  \tclipSpacePos.xy = viewSpacePos.xy * cc_shadowProjInfo.xy;\n  \tclipSpacePos.zw = viewSpacePos.z * cc_shadowProjDepthInfo.xz + vec2(cc_shadowProjDepthInfo.y, 0.0);\n  \t#if CC_SHADOWMAP_USE_LINEAR_DEPTH\n  \t\tclipSpacePos.z = GetLinearDepthFromViewSpace(viewSpacePos.xyz, cc_shadowNFLSInfo.x, cc_shadowNFLSInfo.y);\n  \t\tclipSpacePos.z = (clipSpacePos.z * 2.0 - 1.0) * clipSpacePos.w;\n  \t#endif\n  \treturn clipSpacePos;\n  }\n  vec4 ApplyShadowDepthBias_Orthographic(vec4 shadowPos, float viewspaceDepthBias, float projScaleZ, float projBiasZ)\n  {\n  \tfloat coeffA = projScaleZ;\n  \tfloat coeffB = projBiasZ;\n  \tfloat viewSpacePos_z = (shadowPos.z - coeffB) / coeffA;\n  \tviewSpacePos_z += viewspaceDepthBias;\n  \tvec4 result = shadowPos;\n  \tresult.z = viewSpacePos_z * coeffA + coeffB;\n  \treturn result;\n  }\n  vec4 ApplyShadowDepthBias_PerspectiveLinearDepth(vec4 shadowPos, float viewspaceDepthBias, vec3 worldPos)\n  {\n    shadowPos.z = CCGetLinearDepth(worldPos, viewspaceDepthBias) * 2.0 - 1.0;\n    shadowPos.z *= shadowPos.w;\n    return shadowPos;\n  }\n  float CCGetDirLightShadowFactorHard (vec4 shadowPosWithDepthBias) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorHard(shadowNDCPos, cc_shadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetDirLightShadowFactorSoft (vec4 shadowPosWithDepthBias) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft(shadowNDCPos, cc_shadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetDirLightShadowFactorSoft3X (vec4 shadowPosWithDepthBias) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft3X(shadowNDCPos, cc_shadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetDirLightShadowFactorSoft5X (vec4 shadowPosWithDepthBias) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft5X(shadowNDCPos, cc_shadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetSpotLightShadowFactorHard (vec4 shadowPosWithDepthBias, vec3 worldPos) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorHard(shadowNDCPos, cc_spotShadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetSpotLightShadowFactorSoft (vec4 shadowPosWithDepthBias, vec3 worldPos) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft(shadowNDCPos, cc_spotShadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetSpotLightShadowFactorSoft3X (vec4 shadowPosWithDepthBias, vec3 worldPos) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft3X(shadowNDCPos, cc_spotShadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetSpotLightShadowFactorSoft5X (vec4 shadowPosWithDepthBias, vec3 worldPos) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft5X(shadowNDCPos, cc_spotShadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCSpotShadowFactorBase(vec4 shadowPos, vec3 worldPos, vec2 shadowBias)\n  {\n    float pcf = cc_shadowWHPBInfo.z;\n    vec4 pos = vec4(1.0);\n    #if CC_SHADOWMAP_USE_LINEAR_DEPTH\n      pos = ApplyShadowDepthBias_PerspectiveLinearDepth(shadowPos, shadowBias.x, worldPos);\n    #else\n      pos = ApplyShadowDepthBias_Perspective(shadowPos, shadowBias.x);\n    #endif\n    if (pcf > 2.9) {\n      return CCGetSpotLightShadowFactorSoft5X(pos, worldPos);\n    }else if (pcf > 1.9) {\n      return CCGetSpotLightShadowFactorSoft3X(pos, worldPos);\n    }else if (pcf > 0.9) {\n      return CCGetSpotLightShadowFactorSoft(pos, worldPos);\n    }else {\n      return CCGetSpotLightShadowFactorHard(pos, worldPos);\n    }\n  }\n  float CCShadowFactorBase(vec4 shadowPos, vec3 N, vec2 shadowBias)\n  {\n    vec4 pos = ApplyShadowDepthBias_FaceNormal(shadowPos, N, shadowBias.y, cc_matLightView, cc_shadowProjInfo.xy);\n    pos = ApplyShadowDepthBias_Orthographic(pos, shadowBias.x, cc_shadowProjDepthInfo.x, cc_shadowProjDepthInfo.y);\n    float realtimeShadow = 1.0;\n    #if CC_DIR_SHADOW_PCF_TYPE == 3\n      realtimeShadow = CCGetDirLightShadowFactorSoft5X(pos);\n    #endif\n    #if CC_DIR_SHADOW_PCF_TYPE == 2\n      realtimeShadow =  CCGetDirLightShadowFactorSoft3X(pos);\n    #endif\n    #if CC_DIR_SHADOW_PCF_TYPE == 1\n      realtimeShadow = CCGetDirLightShadowFactorSoft(pos);\n    #endif\n    #if CC_DIR_SHADOW_PCF_TYPE == 0\n      realtimeShadow = CCGetDirLightShadowFactorHard(pos);\n    #endif\n    return mix(realtimeShadow, 1.0, cc_shadowNFLSInfo.w);\n  }\n  #if CC_SUPPORT_CASCADED_SHADOW_MAP\n    int CCGetCSMLevel(out vec4 csmPos, out vec4 shadowProjDepthInfo, out vec4 shadowProjInfo, out vec3 shadowViewDir0, out vec3 shadowViewDir1, out vec3 shadowViewDir2, vec3 worldPos) {\n      int layer = -1;\n      highp float layerThreshold = cc_csmViewDir0[0].w;\n      for (int i = 0; i < 4; i++) {\n        vec4 shadowPos = cc_matCSMViewProj[i] * vec4(worldPos.xyz, 1.0);\n        vec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\n        if (clipPos.x >= (0.0 + layerThreshold) && clipPos.x <= (1.0 - layerThreshold) &&\n            clipPos.y >= (0.0 + layerThreshold) && clipPos.y <= (1.0 - layerThreshold) &&\n            clipPos.z >= 0.0 && clipPos.z <= 1.0 && layer < 0) {\n          csmPos = cc_matCSMViewProj[i] * vec4(worldPos.xyz, 1.0);\n          csmPos.xy = csmPos.xy * cc_csmAtlas[i].xy + cc_csmAtlas[i].zw;\n          shadowProjDepthInfo = cc_csmProjDepthInfo[i];\n          shadowProjInfo = cc_csmProjInfo[i];\n          shadowViewDir0 = cc_csmViewDir0[i].xyz;\n          shadowViewDir1 = cc_csmViewDir1[i].xyz;\n          shadowViewDir2 = cc_csmViewDir2[i].xyz;\n          layer = i;\n        }\n      }\n      return layer;\n    }\n    float CCCSMFactorBase(vec3 worldPos, vec3 N, vec2 shadowBias)\n    {\n      vec4 csmPos = vec4(1.0);\n      vec4 shadowProjDepthInfo, shadowProjInfo;\n      vec3 shadowViewDir0, shadowViewDir1, shadowViewDir2;\n      int level = CCGetCSMLevel(csmPos, shadowProjDepthInfo, shadowProjInfo, shadowViewDir0, shadowViewDir1, shadowViewDir2, worldPos);\n      if (level < 0) { return 1.0; }\n      vec4 pos = ApplyShadowDepthBias_FaceNormal(csmPos, N, shadowBias.y, shadowViewDir0, shadowViewDir1, shadowViewDir2, shadowProjInfo.xy);\n      pos = ApplyShadowDepthBias_Orthographic(pos, shadowBias.x, shadowProjDepthInfo.x, shadowProjDepthInfo.y);\n      float realtimeShadow = 1.0;\n      #if CC_DIR_SHADOW_PCF_TYPE == 3\n        realtimeShadow = CCGetDirLightShadowFactorSoft5X(pos);\n      #endif\n      #if CC_DIR_SHADOW_PCF_TYPE == 2\n        realtimeShadow = CCGetDirLightShadowFactorSoft3X(pos);\n      #endif\n      #if CC_DIR_SHADOW_PCF_TYPE == 1\n        realtimeShadow = CCGetDirLightShadowFactorSoft(pos);\n      #endif\n      #if CC_DIR_SHADOW_PCF_TYPE == 0\n        realtimeShadow = CCGetDirLightShadowFactorHard(pos);\n      #endif\n      return mix(realtimeShadow, 1.0, cc_shadowNFLSInfo.w);\n    }\n  #else\n    int CCGetCSMLevel(out vec4 csmPos, out vec4 shadowProjDepthInfo, out vec4 shadowProjInfo, out vec3 shadowViewDir0, out vec3 shadowViewDir1, out vec3 shadowViewDir2, vec3 worldPos) {\n      return -1;\n    }\n    float CCCSMFactorBase(vec3 worldPos, vec3 N, vec2 shadowBias) {\n      vec4 shadowPos = cc_matLightViewProj * vec4(worldPos, 1.0);\n      return CCShadowFactorBase(shadowPos, N, shadowBias);\n    }\n  #endif\n#endif\n#if CC_USE_IBL\n  uniform samplerCube cc_environment;\n  vec4 fragTextureLod (sampler2D tex, vec2 coord, float lod) {\n      return textureLod(tex, coord, lod);\n  }\n  vec4 fragTextureLod (samplerCube tex, vec3 coord, float lod) {\n      return textureLod(tex, coord, lod);\n  }\n  vec3 unpackRGBE (vec4 rgbe) {\n    return rgbe.rgb * pow(1.1, rgbe.a * 255.0 - 128.0);\n  }\n  #if CC_USE_DIFFUSEMAP\n    uniform samplerCube cc_diffuseMap;\n  #endif\n#endif\nfloat GGXMobile (float roughness, float NoH, vec3 H, vec3 N) {\n  vec3 NxH = cross(N, H);\n  float OneMinusNoHSqr = dot(NxH, NxH);\n  float a = roughness * roughness;\n  float n = NoH * a;\n  float p = a / (OneMinusNoHSqr + n * n);\n  return p * p;\n}\nfloat CalcSpecular (float roughness, float NoH, vec3 H, vec3 N) {\n  return (roughness * 0.25 + 0.25) * GGXMobile(roughness, NoH, H, N);\n}\nvec3 BRDFApprox (vec3 specular, float roughness, float NoV) {\n  const vec4 c0 = vec4(-1.0, -0.0275, -0.572, 0.022);\n  const vec4 c1 = vec4(1.0, 0.0425, 1.04, -0.04);\n  vec4 r = roughness * c0 + c1;\n  float a004 = min(r.x * r.x, exp2(-9.28 * NoV)) * r.x + r.y;\n  vec2 AB = vec2(-1.04, 1.04) * a004 + r.zw;\n  AB.y *= clamp(50.0 * specular.g, 0.0, 1.0);\n  return specular * AB.x + AB.y;\n}\n#if USE_REFLECTION_DENOISE\n  vec3 GetEnvReflectionWithMipFiltering(vec3 R, float roughness, float mipCount, float denoiseIntensity) {\n    #if CC_USE_IBL\n    \tfloat mip = roughness * (mipCount - 1.0);\n    \tfloat delta = (dot(dFdx(R), dFdy(R))) * 1000.0;\n    \tfloat mipBias = mix(0.0, 5.0, clamp(delta, 0.0, 1.0));\n    \tvec4 biased = fragTextureLod(cc_environment, R, mip + mipBias);\n     \tvec4 filtered = texture(cc_environment, R);\n      #if CC_USE_IBL == 2\n      \tbiased.rgb = unpackRGBE(biased);\n      \tfiltered.rgb = unpackRGBE(filtered);\n      #else\n      \tbiased.rgb = SRGBToLinear(biased.rgb);\n      \tfiltered.rgb = SRGBToLinear(filtered.rgb);\n      #endif\n      return mix(biased.rgb, filtered.rgb, denoiseIntensity);\n    #else\n      return vec3(0.0, 0.0, 0.0);\n    #endif\n  }\n#endif\nstruct StandardSurface {\n  vec4 albedo;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    vec3 position, position_fract_part;\n    #else\n    vec3 position;\n    #endif\n  vec3 normal;\n  vec3 emissive;\n  vec3 lightmap;\n  float lightmap_test;\n  float roughness;\n  float metallic;\n  float occlusion;\n  float specularIntensity;\n  #if CC_RECEIVE_SHADOW\n    vec2 shadowBias;\n  #endif\n};\nvec4 CCStandardShadingBase (StandardSurface s, vec4 shadowPos) {\n  vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n  vec3 specular = mix(vec3(0.08 * s.specularIntensity), s.albedo.rgb, s.metallic);\n  vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n  vec3 N = normalize(s.normal);\n  vec3 V = normalize(cc_cameraPos.xyz - position);\n  vec3 L = normalize(-cc_mainLitDir.xyz);\n  float NL = max(dot(N, L), 0.0);\n  float shadow = 1.0;\n  #if CC_RECEIVE_SHADOW && CC_SHADOW_TYPE == 2\n    if (NL > 0.0 && cc_mainLitDir.w > 0.0) {\n      if (cc_shadowLPNNInfo.w > 0.0) {\n        #if CC_DIR_LIGHT_SHADOW_TYPE == 2\n          shadow = CCCSMFactorBase(position, N, s.shadowBias);\n        #endif\n      } else {\n        #if CC_DIR_LIGHT_SHADOW_TYPE == 1\n          shadow = CCShadowFactorBase(shadowPos, N, s.shadowBias);\n        #endif\n      }\n    }\n  #endif\n  #if CC_USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    vec3 lightmap = s.lightmap.rgb;\n    #if CC_USE_HDR\n        lightmap.rgb *= cc_exposure.w * cc_exposure.x;\n    #endif\n    vec3 finalColor = diffuse * lightmap.rgb * shadow;\n  #else\n    float NV = max(abs(dot(N, V)), 0.0);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 H = normalize(L + V);\n    float NH = max(dot(N, H), 0.0);\n    vec3 finalColor = NL * cc_mainLitColor.rgb * cc_mainLitColor.w;\n    vec3 diffuseContrib = diffuse / PI;\n    vec3 specularContrib = specular * CalcSpecular(s.roughness, NH, H, N);\n    vec3 dirlightContrib = (diffuseContrib + specularContrib);\n    dirlightContrib *= shadow;\n    finalColor *= dirlightContrib;\n  #endif\n  float fAmb = 0.5 - N.y * 0.5;\n  vec3 ambDiff = mix(cc_ambientSky.rgb, cc_ambientGround.rgb, fAmb);\n  #if CC_USE_IBL\n    #if CC_USE_DIFFUSEMAP\n      vec4 diffuseMap = texture(cc_diffuseMap, N);\n      #if CC_USE_DIFFUSEMAP == 2\n        ambDiff = unpackRGBE(diffuseMap);\n      #else\n        ambDiff = SRGBToLinear(diffuseMap.rgb);\n      #endif\n    #endif\n    vec3 R = normalize(reflect(-V, N));\n    vec3 rotationDir = RotationVecFromAxisY(R.xyz, cc_surfaceTransform.z, cc_surfaceTransform.w);\n    #if USE_REFLECTION_DENOISE && !CC_IBL_CONVOLUTED\n      vec3 env = GetEnvReflectionWithMipFiltering(rotationDir, s.roughness, cc_ambientGround.w, 0.6);\n    #else\n      vec4 envmap = fragTextureLod(cc_environment, rotationDir, s.roughness * (cc_ambientGround.w - 1.0));\n      #if CC_USE_IBL == 2\n        vec3 env = unpackRGBE(envmap);\n      #else\n        vec3 env = SRGBToLinear(envmap.rgb);\n      #endif\n    #endif\n    finalColor += env * cc_ambientSky.w * specular * s.occlusion;\n  #endif\n  finalColor += ambDiff.rgb * cc_ambientSky.w * diffuse * s.occlusion;\n  finalColor += s.emissive;\n  return vec4(finalColor, s.albedo.a);\n}\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = ACESToneMap(color.rgb);\n  #endif\n  color.rgb = LinearToSRGB(color.rgb);\n  return color;\n}\nin highp vec4 v_shadowPos;\n#if CC_RECEIVE_SHADOW && CC_SHADOW_TYPE == 2\n#endif\n#if CC_USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  in vec3 v_luv;\n  uniform sampler2D cc_lightingMap;\n#endif\nin vec3 v_position;\nin vec2 v_uv;\nin vec2 v_uv1;\nin vec3 v_normal;\nin vec4 viewWorld;\nin vec4 p_position;\nin vec3 v_tangent;\nin vec3 v_bitangent;\n#if USE_VERTEX_COLOR\n  in vec4 v_color;\n#endif\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_NORMAL_MAP\n  uniform sampler2D normalMap;\n#endif\n#if USE_PBR_MAP\n  uniform sampler2D pbrMap;\n#endif\n#if USE_METALLIC_ROUGHNESS_MAP\n  uniform sampler2D metallicRoughnessMap;\n#endif\n#if USE_OCCLUSION_MAP\n  uniform sampler2D occlusionMap;\n#endif\n#if USE_EMISSIVE_MAP\n  uniform sampler2D emissiveMap;\n#endif\n#if USE_CLEARCOAT\n  uniform samplerCube reflEnvMap;\n  uniform samplerCube reflLightMap;\n  uniform sampler2D coatNormal;\n#endif\n#if USE_FLAKE\n  uniform sampler2D flakeMask;\n  uniform sampler2D flakeNormal;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvec3 RGBToHSV (vec3 x) {\n  vec4 a = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n  vec4 b = mix( vec4( x.bg, a.wz ), vec4( x.gb, a.xy ), step( x.b, x.g ) );\n  vec4 c = mix( vec4( b.xyw, x.r ), vec4( x.r, b.yzx ), step( b.x, x.r ) );\n  float d = c.x - min( c.w, c.y );\n  float e = 1.0e-10;\n  return vec3( abs(c.z + (c.w - c.y) / (6.0 * d + e)), d / (c.x + e), c.x);\n}\nvec3 HSVToRGB (vec3 x) {\n  vec4 a = vec4( 1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0 );\n  vec3 b = abs( fract( x.xxx + a.xyz ) * 6.0 - a.www );\n  return x.z * mix( a.xxx, clamp((b - a.xxx), 0.0, 1.0), x.y );\n}\nvoid surf (out StandardSurface s) {\n  vec4 baseColor = albedo;\n  #if USE_VERTEX_COLOR\n    baseColor.rgb *= SRGBToLinear(v_color.rgb);\n    baseColor.a *= v_color.a;\n  #endif\n  #if USE_ALBEDO_MAP\n    vec4 texColor = texture(albedoMap, ALBEDO_UV);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    baseColor *= texColor;\n  #endif\n  s.albedo = baseColor;\n  s.albedo.rgb *= albedoScaleAndCutoff.xyz;\n  #if USE_ALPHA_TEST\n    if (s.albedo.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  #if CC_USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    vec4 lightColor = texture(cc_lightingMap, v_luv.xy);\n    s.lightmap = lightColor.rgb;\n    s.lightmap_test = v_luv.z;\n  #endif\n  s.normal = v_normal;\n  #if USE_NORMAL_MAP\n    vec3 nmmp = texture(normalMap, NORMAL_UV).xyz - vec3(0.5);\n    s.normal =\n      (nmmp.x * emissiveScaleParam.w) * normalize(v_tangent) +\n      (nmmp.y * emissiveScaleParam.w) * normalize(v_bitangent) +\n      (nmmp.z) * normalize(s.normal);\n  #endif\n  s.position = v_position;\n  vec4 pbr = pbrParams;\n  #if USE_PBR_MAP\n    vec4 res = texture(pbrMap, PBR_UV);\n    pbr.x *= res.r;\n    pbr.y *= res.g;\n    pbr.z *= res.b;\n    pbr.w *= res.a;\n  #endif\n  #if USE_METALLIC_ROUGHNESS_MAP\n    vec4 metallicRoughness = texture(metallicRoughnessMap, PBR_UV);\n    pbr.z *= metallicRoughness.b;\n    pbr.y *= metallicRoughness.g;\n  #endif\n  #if USE_OCCLUSION_MAP\n    pbr.x *= texture(occlusionMap, PBR_UV).r;\n  #endif\n  s.occlusion = pbr.x;\n  s.roughness = pbr.y;\n  s.specularIntensity = 0.5;\n  s.metallic = pbr.z;\n  s.emissive = emissive.rgb * emissiveScaleParam.xyz;\n  #if USE_EMISSIVE_MAP\n    s.emissive *= SRGBToLinear(texture(emissiveMap, EMISSIVE_UV).rgb);\n  #endif\n  vec4 halfWorld = normalize(viewWorld + normalize(cc_mainLitDir));\n  float NdotV = dot(normalize(v_normal), normalize(viewWorld.xyz));\n  float NdotH = dot(normalize(v_normal), normalize(halfWorld.xyz));\n  float baseMask = clamp(1.0 - fresnelScale * pow(clamp(1.0 - NdotV, 0.0, 1.0), fresnelHard), 0.0, 1.0);\n  vec4 baseBlend = mix(secondPaintColor, s.albedo, baseMask);\n  s.albedo = baseBlend;\n  vec3 worldRefl = reflect(normalize(-viewWorld.xyz), normalize(v_normal));\n  #if USE_CLEARCOAT\n    vec3 reflUV = normalize(worldRefl);\n    vec3 albedoHSV01 = RGBToHSV(s.albedo.rgb);\n    vec3 hsv01 = vec3(albedoHSV01.x, albedoHSV01.y, clamp((albedoHSV01.z + 0.15), 0.15, 1.0));\n    vec3 reflColor = HSVToRGB(hsv01);\n    vec3 reflShift = mix(reflColor, vec3(1.0, 1.0, 1.0), reflEnvMapScale);\n    vec4 reflMap = texture(reflEnvMap, reflUV, s.roughness);\n    vec4 reflOnly = (reflMap * pow(1.1, reflMap.a * 255.0 - 128.0) * 5.0) * vec4(reflShift, 0.0);\n    float reflMask = mix(0.0, 1.0, (reflScale * 2.0) * pow((1.0 - NdotV), reflHard / 2.5));\n    vec4 coatRef = mix(s.albedo, reflOnly, reflMask);\n    s.albedo = coatRef;\n    vec4 reflLight = texture(reflLightMap, reflUV, s.roughness);\n    vec4 lightOnly = (reflLight * pow(1.1, reflLight.a * 255.0 - 128.0) * 5.0);\n    vec4 coatLit = mix(s.albedo, lightOnly, reflMask * 0.5 * reflLightScale);\n    s.albedo = coatLit;\n    vec2 coatUV = v_uv * coatTiling.xy + coatTiling.zw;\n    vec3 coatNormal = texture(coatNormal, coatUV).xyz - vec3(0.5);\n    vec3 coat = (coatNormal.x * emissiveScaleParam.w * coatNormalScale) * normalize(v_tangent) +\n                (coatNormal.y * emissiveScaleParam.w * coatNormalScale) * normalize(v_bitangent) +\n                (coatNormal.z) * normalize(s.normal);\n    s.normal = normalize(vec3(s.normal.rg + coat.rg, s.normal.b * coat.b));\n  #endif\n  #if USE_FLAKE\n    vec2 flakeUV = (v_uv * flakeSize) * flakeTiling.xy + flakeTiling.zw;\n    vec4 flakeMask = texture(flakeMask, flakeUV);\n    vec3 albedoHSV02 = RGBToHSV(s.albedo.rgb);\n    vec3 hsv02 = vec3(albedoHSV02.x, albedoHSV02.y, albedoHSV02.z * 1.25);\n    vec3 flakeColor = HSVToRGB(hsv02);\n    float flakeTarget = 1.0 - clamp((p_position.z - cc_nearFar.z) / max(flakeDist, 0.0001), 0.0, 1.0);\n    float flankMask = flakeTarget * flakeTarget * flakeMask.a * ceil(flakeNormalScale);\n    vec3 flakeNormal = texture(flakeNormal, flakeUV).xyz - vec3(0.5);\n    vec3 flake = (flakeNormal.x * flankMask * flakeNormalScale) * normalize(v_tangent) +\n                 (flakeNormal.y * flankMask * flakeNormalScale) * normalize(v_bitangent) +\n                 (flakeNormal.z) * normalize(s.normal);\n    s.normal = normalize(vec3(s.normal.rg + flake.rg, s.normal.b * flake.b));\n  #endif\n}\n#if CC_FORWARD_ADD\n  #if CC_PIPELINE_TYPE == 0\n    #define LIGHTS_PER_PASS 1\n  #else\n    #define LIGHTS_PER_PASS 10\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  layout(std140) uniform CCForwardLight {\n    highp vec4 cc_lightPos[LIGHTS_PER_PASS];\n    vec4 cc_lightColor[LIGHTS_PER_PASS];\n    vec4 cc_lightSizeRangeAngle[LIGHTS_PER_PASS];\n    vec4 cc_lightDir[LIGHTS_PER_PASS];\n  };\n  #endif\n  float SmoothDistAtt (float distSqr, float invSqrAttRadius) {\n    float factor = distSqr * invSqrAttRadius;\n    float smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\n    return smoothFactor * smoothFactor;\n  }\n  float GetDistAtt (float distSqr, float invSqrAttRadius) {\n    float attenuation = 1.0 / max(distSqr, 0.01*0.01);\n    attenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\n    return attenuation;\n  }\n  float GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\n    float cd = dot(litDir, L);\n    float attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\n    return (attenuation * attenuation);\n  }\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  vec4 CCStandardShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 position;\n      #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n      position = unpackHighpData(s.position, s.position_fract_part);\n      #else\n      position = s.position;\n      #endif\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / PI;\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    float NV = max(abs(dot(N, V)), 0.0);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    int numLights = CC_PIPELINE_TYPE == 0 ? LIGHTS_PER_PASS : int(cc_lightDir[0].w);\n    for (int i = 0; i < LIGHTS_PER_PASS; i++) {\n      if (i >= numLights) break;\n      vec3 SLU = cc_lightPos[i].xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.0);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = cc_lightSizeRangeAngle[i].x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = litRadiusSqr / max(litRadiusSqr, distSqr);\n      float attRadiusSqrInv = 1.0 / max(cc_lightSizeRangeAngle[i].y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (cc_lightPos[i].w > 0.0) {\n        float cosInner = max(dot(-cc_lightDir[i].xyz, SL), 0.01);\n        float cosOuter = cc_lightSizeRangeAngle[i].z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -cc_lightDir[i].xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = cc_lightColor[i].rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW  && CC_SHADOW_TYPE == 2\n        if (cc_lightPos[i].w > 0.0 && cc_lightSizeRangeAngle[i].w > 0.0) {\n          shadow = CCSpotShadowFactorBase(shadowPos, position, s.shadowBias);\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * cc_lightColor[i].w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n  layout(std430, binding = 4) readonly buffer b_ccLightsBuffer { vec4 b_ccLights[]; };\n  layout(std430, binding = 5) readonly buffer b_clusterLightIndicesBuffer { uint b_clusterLightIndices[]; };\n  layout(std430, binding = 6) readonly buffer b_clusterLightGridBuffer { uvec4 b_clusterLightGrid[]; };\n  struct CCLight\n  {\n    vec4 cc_lightPos;\n    vec4 cc_lightColor;\n    vec4 cc_lightSizeRangeAngle;\n    vec4 cc_lightDir;\n  };\n  struct Cluster\n  {\n    vec3 minBounds;\n    vec3 maxBounds;\n  };\n  struct LightGrid\n  {\n    uint offset;\n    uint ccLights;\n  };\n  CCLight getCCLight(uint i)\n  {\n    CCLight light;\n    light.cc_lightPos = b_ccLights[4u * i + 0u];\n    light.cc_lightColor = b_ccLights[4u * i + 1u];\n    light.cc_lightSizeRangeAngle = b_ccLights[4u * i + 2u];\n    light.cc_lightDir = b_ccLights[4u * i + 3u];\n    return light;\n  }\n  LightGrid getLightGrid(uint cluster)\n  {\n    uvec4 gridvec = b_clusterLightGrid[cluster];\n    LightGrid grid;\n    grid.offset = gridvec.x;\n    grid.ccLights = gridvec.y;\n    return grid;\n  }\n  uint getGridLightIndex(uint start, uint offset)\n  {\n    return b_clusterLightIndices[start + offset];\n  }\n  uint getClusterZIndex(vec4 worldPos)\n  {\n    float scale = float(24) / log(cc_nearFar.y / cc_nearFar.x);\n    float bias = -(float(24) * log(cc_nearFar.x) / log(cc_nearFar.y / cc_nearFar.x));\n    float eyeDepth = -(cc_matView * worldPos).z;\n    uint zIndex = uint(max(log(eyeDepth) * scale + bias, 0.0));\n    return zIndex;\n  }\n  uint getClusterIndex(vec4 fragCoord, vec4 worldPos)\n  {\n    uint zIndex = getClusterZIndex(worldPos);\n    float clusterSizeX = ceil(cc_viewPort.z / float(16));\n    float clusterSizeY = ceil(cc_viewPort.w / float(8));\n    uvec3 indices = uvec3(uvec2(fragCoord.xy / vec2(clusterSizeX, clusterSizeY)), zIndex);\n    uint cluster = (16u * 8u) * indices.z + 16u * indices.y + indices.x;\n    return cluster;\n  }\n  vec4 CCClusterShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / PI;\n    vec3 position;\n      #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n      position = unpackHighpData(s.position, s.position_fract_part);\n      #else\n      position = s.position;\n      #endif\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    float NV = max(abs(dot(N, V)), 0.001);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    uint cluster = getClusterIndex(gl_FragCoord, vec4(position, 1.0));\n    LightGrid grid = getLightGrid(cluster);\n    uint numLights = grid.ccLights;\n    for (uint i = 0u; i < 100u; i++) {\n      if (i >= numLights) break;\n      uint lightIndex = getGridLightIndex(grid.offset, i);\n      CCLight light = getCCLight(lightIndex);\n      vec3 SLU = light.cc_lightPos.xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.001);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = light.cc_lightSizeRangeAngle.x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = PI * (litRadiusSqr / max(litRadiusSqr , distSqr));\n      float attRadiusSqrInv = 1.0 / max(light.cc_lightSizeRangeAngle.y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (light.cc_lightPos.w > 0.0) {\n        float cosInner = max(dot(-light.cc_lightDir.xyz, SL), 0.01);\n        float cosOuter = light.cc_lightSizeRangeAngle.z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -light.cc_lightDir.xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = light.cc_lightColor.rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW && CC_SHADOW_TYPE == 2\n        if (light.cc_lightPos.w > 0.0) {\n          shadow = CCSpotShadowFactorBase(shadowPos, position, s.shadowBias);\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * light.cc_lightColor.w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  #endif\n  layout(location = 0) out vec4 fragColorX;\n  void main () {\n    StandardSurface s; surf(s);\n    #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n    vec4 color = CCClusterShadingAdditive(s, v_shadowPos);\n    #else\n    vec4 color = CCStandardShadingAdditive(s, v_shadowPos);\n    #endif\n    fragColorX = CCFragOutput(color);\n  }\n#elif (CC_PIPELINE_TYPE == 0 || CC_FORCE_FORWARD_SHADING)\n  layout(location = 0) out vec4 fragColorX;\n  void main () {\n    StandardSurface s; surf(s);\n    vec4 color = CCFragOutput(CCStandardShadingBase(s, v_shadowPos));\n    #if CC_USE_FOG != 4\n      CC_APPLY_FOG(color, s.position.xyz);\n    #endif\n    fragColorX = color;\n  }\n#elif CC_PIPELINE_TYPE == 1\n  vec2 signNotZero(vec2 v) {\n    return vec2((v.x >= 0.0) ? +1.0 : -1.0, (v.y >= 0.0) ? +1.0 : -1.0);\n  }\n  vec2 float32x3_to_oct(in vec3 v) {\n    vec2 p = v.xy * (1.0 / (abs(v.x) + abs(v.y) + abs(v.z)));\n    return (v.z <= 0.0) ? ((1.0 - abs(p.yx)) * signNotZero(p)) : p;\n  }\n  layout(location = 0) out vec4 fragColor0;\n  layout(location = 1) out vec4 fragColor1;\n  layout(location = 2) out vec4 fragColor2;\n  void main () {\n    StandardSurface s; surf(s);\n    fragColor0 = s.albedo;\n    fragColor1 = vec4(float32x3_to_oct(s.normal), s.roughness, s.metallic);\n    fragColor2 = vec4(s.emissive, s.occlusion);\n  }\n#endif"},"glsl1":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\n#if CC_USE_SKINNING\n    attribute vec4 a_joints;\n  attribute vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    attribute highp vec4 a_jointAnimInfo;\n  #endif\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    attribute vec2 a_localShadowBias;\n  #endif\n#elif USE_BATCHING\n  attribute float a_dyn_batch_id;\n#endif\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\n#if CC_USE_MORPH\n  uniform vec4 cc_displacementWeights[15];\n  uniform vec4 cc_displacementTextureInfo;\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n  #endif\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n        return texture2D(tex, uv);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture2D(tex, x)),\n        decode32(texture2D(tex, y)),\n        decode32(texture2D(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n  vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n  vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n  vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n  }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    uniform highp vec4 cc_jointTextureInfo;\n    uniform highp vec4 cc_jointAnimInfo;\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      uniform highp sampler2D cc_realtimeJoint;\n    #else\n      uniform highp vec4 cc_joints[CC_JOINT_UNIFORM_CAPACITY * 3];\n    #endif\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n        mat4 getJointMatrix (float i) {\n          float x = i;\n          vec4 v1 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 0.5 / 3.0));\n          vec4 v2 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 1.5 / 3.0));\n          vec4 v3 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 2.5 / 3.0));\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #else\n        mat4 getJointMatrix (float i) {\n         float x = 4.0 * i;\n          vec4 v1 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 0.5 / 3.0)))\n          );\n          vec4 v2 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 1.5 / 3.0)))\n          );\n          vec4 v3 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 2.5 / 3.0)))\n          );\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #endif\n    #else\n      mat4 getJointMatrix (float i) {\n        int idx = int(i);\n        vec4 v1 = cc_joints[idx * 3];\n        vec4 v2 = cc_joints[idx * 3 + 1];\n        vec4 v3 = cc_joints[idx * 3 + 2];\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matProj;\n  uniform highp vec4 cc_cameraPos;\n  uniform mediump vec4 cc_fogBase;\n  uniform mediump vec4 cc_fogAdd;\n#if !USE_INSTANCING\n  #if USE_BATCHING\n    uniform highp mat4 cc_matWorlds[10];\n  #else\n    uniform highp mat4 cc_matWorld;\n  uniform highp mat4 cc_matWorldIT;\n  uniform highp vec4 cc_lightingMapUVParam;\n  #endif\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\n    uniform vec4 tilingOffset;\n#if CC_USE_FOG != 4\n  float LinearFog(vec4 pos, vec3 cameraPos, float fogStart, float fogEnd) {\n      vec4 wPos = pos;\n      float cam_dis = distance(cameraPos, wPos.xyz);\n      return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n  }\n  float ExpFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * fogDensity);\n      return f;\n  }\n  float ExpSquaredFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n      return f;\n  }\n  float LayeredFog(vec4 pos, vec3 cameraPos, float fogTop, float fogRange, float fogAtten) {\n      vec4 wPos = pos;\n      vec3 camWorldProj = cameraPos.xyz;\n      camWorldProj.y = 0.;\n      vec3 worldPosProj = wPos.xyz;\n      worldPosProj.y = 0.;\n      float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n      float fDeltaY, fDensityIntegral;\n      if (cameraPos.y > fogTop) {\n          if (wPos.y < fogTop) {\n              fDeltaY = (fogTop - wPos.y) / fogRange * 2.0;\n              fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n          }\n          else {\n              fDeltaY = 0.;\n              fDensityIntegral = 0.;\n          }\n      }\n      else {\n          if (wPos.y < fogTop) {\n              float fDeltaA = (fogTop - cameraPos.y) / fogRange * 2.;\n              float fDeltaB = (fogTop - wPos.y) / fogRange * 2.;\n              fDeltaY = abs(fDeltaA - fDeltaB);\n              fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n          }\n          else {\n              fDeltaY = abs(fogTop - cameraPos.y) / fogRange * 2.;\n              fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n          }\n      }\n      float fDensity;\n      if (fDeltaY != 0.) {\n          fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n      }\n      else {\n          fDensity = 0.;\n      }\n      float f = exp(-fDensity);\n      return f;\n  }\n#endif\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n#if CC_USE_FOG == 0\n\tfactor = LinearFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.y);\n#elif CC_USE_FOG == 1\n\tfactor = ExpFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 2\n\tfactor = ExpSquaredFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 3\n\tfactor = LayeredFog(pos, cc_cameraPos.xyz, cc_fogAdd.x, cc_fogAdd.y, cc_fogAdd.z);\n#else\n\tfactor = 1.0;\n#endif\n}\n#if !CC_USE_ACCURATE_FOG\nvarying mediump float v_fog_factor;\n#endif\nvoid CC_TRANSFER_FOG(vec4 pos) {\n#if !CC_USE_ACCURATE_FOG\n    CC_TRANSFER_FOG_BASE(pos, v_fog_factor);\n#endif\n}\nvarying highp vec4 v_shadowPos;\nuniform highp mat4 cc_matLightViewProj;\n#if CC_SUPPORT_CASCADED_SHADOW_MAP\n  #endif\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotShadowMap;\n  #if CC_SUPPORT_CASCADED_SHADOW_MAP\n  #else\n  #endif\n#endif\n#if CC_RECEIVE_SHADOW\n#endif\n#if USE_VERTEX_COLOR\n  attribute vec4 a_color;\n  varying vec4 v_color;\n#endif\nvarying vec3 v_position;\nvarying vec3 v_normal;\nvarying vec2 v_uv;\nvarying vec2 v_uv1;\nvarying vec4 viewWorld;\nvarying vec4 p_position;\nvarying vec3 v_tangent;\nvarying vec3 v_bitangent;\n#if HAS_SECOND_UV || CC_USE_LIGHTMAP\n  attribute vec2 a_texCoord1;\n#endif\n#if CC_USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  varying vec3 v_luv;\n  void CCLightingMapCaclUV()\n  {\n  #if !USE_INSTANCING\n    v_luv.xy = cc_lightingMapUVParam.xy + a_texCoord1 * cc_lightingMapUVParam.z;\n    v_luv.z = cc_lightingMapUVParam.w;\n  #else\n    v_luv.xy = a_lightingMapUVParam.xy + a_texCoord1 * a_lightingMapUVParam.z;\n    v_luv.z = a_lightingMapUVParam.w;\n  #endif\n  }\n#endif\nvoid main () {\n  StandardVertInput In;\n  CCVertInput(In);\n  mat4 matWorld, matWorldIT;\n  CCGetWorldMatrixFull(matWorld, matWorldIT);\n  vec4 pos = matWorld * In.position;\n  v_position = pos.xyz;\n  v_normal = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz);\n  #if USE_TWOSIDE\n    vec3 viewDirect = normalize(cc_cameraPos.xyz - v_position);\n    v_normal *= dot(v_normal, viewDirect) < 0.0 ? -1.0 : 1.0;\n  #endif\n  v_tangent = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n  v_bitangent = cross(v_normal, v_tangent) * In.tangent.w;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if SAMPLE_FROM_RT\n    v_uv = cc_cameraPos.w > 1.0 ? vec2(v_uv.x, 1.0 - v_uv.y) : v_uv;\n  #endif\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n    #if SAMPLE_FROM_RT\n      v_uv1 = cc_cameraPos.w > 1.0 ? vec2(v_uv1.x, 1.0 - v_uv1.y) : v_uv1;\n    #endif\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  CC_TRANSFER_FOG(pos);\n  v_shadowPos = cc_matLightViewProj * pos;\n  #if CC_USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    CCLightingMapCaclUV();\n  #endif\n  viewWorld = normalize(cc_cameraPos - In.position);\n  p_position = cc_matProj * (cc_matView * matWorld) * In.position;\n  gl_Position = p_position;\n}","frag":"\n#ifdef GL_EXT_draw_buffers\n#extension GL_EXT_draw_buffers: enable\n#endif\n#ifdef GL_OES_standard_derivatives\n#extension GL_OES_standard_derivatives: enable\n#endif\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod: enable\n#endif\nprecision highp float;\nuniform mediump vec4 cc_debug_view_mode;\n  uniform mediump vec4 cc_debug_view_composite_pack_1;\n  uniform mediump vec4 cc_debug_view_composite_pack_2;\n  uniform mediump vec4 cc_debug_view_composite_pack_3;\nuniform highp mat4 cc_matView;\n  uniform highp vec4 cc_cameraPos;\n  uniform mediump vec4 cc_surfaceTransform;\n  uniform mediump vec4 cc_exposure;\n  uniform mediump vec4 cc_mainLitDir;\n  uniform mediump vec4 cc_mainLitColor;\n  uniform mediump vec4 cc_ambientSky;\n  uniform mediump vec4 cc_ambientGround;\n  uniform mediump vec4 cc_fogColor;\n  uniform mediump vec4 cc_fogBase;\n  uniform mediump vec4 cc_fogAdd;\n  uniform mediump vec4 cc_nearFar;\n  uniform mediump vec4 cc_viewPort;\n     uniform vec4 albedo;\n     uniform vec4 albedoScaleAndCutoff;\n     uniform vec4 pbrParams;\n     uniform vec4 emissive;\n     uniform vec4 emissiveScaleParam;\n     uniform vec4 secondPaintColor;\n     uniform vec4 coatTiling;\n     uniform vec4 flakeTiling;\n     uniform float fresnelScale;\n     uniform float fresnelHard;\n     uniform float reflEnvMapScale;\n     uniform float reflScale;\n     uniform float reflHard;\n     uniform float reflLightScale;\n     uniform float coatNormalScale;\n     uniform float flakeSize;\n     uniform float flakeDist;\n     uniform float flakeNormalScale;\n#if CC_USE_FOG != 4\n  float LinearFog(vec4 pos, vec3 cameraPos, float fogStart, float fogEnd) {\n      vec4 wPos = pos;\n      float cam_dis = distance(cameraPos, wPos.xyz);\n      return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n  }\n  float ExpFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * fogDensity);\n      return f;\n  }\n  float ExpSquaredFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n      return f;\n  }\n  float LayeredFog(vec4 pos, vec3 cameraPos, float fogTop, float fogRange, float fogAtten) {\n      vec4 wPos = pos;\n      vec3 camWorldProj = cameraPos.xyz;\n      camWorldProj.y = 0.;\n      vec3 worldPosProj = wPos.xyz;\n      worldPosProj.y = 0.;\n      float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n      float fDeltaY, fDensityIntegral;\n      if (cameraPos.y > fogTop) {\n          if (wPos.y < fogTop) {\n              fDeltaY = (fogTop - wPos.y) / fogRange * 2.0;\n              fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n          }\n          else {\n              fDeltaY = 0.;\n              fDensityIntegral = 0.;\n          }\n      }\n      else {\n          if (wPos.y < fogTop) {\n              float fDeltaA = (fogTop - cameraPos.y) / fogRange * 2.;\n              float fDeltaB = (fogTop - wPos.y) / fogRange * 2.;\n              fDeltaY = abs(fDeltaA - fDeltaB);\n              fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n          }\n          else {\n              fDeltaY = abs(fogTop - cameraPos.y) / fogRange * 2.;\n              fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n          }\n      }\n      float fDensity;\n      if (fDeltaY != 0.) {\n          fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n      }\n      else {\n          fDensity = 0.;\n      }\n      float f = exp(-fDensity);\n      return f;\n  }\n#endif\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n#if CC_USE_FOG == 0\n\tfactor = LinearFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.y);\n#elif CC_USE_FOG == 1\n\tfactor = ExpFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 2\n\tfactor = ExpSquaredFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 3\n\tfactor = LayeredFog(pos, cc_cameraPos.xyz, cc_fogAdd.x, cc_fogAdd.y, cc_fogAdd.z);\n#else\n\tfactor = 1.0;\n#endif\n}\nvoid CC_APPLY_FOG_BASE(inout vec4 color, float factor) {\n\tcolor = vec4(mix(cc_fogColor.rgb, color.rgb, factor), color.a);\n}\n#if !CC_USE_ACCURATE_FOG\nvarying mediump float v_fog_factor;\n#endif\nvoid CC_APPLY_FOG(inout vec4 color) {\n#if !CC_USE_ACCURATE_FOG\n    CC_APPLY_FOG_BASE(color, v_fog_factor);\n#endif\n}\nvoid CC_APPLY_FOG(inout vec4 color, vec3 worldPos) {\n#if CC_USE_ACCURATE_FOG\n    float factor;\n    CC_TRANSFER_FOG_BASE(vec4(worldPos, 1.0), factor);\n#else\n    float factor = v_fog_factor;\n#endif\n    CC_APPLY_FOG_BASE(color, factor);\n}\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_WORLD_POS CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT + 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR CC_SURFACES_DEBUG_VIEW_WORLD_POS + 1\n#define CC_SURFACES_DEBUG_VIEW_FACE_SIDE CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR + 1\n#define CC_SURFACES_DEBUG_VIEW_UV0 CC_SURFACES_DEBUG_VIEW_FACE_SIDE + 1\n#define CC_SURFACES_DEBUG_VIEW_UV1 CC_SURFACES_DEBUG_VIEW_UV0 + 1\n#define CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP CC_SURFACES_DEBUG_VIEW_UV1 + 1\n#define CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP + 1\n#define CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT + 1\n#define CC_SURFACES_DEBUG_VIEW_BASE_COLOR CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR CC_SURFACES_DEBUG_VIEW_BASE_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSPARENCY CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_METALLIC CC_SURFACES_DEBUG_VIEW_TRANSPARENCY + 1\n#define CC_SURFACES_DEBUG_VIEW_ROUGHNESS CC_SURFACES_DEBUG_VIEW_METALLIC + 1\n#define CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY CC_SURFACES_DEBUG_VIEW_ROUGHNESS + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_ALL CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE CC_SURFACES_DEBUG_VIEW_DIRECT_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_ALL CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_EMISSIVE CC_SURFACES_DEBUG_VIEW_ENV_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_LIGHT_MAP CC_SURFACES_DEBUG_VIEW_EMISSIVE + 1\n#define CC_SURFACES_DEBUG_VIEW_SHADOW CC_SURFACES_DEBUG_VIEW_LIGHT_MAP + 1\n#define CC_SURFACES_DEBUG_VIEW_AO CC_SURFACES_DEBUG_VIEW_SHADOW + 1\n#define CC_SURFACES_DEBUG_VIEW_FOG CC_SURFACES_DEBUG_VIEW_AO + 1\n#define CC_SURFACES_DEBUG_VIEW_SINGLE 1\n#define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC 2\n#define IS_DEBUG_VIEW_LIGHTING_ENABLE_WITH_ALBEDO (cc_debug_view_mode.y > 0.0)\n#define IS_DEBUG_VIEW_MISC_ENABLE_CSM_LAYER_COLORATION (cc_debug_view_mode.z > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_DIFFUSE (cc_debug_view_composite_pack_1.x > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_SPECULAR (cc_debug_view_composite_pack_1.y > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_ENV_DIFFUSE (cc_debug_view_composite_pack_1.z > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_ENV_SPECULAR (cc_debug_view_composite_pack_1.w > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_EMISSIVE (cc_debug_view_composite_pack_2.x > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_LIGHT_MAP (cc_debug_view_composite_pack_2.y > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_SHADOW (cc_debug_view_composite_pack_2.z > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_AO (cc_debug_view_composite_pack_2.w > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_NORMAL_MAP (cc_debug_view_composite_pack_3.x > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_FOG (cc_debug_view_composite_pack_3.y > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TONE_MAPPING (cc_debug_view_composite_pack_3.z > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION (cc_debug_view_composite_pack_3.w > 0.0)\nvec3 SRGBToLinear (vec3 gamma) {\n#ifdef CC_USE_SURFACE_SHADER\n  #if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION) {\n      return gamma;\n    }\n  #endif\n#endif\n  return gamma * gamma;\n}\nvec3 LinearToSRGB(vec3 linear) {\n#ifdef CC_USE_SURFACE_SHADER\n  #if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION) {\n      return linear;\n    }\n  #endif\n#endif\n  return sqrt(linear);\n}\nuniform highp mat4 cc_matLightView;\n  uniform highp mat4 cc_matLightViewProj;\n  uniform highp vec4 cc_shadowInvProjDepthInfo;\n  uniform highp vec4 cc_shadowProjDepthInfo;\n  uniform highp vec4 cc_shadowProjInfo;\n  uniform mediump vec4 cc_shadowNFLSInfo;\n  uniform mediump vec4 cc_shadowWHPBInfo;\n  uniform mediump vec4 cc_shadowLPNNInfo;\n#if CC_SUPPORT_CASCADED_SHADOW_MAP\n  uniform highp vec4 cc_csmViewDir0[4];\n  uniform highp vec4 cc_csmViewDir1[4];\n  uniform highp vec4 cc_csmViewDir2[4];\n  uniform highp vec4 cc_csmAtlas[4];\n  uniform highp mat4 cc_matCSMViewProj[4];\n  uniform highp vec4 cc_csmProjDepthInfo[4];\n  uniform highp vec4 cc_csmProjInfo[4];\n#endif\nfloat GetLinearDepthFromViewSpace(vec3 viewPos, float near, float far) {\n  float dist = length(viewPos);\n  return (dist - near) / (far - near);\n}\nvec3 RotationVecFromAxisY(vec3 v, float cosTheta, float sinTheta)\n{\n    vec3 result;\n    result.x = dot(v, vec3(cosTheta, 0.0, -sinTheta));\n    result.y = v.y;\n    result.z = dot(v, vec3(sinTheta, 0.0,  cosTheta));\n    return result;\n}\nfloat CCGetLinearDepth(vec3 worldPos, float viewSpaceBias) {\n\tvec4 viewPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  viewPos.z += viewSpaceBias;\n\treturn GetLinearDepthFromViewSpace(viewPos.xyz, cc_shadowNFLSInfo.x, cc_shadowNFLSInfo.y);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n\treturn CCGetLinearDepth(worldPos, 0.0);\n}\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotShadowMap;\n    highp float unpackHighpData (float mainPart, float modPart) {\n      highp float data = mainPart;\n      return data + modPart;\n    }\n    highp float unpackHighpData (float mainPart, float modPart, const float modValue) {\n      highp float data = mainPart * modValue;\n      return data + modPart * modValue;\n    }\n    highp vec2 unpackHighpData (vec2 mainPart, vec2 modPart) {\n      highp vec2 data = mainPart;\n      return data + modPart;\n    }\n    highp vec2 unpackHighpData (vec2 mainPart, vec2 modPart, const float modValue) {\n      highp vec2 data = mainPart * modValue;\n      return data + modPart * modValue;\n    }\n    highp vec3 unpackHighpData (vec3 mainPart, vec3 modPart) {\n      highp vec3 data = mainPart;\n      return data + modPart;\n    }\n    highp vec3 unpackHighpData (vec3 mainPart, vec3 modPart, const float modValue) {\n      highp vec3 data = mainPart * modValue;\n      return data + modPart * modValue;\n    }\n    highp vec4 unpackHighpData (vec4 mainPart, vec4 modPart) {\n      highp vec4 data = mainPart;\n      return data + modPart;\n    }\n    highp vec4 unpackHighpData (vec4 mainPart, vec4 modPart, const float modValue) {\n      highp vec4 data = mainPart * modValue;\n      return data + modPart * modValue;\n    }\n  float NativePCFShadowFactorHard (vec3 shadowNDCPos, sampler2D shadowMap, vec2 shadowMapResolution)\n  {\n    #if CC_SHADOWMAP_FORMAT == 1\n      return step(shadowNDCPos.z, dot(texture2D(shadowMap, shadowNDCPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    #else\n      return step(shadowNDCPos.z, texture2D(shadowMap, shadowNDCPos.xy).x);\n    #endif\n  }\n  float NativePCFShadowFactorSoft (vec3 shadowNDCPos, sampler2D shadowMap, vec2 shadowMapResolution)\n  {\n    vec2 oneTap = 1.0 / shadowMapResolution;\n    vec2 shadowNDCPos_offset = shadowNDCPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    #if CC_SHADOWMAP_FORMAT == 1\n      block0 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset.x, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset.x, shadowNDCPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    #else\n      block0 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos.y)).x);\n      block1 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset.x, shadowNDCPos.y)).x);\n      block2 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset.y)).x);\n      block3 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset.x, shadowNDCPos_offset.y)).x);\n    #endif\n    float coefX   = mod(shadowNDCPos.x, oneTap.x) * shadowMapResolution.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(shadowNDCPos.y, oneTap.y) * shadowMapResolution.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float NativePCFShadowFactorSoft3X (vec3 shadowNDCPos, sampler2D shadowMap, vec2 shadowMapResolution)\n  {\n    vec2 oneTap = 1.0 / shadowMapResolution;\n    float shadowNDCPos_offset_L = shadowNDCPos.x - oneTap.x;\n    float shadowNDCPos_offset_R = shadowNDCPos.x + oneTap.x;\n    float shadowNDCPos_offset_U = shadowNDCPos.y - oneTap.y;\n    float shadowNDCPos_offset_D = shadowNDCPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    #if CC_SHADOWMAP_FORMAT == 1\n      block0 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    #else\n      block0 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos_offset_U)).x);\n      block1 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset_U)).x);\n      block2 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos_offset_U)).x);\n      block3 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos.y)).x);\n      block4 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos.y)).x);\n      block5 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos.y)).x);\n      block6 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos_offset_D)).x);\n      block7 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset_D)).x);\n      block8 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos_offset_D)).x);\n    #endif\n    float coefX = mod(shadowNDCPos.x, oneTap.x) * shadowMapResolution.x;\n    float coefY = mod(shadowNDCPos.y, oneTap.y) * shadowMapResolution.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\n  float NativePCFShadowFactorSoft5X (vec3 shadowNDCPos, sampler2D shadowMap, vec2 shadowMapResolution)\n  {\n    vec2 oneTap = 1.0 / shadowMapResolution;\n    vec2 twoTap = oneTap * 2.0;\n    vec2 offset1 = shadowNDCPos.xy + vec2(-twoTap.x, -twoTap.y);\n    vec2 offset2 = shadowNDCPos.xy + vec2(-oneTap.x, -twoTap.y);\n    vec2 offset3 = shadowNDCPos.xy + vec2(0.0, -twoTap.y);\n    vec2 offset4 = shadowNDCPos.xy + vec2(oneTap.x, -twoTap.y);\n    vec2 offset5 = shadowNDCPos.xy + vec2(twoTap.x, -twoTap.y);\n    vec2 offset6 = shadowNDCPos.xy + vec2(-twoTap.x, -oneTap.y);\n    vec2 offset7 = shadowNDCPos.xy + vec2(-oneTap.x, -oneTap.y);\n    vec2 offset8 = shadowNDCPos.xy + vec2(0.0, -oneTap.y);\n    vec2 offset9 = shadowNDCPos.xy + vec2(oneTap.x, -oneTap.y);\n    vec2 offset10 = shadowNDCPos.xy + vec2(twoTap.x, -oneTap.y);\n    vec2 offset11 = shadowNDCPos.xy + vec2(-twoTap.x, 0.0);\n    vec2 offset12 = shadowNDCPos.xy + vec2(-oneTap.x, 0.0);\n    vec2 offset13 = shadowNDCPos.xy + vec2(0.0, 0.0);\n    vec2 offset14 = shadowNDCPos.xy + vec2(oneTap.x, 0.0);\n    vec2 offset15 = shadowNDCPos.xy + vec2(twoTap.x, 0.0);\n    vec2 offset16 = shadowNDCPos.xy + vec2(-twoTap.x, oneTap.y);\n    vec2 offset17 = shadowNDCPos.xy + vec2(-oneTap.x, oneTap.y);\n    vec2 offset18 = shadowNDCPos.xy + vec2(0.0, oneTap.y);\n    vec2 offset19 = shadowNDCPos.xy + vec2(oneTap.x, oneTap.y);\n    vec2 offset20 = shadowNDCPos.xy + vec2(twoTap.x, oneTap.y);\n    vec2 offset21 = shadowNDCPos.xy + vec2(-twoTap.x, twoTap.y);\n    vec2 offset22 = shadowNDCPos.xy + vec2(-oneTap.x, twoTap.y);\n    vec2 offset23 = shadowNDCPos.xy + vec2(0.0, twoTap.y);\n    vec2 offset24 = shadowNDCPos.xy + vec2(oneTap.x, twoTap.y);\n    vec2 offset25 = shadowNDCPos.xy + vec2(twoTap.x, twoTap.y);\n    float block1, block2, block3, block4, block5, block6, block7, block8, block9, block10, block11, block12, block13, block14, block15, block16, block17, block18, block19, block20, block21, block22, block23, block24, block25;\n    #if CC_SHADOWMAP_FORMAT == 1\n      block1 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset1), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset2), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset3), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset4), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset5), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset6), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset7), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset8), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block9 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset9), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block10 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset10), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block11 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset11), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block12 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset12), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block13 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset13), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block14 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset14), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block15 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset15), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block16 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset16), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block17 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset17), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block18 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset18), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block19 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset19), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block20 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset20), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block21 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset21), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block22 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset22), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block23 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset23), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block24 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset24), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block25 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset25), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    #else\n      block1 = step(shadowNDCPos.z, texture2D(shadowMap, offset1).x);\n      block2 = step(shadowNDCPos.z, texture2D(shadowMap, offset2).x);\n      block3 = step(shadowNDCPos.z, texture2D(shadowMap, offset3).x);\n      block4 = step(shadowNDCPos.z, texture2D(shadowMap, offset4).x);\n      block5 = step(shadowNDCPos.z, texture2D(shadowMap, offset5).x);\n      block6 = step(shadowNDCPos.z, texture2D(shadowMap, offset6).x);\n      block7 = step(shadowNDCPos.z, texture2D(shadowMap, offset7).x);\n      block8 = step(shadowNDCPos.z, texture2D(shadowMap, offset8).x);\n      block9 = step(shadowNDCPos.z, texture2D(shadowMap, offset9).x);\n      block10 = step(shadowNDCPos.z, texture2D(shadowMap, offset10).x);\n      block11 = step(shadowNDCPos.z, texture2D(shadowMap, offset11).x);\n      block12 = step(shadowNDCPos.z, texture2D(shadowMap, offset12).x);\n      block13 = step(shadowNDCPos.z, texture2D(shadowMap, offset13).x);\n      block14 = step(shadowNDCPos.z, texture2D(shadowMap, offset14).x);\n      block15 = step(shadowNDCPos.z, texture2D(shadowMap, offset15).x);\n      block16 = step(shadowNDCPos.z, texture2D(shadowMap, offset16).x);\n      block17 = step(shadowNDCPos.z, texture2D(shadowMap, offset17).x);\n      block18 = step(shadowNDCPos.z, texture2D(shadowMap, offset18).x);\n      block19 = step(shadowNDCPos.z, texture2D(shadowMap, offset19).x);\n      block20 = step(shadowNDCPos.z, texture2D(shadowMap, offset20).x);\n      block21 = step(shadowNDCPos.z, texture2D(shadowMap, offset21).x);\n      block22 = step(shadowNDCPos.z, texture2D(shadowMap, offset22).x);\n      block23 = step(shadowNDCPos.z, texture2D(shadowMap, offset23).x);\n      block24 = step(shadowNDCPos.z, texture2D(shadowMap, offset24).x);\n      block25 = step(shadowNDCPos.z, texture2D(shadowMap, offset25).x);\n    #endif\n    vec2 coef = fract(shadowNDCPos.xy * shadowMapResolution);\n    vec2 v1X1 = mix(vec2(block1, block6), vec2(block2, block7), coef.xx);\n    vec2 v1X2 = mix(vec2(block2, block7), vec2(block3, block8), coef.xx);\n    vec2 v1X3 = mix(vec2(block3, block8), vec2(block4, block9), coef.xx);\n    vec2 v1X4 = mix(vec2(block4, block9), vec2(block5, block10), coef.xx);\n    float v1 = mix(v1X1.x, v1X1.y, coef.y) + mix(v1X2.x, v1X2.y, coef.y) + mix(v1X3.x, v1X3.y, coef.y) + mix(v1X4.x, v1X4.y, coef.y);\n    vec2 v2X1 = mix(vec2(block6, block11), vec2(block7, block12), coef.xx);\n    vec2 v2X2 = mix(vec2(block7, block12), vec2(block8, block13), coef.xx);\n    vec2 v2X3 = mix(vec2(block8, block13), vec2(block9, block14), coef.xx);\n    vec2 v2X4 = mix(vec2(block9, block14), vec2(block10, block15), coef.xx);\n    float v2 = mix(v2X1.x, v2X1.y, coef.y) + mix(v2X2.x, v2X2.y, coef.y) + mix(v2X3.x, v2X3.y, coef.y) + mix(v2X4.x, v2X4.y, coef.y);\n    vec2 v3X1 = mix(vec2(block11, block16), vec2(block12, block17), coef.xx);\n    vec2 v3X2 = mix(vec2(block12, block17), vec2(block13, block18), coef.xx);\n    vec2 v3X3 = mix(vec2(block13, block18), vec2(block14, block19), coef.xx);\n    vec2 v3X4 = mix(vec2(block14, block19), vec2(block15, block20), coef.xx);\n    float v3 = mix(v3X1.x, v3X1.y, coef.y) + mix(v3X2.x, v3X2.y, coef.y) + mix(v3X3.x, v3X3.y, coef.y) + mix(v3X4.x, v3X4.y, coef.y);\n    vec2 v4X1 = mix(vec2(block16, block21), vec2(block17, block22), coef.xx);\n    vec2 v4X2 = mix(vec2(block17, block22), vec2(block18, block23), coef.xx);\n    vec2 v4X3 = mix(vec2(block18, block23), vec2(block19, block24), coef.xx);\n    vec2 v4X4 = mix(vec2(block19, block24), vec2(block20, block25), coef.xx);\n    float v4 = mix(v4X1.x, v4X1.y, coef.y) + mix(v4X2.x, v4X2.y, coef.y) + mix(v4X3.x, v4X3.y, coef.y) + mix(v4X4.x, v4X4.y, coef.y);\n    float fAvg = (v1 + v2 + v3 + v4) * 0.0625;\n    return fAvg;\n  }\n  bool GetShadowNDCPos(out vec3 shadowNDCPos, vec4 shadowPosWithDepthBias)\n  {\n  \tshadowNDCPos = shadowPosWithDepthBias.xyz / shadowPosWithDepthBias.w * 0.5 + 0.5;\n  \tif (shadowNDCPos.x < 0.0 || shadowNDCPos.x > 1.0 ||\n  \t\tshadowNDCPos.y < 0.0 || shadowNDCPos.y > 1.0 ||\n  \t\tshadowNDCPos.z < 0.0 || shadowNDCPos.z > 1.0) {\n  \t\treturn false;\n  \t}\n  \tshadowNDCPos.xy = cc_cameraPos.w == 1.0 ? vec2(shadowNDCPos.xy.x, 1.0 - shadowNDCPos.xy.y) : shadowNDCPos.xy;\n  \treturn true;\n  }\n  vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal, float normalBias, vec3 matViewDir0, vec3 matViewDir1, vec3 matViewDir2, vec2 projScaleXY)\n  {\n    vec4 newShadowPos = shadowPos;\n    if (normalBias > EPSILON_LOWP)\n    {\n      vec3 viewNormal = vec3(dot(matViewDir0, worldNormal), dot(matViewDir1, worldNormal), dot(matViewDir2, worldNormal));\n      if (viewNormal.z < 0.1)\n        newShadowPos.xy += viewNormal.xy * projScaleXY * normalBias * clamp(viewNormal.z, 0.001, 0.1);\n    }\n    return newShadowPos;\n  }\n  vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal, float normalBias, mat4 matLightView, vec2 projScaleXY)\n  {\n  \tvec4 newShadowPos = shadowPos;\n  \tif (normalBias > EPSILON_LOWP)\n  \t{\n  \t\tvec4 viewNormal = matLightView * vec4(worldNormal, 0.0);\n  \t\tif (viewNormal.z < 0.1)\n  \t\t\tnewShadowPos.xy += viewNormal.xy * projScaleXY * normalBias * clamp(viewNormal.z, 0.001, 0.1);\n  \t}\n  \treturn newShadowPos;\n  }\n  vec4 ApplyShadowDepthBias_Perspective(vec4 shadowPos, float viewspaceDepthBias)\n  {\n  \tvec3 viewSpacePos;\n  \tviewSpacePos.xy = shadowPos.xy * cc_shadowProjInfo.zw;\n  \tviewSpacePos.z = shadowPos.z * cc_shadowInvProjDepthInfo.x + shadowPos.w * cc_shadowInvProjDepthInfo.y;\n  \tviewSpacePos.xyz += cc_shadowProjDepthInfo.z * normalize(viewSpacePos.xyz) * viewspaceDepthBias;\n  \tvec4 clipSpacePos;\n  \tclipSpacePos.xy = viewSpacePos.xy * cc_shadowProjInfo.xy;\n  \tclipSpacePos.zw = viewSpacePos.z * cc_shadowProjDepthInfo.xz + vec2(cc_shadowProjDepthInfo.y, 0.0);\n  \t#if CC_SHADOWMAP_USE_LINEAR_DEPTH\n  \t\tclipSpacePos.z = GetLinearDepthFromViewSpace(viewSpacePos.xyz, cc_shadowNFLSInfo.x, cc_shadowNFLSInfo.y);\n  \t\tclipSpacePos.z = (clipSpacePos.z * 2.0 - 1.0) * clipSpacePos.w;\n  \t#endif\n  \treturn clipSpacePos;\n  }\n  vec4 ApplyShadowDepthBias_Orthographic(vec4 shadowPos, float viewspaceDepthBias, float projScaleZ, float projBiasZ)\n  {\n  \tfloat coeffA = projScaleZ;\n  \tfloat coeffB = projBiasZ;\n  \tfloat viewSpacePos_z = (shadowPos.z - coeffB) / coeffA;\n  \tviewSpacePos_z += viewspaceDepthBias;\n  \tvec4 result = shadowPos;\n  \tresult.z = viewSpacePos_z * coeffA + coeffB;\n  \treturn result;\n  }\n  vec4 ApplyShadowDepthBias_PerspectiveLinearDepth(vec4 shadowPos, float viewspaceDepthBias, vec3 worldPos)\n  {\n    shadowPos.z = CCGetLinearDepth(worldPos, viewspaceDepthBias) * 2.0 - 1.0;\n    shadowPos.z *= shadowPos.w;\n    return shadowPos;\n  }\n  float CCGetDirLightShadowFactorHard (vec4 shadowPosWithDepthBias) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorHard(shadowNDCPos, cc_shadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetDirLightShadowFactorSoft (vec4 shadowPosWithDepthBias) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft(shadowNDCPos, cc_shadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetDirLightShadowFactorSoft3X (vec4 shadowPosWithDepthBias) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft3X(shadowNDCPos, cc_shadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetDirLightShadowFactorSoft5X (vec4 shadowPosWithDepthBias) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft5X(shadowNDCPos, cc_shadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetSpotLightShadowFactorHard (vec4 shadowPosWithDepthBias, vec3 worldPos) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorHard(shadowNDCPos, cc_spotShadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetSpotLightShadowFactorSoft (vec4 shadowPosWithDepthBias, vec3 worldPos) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft(shadowNDCPos, cc_spotShadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetSpotLightShadowFactorSoft3X (vec4 shadowPosWithDepthBias, vec3 worldPos) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft3X(shadowNDCPos, cc_spotShadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetSpotLightShadowFactorSoft5X (vec4 shadowPosWithDepthBias, vec3 worldPos) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft5X(shadowNDCPos, cc_spotShadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCSpotShadowFactorBase(vec4 shadowPos, vec3 worldPos, vec2 shadowBias)\n  {\n    float pcf = cc_shadowWHPBInfo.z;\n    vec4 pos = vec4(1.0);\n    #if CC_SHADOWMAP_USE_LINEAR_DEPTH\n      pos = ApplyShadowDepthBias_PerspectiveLinearDepth(shadowPos, shadowBias.x, worldPos);\n    #else\n      pos = ApplyShadowDepthBias_Perspective(shadowPos, shadowBias.x);\n    #endif\n    if (pcf > 2.9) {\n      return CCGetSpotLightShadowFactorSoft5X(pos, worldPos);\n    }else if (pcf > 1.9) {\n      return CCGetSpotLightShadowFactorSoft3X(pos, worldPos);\n    }else if (pcf > 0.9) {\n      return CCGetSpotLightShadowFactorSoft(pos, worldPos);\n    }else {\n      return CCGetSpotLightShadowFactorHard(pos, worldPos);\n    }\n  }\n  float CCShadowFactorBase(vec4 shadowPos, vec3 N, vec2 shadowBias)\n  {\n    vec4 pos = ApplyShadowDepthBias_FaceNormal(shadowPos, N, shadowBias.y, cc_matLightView, cc_shadowProjInfo.xy);\n    pos = ApplyShadowDepthBias_Orthographic(pos, shadowBias.x, cc_shadowProjDepthInfo.x, cc_shadowProjDepthInfo.y);\n    float realtimeShadow = 1.0;\n    #if CC_DIR_SHADOW_PCF_TYPE == 3\n      realtimeShadow = CCGetDirLightShadowFactorSoft5X(pos);\n    #endif\n    #if CC_DIR_SHADOW_PCF_TYPE == 2\n      realtimeShadow =  CCGetDirLightShadowFactorSoft3X(pos);\n    #endif\n    #if CC_DIR_SHADOW_PCF_TYPE == 1\n      realtimeShadow = CCGetDirLightShadowFactorSoft(pos);\n    #endif\n    #if CC_DIR_SHADOW_PCF_TYPE == 0\n      realtimeShadow = CCGetDirLightShadowFactorHard(pos);\n    #endif\n    return mix(realtimeShadow, 1.0, cc_shadowNFLSInfo.w);\n  }\n  #if CC_SUPPORT_CASCADED_SHADOW_MAP\n    int CCGetCSMLevel(out vec4 csmPos, out vec4 shadowProjDepthInfo, out vec4 shadowProjInfo, out vec3 shadowViewDir0, out vec3 shadowViewDir1, out vec3 shadowViewDir2, vec3 worldPos) {\n      int layer = -1;\n      highp float layerThreshold = cc_csmViewDir0[0].w;\n      for (int i = 0; i < 4; i++) {\n        vec4 shadowPos = cc_matCSMViewProj[i] * vec4(worldPos.xyz, 1.0);\n        vec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\n        if (clipPos.x >= (0.0 + layerThreshold) && clipPos.x <= (1.0 - layerThreshold) &&\n            clipPos.y >= (0.0 + layerThreshold) && clipPos.y <= (1.0 - layerThreshold) &&\n            clipPos.z >= 0.0 && clipPos.z <= 1.0 && layer < 0) {\n          csmPos = cc_matCSMViewProj[i] * vec4(worldPos.xyz, 1.0);\n          csmPos.xy = csmPos.xy * cc_csmAtlas[i].xy + cc_csmAtlas[i].zw;\n          shadowProjDepthInfo = cc_csmProjDepthInfo[i];\n          shadowProjInfo = cc_csmProjInfo[i];\n          shadowViewDir0 = cc_csmViewDir0[i].xyz;\n          shadowViewDir1 = cc_csmViewDir1[i].xyz;\n          shadowViewDir2 = cc_csmViewDir2[i].xyz;\n          layer = i;\n        }\n      }\n      return layer;\n    }\n    float CCCSMFactorBase(vec3 worldPos, vec3 N, vec2 shadowBias)\n    {\n      vec4 csmPos = vec4(1.0);\n      vec4 shadowProjDepthInfo, shadowProjInfo;\n      vec3 shadowViewDir0, shadowViewDir1, shadowViewDir2;\n      int level = CCGetCSMLevel(csmPos, shadowProjDepthInfo, shadowProjInfo, shadowViewDir0, shadowViewDir1, shadowViewDir2, worldPos);\n      if (level < 0) { return 1.0; }\n      vec4 pos = ApplyShadowDepthBias_FaceNormal(csmPos, N, shadowBias.y, shadowViewDir0, shadowViewDir1, shadowViewDir2, shadowProjInfo.xy);\n      pos = ApplyShadowDepthBias_Orthographic(pos, shadowBias.x, shadowProjDepthInfo.x, shadowProjDepthInfo.y);\n      float realtimeShadow = 1.0;\n      #if CC_DIR_SHADOW_PCF_TYPE == 3\n        realtimeShadow = CCGetDirLightShadowFactorSoft5X(pos);\n      #endif\n      #if CC_DIR_SHADOW_PCF_TYPE == 2\n        realtimeShadow = CCGetDirLightShadowFactorSoft3X(pos);\n      #endif\n      #if CC_DIR_SHADOW_PCF_TYPE == 1\n        realtimeShadow = CCGetDirLightShadowFactorSoft(pos);\n      #endif\n      #if CC_DIR_SHADOW_PCF_TYPE == 0\n        realtimeShadow = CCGetDirLightShadowFactorHard(pos);\n      #endif\n      return mix(realtimeShadow, 1.0, cc_shadowNFLSInfo.w);\n    }\n  #else\n    int CCGetCSMLevel(out vec4 csmPos, out vec4 shadowProjDepthInfo, out vec4 shadowProjInfo, out vec3 shadowViewDir0, out vec3 shadowViewDir1, out vec3 shadowViewDir2, vec3 worldPos) {\n      return -1;\n    }\n    float CCCSMFactorBase(vec3 worldPos, vec3 N, vec2 shadowBias) {\n      vec4 shadowPos = cc_matLightViewProj * vec4(worldPos, 1.0);\n      return CCShadowFactorBase(shadowPos, N, shadowBias);\n    }\n  #endif\n#endif\n#if CC_USE_IBL\n  uniform samplerCube cc_environment;\n  vec4 fragTextureLod (sampler2D tex, vec2 coord, float lod) {\n      #ifdef GL_EXT_shader_texture_lod\n        return texture2DLodEXT(tex, coord, lod);\n      #else\n        return texture2D(tex, coord, lod);\n      #endif\n  }\n  vec4 fragTextureLod (samplerCube tex, vec3 coord, float lod) {\n      #ifdef GL_EXT_shader_texture_lod\n        return textureCubeLodEXT(tex, coord, lod);\n      #else\n        return textureCube(tex, coord, lod);\n      #endif\n  }\n  vec3 unpackRGBE (vec4 rgbe) {\n    return rgbe.rgb * pow(1.1, rgbe.a * 255.0 - 128.0);\n  }\n  #if CC_USE_DIFFUSEMAP\n    uniform samplerCube cc_diffuseMap;\n  #endif\n#endif\nfloat GGXMobile (float roughness, float NoH, vec3 H, vec3 N) {\n  vec3 NxH = cross(N, H);\n  float OneMinusNoHSqr = dot(NxH, NxH);\n  float a = roughness * roughness;\n  float n = NoH * a;\n  float p = a / (OneMinusNoHSqr + n * n);\n  return p * p;\n}\nfloat CalcSpecular (float roughness, float NoH, vec3 H, vec3 N) {\n  return (roughness * 0.25 + 0.25) * GGXMobile(roughness, NoH, H, N);\n}\nvec3 BRDFApprox (vec3 specular, float roughness, float NoV) {\n  const vec4 c0 = vec4(-1.0, -0.0275, -0.572, 0.022);\n  const vec4 c1 = vec4(1.0, 0.0425, 1.04, -0.04);\n  vec4 r = roughness * c0 + c1;\n  float a004 = min(r.x * r.x, exp2(-9.28 * NoV)) * r.x + r.y;\n  vec2 AB = vec2(-1.04, 1.04) * a004 + r.zw;\n  AB.y *= clamp(50.0 * specular.g, 0.0, 1.0);\n  return specular * AB.x + AB.y;\n}\n#if USE_REFLECTION_DENOISE\n  vec3 GetEnvReflectionWithMipFiltering(vec3 R, float roughness, float mipCount, float denoiseIntensity) {\n    #if CC_USE_IBL\n    \tfloat mip = roughness * (mipCount - 1.0);\n    \tfloat delta = (dot(dFdx(R), dFdy(R))) * 1000.0;\n    \tfloat mipBias = mix(0.0, 5.0, clamp(delta, 0.0, 1.0));\n    \tvec4 biased = fragTextureLod(cc_environment, R, mip + mipBias);\n     \tvec4 filtered = textureCube(cc_environment, R);\n      #if CC_USE_IBL == 2\n      \tbiased.rgb = unpackRGBE(biased);\n      \tfiltered.rgb = unpackRGBE(filtered);\n      #else\n      \tbiased.rgb = SRGBToLinear(biased.rgb);\n      \tfiltered.rgb = SRGBToLinear(filtered.rgb);\n      #endif\n      return mix(biased.rgb, filtered.rgb, denoiseIntensity);\n    #else\n      return vec3(0.0, 0.0, 0.0);\n    #endif\n  }\n#endif\nstruct StandardSurface {\n  vec4 albedo;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    vec3 position, position_fract_part;\n    #else\n    vec3 position;\n    #endif\n  vec3 normal;\n  vec3 emissive;\n  vec3 lightmap;\n  float lightmap_test;\n  float roughness;\n  float metallic;\n  float occlusion;\n  float specularIntensity;\n  #if CC_RECEIVE_SHADOW\n    vec2 shadowBias;\n  #endif\n};\nvec4 CCStandardShadingBase (StandardSurface s, vec4 shadowPos) {\n  vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n  vec3 specular = mix(vec3(0.08 * s.specularIntensity), s.albedo.rgb, s.metallic);\n  vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n  vec3 N = normalize(s.normal);\n  vec3 V = normalize(cc_cameraPos.xyz - position);\n  vec3 L = normalize(-cc_mainLitDir.xyz);\n  float NL = max(dot(N, L), 0.0);\n  float shadow = 1.0;\n  #if CC_RECEIVE_SHADOW && CC_SHADOW_TYPE == 2\n    if (NL > 0.0 && cc_mainLitDir.w > 0.0) {\n      if (cc_shadowLPNNInfo.w > 0.0) {\n        #if CC_DIR_LIGHT_SHADOW_TYPE == 2\n          shadow = CCCSMFactorBase(position, N, s.shadowBias);\n        #endif\n      } else {\n        #if CC_DIR_LIGHT_SHADOW_TYPE == 1\n          shadow = CCShadowFactorBase(shadowPos, N, s.shadowBias);\n        #endif\n      }\n    }\n  #endif\n  #if CC_USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    vec3 lightmap = s.lightmap.rgb;\n    #if CC_USE_HDR\n        lightmap.rgb *= cc_exposure.w * cc_exposure.x;\n    #endif\n    vec3 finalColor = diffuse * lightmap.rgb * shadow;\n  #else\n    float NV = max(abs(dot(N, V)), 0.0);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 H = normalize(L + V);\n    float NH = max(dot(N, H), 0.0);\n    vec3 finalColor = NL * cc_mainLitColor.rgb * cc_mainLitColor.w;\n    vec3 diffuseContrib = diffuse / PI;\n    vec3 specularContrib = specular * CalcSpecular(s.roughness, NH, H, N);\n    vec3 dirlightContrib = (diffuseContrib + specularContrib);\n    dirlightContrib *= shadow;\n    finalColor *= dirlightContrib;\n  #endif\n  float fAmb = 0.5 - N.y * 0.5;\n  vec3 ambDiff = mix(cc_ambientSky.rgb, cc_ambientGround.rgb, fAmb);\n  #if CC_USE_IBL\n    #if CC_USE_DIFFUSEMAP\n      vec4 diffuseMap = textureCube(cc_diffuseMap, N);\n      #if CC_USE_DIFFUSEMAP == 2\n        ambDiff = unpackRGBE(diffuseMap);\n      #else\n        ambDiff = SRGBToLinear(diffuseMap.rgb);\n      #endif\n    #endif\n    vec3 R = normalize(reflect(-V, N));\n    vec3 rotationDir = RotationVecFromAxisY(R.xyz, cc_surfaceTransform.z, cc_surfaceTransform.w);\n    #if USE_REFLECTION_DENOISE && !CC_IBL_CONVOLUTED\n      vec3 env = GetEnvReflectionWithMipFiltering(rotationDir, s.roughness, cc_ambientGround.w, 0.6);\n    #else\n      vec4 envmap = fragTextureLod(cc_environment, rotationDir, s.roughness * (cc_ambientGround.w - 1.0));\n      #if CC_USE_IBL == 2\n        vec3 env = unpackRGBE(envmap);\n      #else\n        vec3 env = SRGBToLinear(envmap.rgb);\n      #endif\n    #endif\n    finalColor += env * cc_ambientSky.w * specular * s.occlusion;\n  #endif\n  finalColor += ambDiff.rgb * cc_ambientSky.w * diffuse * s.occlusion;\n  finalColor += s.emissive;\n  return vec4(finalColor, s.albedo.a);\n}\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = ACESToneMap(color.rgb);\n  #endif\n  color.rgb = LinearToSRGB(color.rgb);\n  return color;\n}\nvarying highp vec4 v_shadowPos;\n#if CC_RECEIVE_SHADOW && CC_SHADOW_TYPE == 2\n#endif\n#if CC_USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  varying vec3 v_luv;\n  uniform sampler2D cc_lightingMap;\n#endif\nvarying vec3 v_position;\nvarying vec2 v_uv;\nvarying vec2 v_uv1;\nvarying vec3 v_normal;\nvarying vec4 viewWorld;\nvarying vec4 p_position;\nvarying vec3 v_tangent;\nvarying vec3 v_bitangent;\n#if USE_VERTEX_COLOR\n  varying vec4 v_color;\n#endif\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_NORMAL_MAP\n  uniform sampler2D normalMap;\n#endif\n#if USE_PBR_MAP\n  uniform sampler2D pbrMap;\n#endif\n#if USE_METALLIC_ROUGHNESS_MAP\n  uniform sampler2D metallicRoughnessMap;\n#endif\n#if USE_OCCLUSION_MAP\n  uniform sampler2D occlusionMap;\n#endif\n#if USE_EMISSIVE_MAP\n  uniform sampler2D emissiveMap;\n#endif\n#if USE_CLEARCOAT\n  uniform samplerCube reflEnvMap;\n  uniform samplerCube reflLightMap;\n  uniform sampler2D coatNormal;\n#endif\n#if USE_FLAKE\n  uniform sampler2D flakeMask;\n  uniform sampler2D flakeNormal;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvec3 RGBToHSV (vec3 x) {\n  vec4 a = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n  vec4 b = mix( vec4( x.bg, a.wz ), vec4( x.gb, a.xy ), step( x.b, x.g ) );\n  vec4 c = mix( vec4( b.xyw, x.r ), vec4( x.r, b.yzx ), step( b.x, x.r ) );\n  float d = c.x - min( c.w, c.y );\n  float e = 1.0e-10;\n  return vec3( abs(c.z + (c.w - c.y) / (6.0 * d + e)), d / (c.x + e), c.x);\n}\nvec3 HSVToRGB (vec3 x) {\n  vec4 a = vec4( 1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0 );\n  vec3 b = abs( fract( x.xxx + a.xyz ) * 6.0 - a.www );\n  return x.z * mix( a.xxx, clamp((b - a.xxx), 0.0, 1.0), x.y );\n}\nvoid surf (out StandardSurface s) {\n  vec4 baseColor = albedo;\n  #if USE_VERTEX_COLOR\n    baseColor.rgb *= SRGBToLinear(v_color.rgb);\n    baseColor.a *= v_color.a;\n  #endif\n  #if USE_ALBEDO_MAP\n    vec4 texColor = texture2D(albedoMap, ALBEDO_UV);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    baseColor *= texColor;\n  #endif\n  s.albedo = baseColor;\n  s.albedo.rgb *= albedoScaleAndCutoff.xyz;\n  #if USE_ALPHA_TEST\n    if (s.albedo.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  #if CC_USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    vec4 lightColor = texture2D(cc_lightingMap, v_luv.xy);\n    s.lightmap = lightColor.rgb;\n    s.lightmap_test = v_luv.z;\n  #endif\n  s.normal = v_normal;\n  #if USE_NORMAL_MAP\n    vec3 nmmp = texture2D(normalMap, NORMAL_UV).xyz - vec3(0.5);\n    s.normal =\n      (nmmp.x * emissiveScaleParam.w) * normalize(v_tangent) +\n      (nmmp.y * emissiveScaleParam.w) * normalize(v_bitangent) +\n      (nmmp.z) * normalize(s.normal);\n  #endif\n  s.position = v_position;\n  vec4 pbr = pbrParams;\n  #if USE_PBR_MAP\n    vec4 res = texture2D(pbrMap, PBR_UV);\n    pbr.x *= res.r;\n    pbr.y *= res.g;\n    pbr.z *= res.b;\n    pbr.w *= res.a;\n  #endif\n  #if USE_METALLIC_ROUGHNESS_MAP\n    vec4 metallicRoughness = texture2D(metallicRoughnessMap, PBR_UV);\n    pbr.z *= metallicRoughness.b;\n    pbr.y *= metallicRoughness.g;\n  #endif\n  #if USE_OCCLUSION_MAP\n    pbr.x *= texture2D(occlusionMap, PBR_UV).r;\n  #endif\n  s.occlusion = pbr.x;\n  s.roughness = pbr.y;\n  s.specularIntensity = 0.5;\n  s.metallic = pbr.z;\n  s.emissive = emissive.rgb * emissiveScaleParam.xyz;\n  #if USE_EMISSIVE_MAP\n    s.emissive *= SRGBToLinear(texture2D(emissiveMap, EMISSIVE_UV).rgb);\n  #endif\n  vec4 halfWorld = normalize(viewWorld + normalize(cc_mainLitDir));\n  float NdotV = dot(normalize(v_normal), normalize(viewWorld.xyz));\n  float NdotH = dot(normalize(v_normal), normalize(halfWorld.xyz));\n  float baseMask = clamp(1.0 - fresnelScale * pow(clamp(1.0 - NdotV, 0.0, 1.0), fresnelHard), 0.0, 1.0);\n  vec4 baseBlend = mix(secondPaintColor, s.albedo, baseMask);\n  s.albedo = baseBlend;\n  vec3 worldRefl = reflect(normalize(-viewWorld.xyz), normalize(v_normal));\n  #if USE_CLEARCOAT\n    vec3 reflUV = normalize(worldRefl);\n    vec3 albedoHSV01 = RGBToHSV(s.albedo.rgb);\n    vec3 hsv01 = vec3(albedoHSV01.x, albedoHSV01.y, clamp((albedoHSV01.z + 0.15), 0.15, 1.0));\n    vec3 reflColor = HSVToRGB(hsv01);\n    vec3 reflShift = mix(reflColor, vec3(1.0, 1.0, 1.0), reflEnvMapScale);\n    vec4 reflMap = textureCube(reflEnvMap, reflUV, s.roughness);\n    vec4 reflOnly = (reflMap * pow(1.1, reflMap.a * 255.0 - 128.0) * 5.0) * vec4(reflShift, 0.0);\n    float reflMask = mix(0.0, 1.0, (reflScale * 2.0) * pow((1.0 - NdotV), reflHard / 2.5));\n    vec4 coatRef = mix(s.albedo, reflOnly, reflMask);\n    s.albedo = coatRef;\n    vec4 reflLight = textureCube(reflLightMap, reflUV, s.roughness);\n    vec4 lightOnly = (reflLight * pow(1.1, reflLight.a * 255.0 - 128.0) * 5.0);\n    vec4 coatLit = mix(s.albedo, lightOnly, reflMask * 0.5 * reflLightScale);\n    s.albedo = coatLit;\n    vec2 coatUV = v_uv * coatTiling.xy + coatTiling.zw;\n    vec3 coatNormal = texture2D(coatNormal, coatUV).xyz - vec3(0.5);\n    vec3 coat = (coatNormal.x * emissiveScaleParam.w * coatNormalScale) * normalize(v_tangent) +\n                (coatNormal.y * emissiveScaleParam.w * coatNormalScale) * normalize(v_bitangent) +\n                (coatNormal.z) * normalize(s.normal);\n    s.normal = normalize(vec3(s.normal.rg + coat.rg, s.normal.b * coat.b));\n  #endif\n  #if USE_FLAKE\n    vec2 flakeUV = (v_uv * flakeSize) * flakeTiling.xy + flakeTiling.zw;\n    vec4 flakeMask = texture2D(flakeMask, flakeUV);\n    vec3 albedoHSV02 = RGBToHSV(s.albedo.rgb);\n    vec3 hsv02 = vec3(albedoHSV02.x, albedoHSV02.y, albedoHSV02.z * 1.25);\n    vec3 flakeColor = HSVToRGB(hsv02);\n    float flakeTarget = 1.0 - clamp((p_position.z - cc_nearFar.z) / max(flakeDist, 0.0001), 0.0, 1.0);\n    float flankMask = flakeTarget * flakeTarget * flakeMask.a * ceil(flakeNormalScale);\n    vec3 flakeNormal = texture2D(flakeNormal, flakeUV).xyz - vec3(0.5);\n    vec3 flake = (flakeNormal.x * flankMask * flakeNormalScale) * normalize(v_tangent) +\n                 (flakeNormal.y * flankMask * flakeNormalScale) * normalize(v_bitangent) +\n                 (flakeNormal.z) * normalize(s.normal);\n    s.normal = normalize(vec3(s.normal.rg + flake.rg, s.normal.b * flake.b));\n  #endif\n}\n#if CC_FORWARD_ADD\n  #if CC_PIPELINE_TYPE == 0\n    #define LIGHTS_PER_PASS 1\n  #else\n    #define LIGHTS_PER_PASS 10\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  uniform highp vec4 cc_lightPos[LIGHTS_PER_PASS];\n  uniform vec4 cc_lightColor[LIGHTS_PER_PASS];\n  uniform vec4 cc_lightSizeRangeAngle[LIGHTS_PER_PASS];\n  uniform vec4 cc_lightDir[LIGHTS_PER_PASS];\n  #endif\n  float SmoothDistAtt (float distSqr, float invSqrAttRadius) {\n    float factor = distSqr * invSqrAttRadius;\n    float smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\n    return smoothFactor * smoothFactor;\n  }\n  float GetDistAtt (float distSqr, float invSqrAttRadius) {\n    float attenuation = 1.0 / max(distSqr, 0.01*0.01);\n    attenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\n    return attenuation;\n  }\n  float GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\n    float cd = dot(litDir, L);\n    float attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\n    return (attenuation * attenuation);\n  }\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  vec4 CCStandardShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 position;\n      #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n      position = unpackHighpData(s.position, s.position_fract_part);\n      #else\n      position = s.position;\n      #endif\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / PI;\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    float NV = max(abs(dot(N, V)), 0.0);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    int numLights = CC_PIPELINE_TYPE == 0 ? LIGHTS_PER_PASS : int(cc_lightDir[0].w);\n    for (int i = 0; i < LIGHTS_PER_PASS; i++) {\n      if (i >= numLights) break;\n      vec3 SLU = cc_lightPos[i].xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.0);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = cc_lightSizeRangeAngle[i].x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = litRadiusSqr / max(litRadiusSqr, distSqr);\n      float attRadiusSqrInv = 1.0 / max(cc_lightSizeRangeAngle[i].y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (cc_lightPos[i].w > 0.0) {\n        float cosInner = max(dot(-cc_lightDir[i].xyz, SL), 0.01);\n        float cosOuter = cc_lightSizeRangeAngle[i].z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -cc_lightDir[i].xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = cc_lightColor[i].rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW  && CC_SHADOW_TYPE == 2\n        if (cc_lightPos[i].w > 0.0 && cc_lightSizeRangeAngle[i].w > 0.0) {\n          shadow = CCSpotShadowFactorBase(shadowPos, position, s.shadowBias);\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * cc_lightColor[i].w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n  readonly buffer b_ccLightsBuffer { vec4 b_ccLights[]; };\n  readonly buffer b_clusterLightIndicesBuffer { uint b_clusterLightIndices[]; };\n  readonly buffer b_clusterLightGridBuffer { uvec4 b_clusterLightGrid[]; };\n  struct CCLight\n  {\n    vec4 cc_lightPos;\n    vec4 cc_lightColor;\n    vec4 cc_lightSizeRangeAngle;\n    vec4 cc_lightDir;\n  };\n  struct Cluster\n  {\n    vec3 minBounds;\n    vec3 maxBounds;\n  };\n  struct LightGrid\n  {\n    uint offset;\n    uint ccLights;\n  };\n  CCLight getCCLight(uint i)\n  {\n    CCLight light;\n    light.cc_lightPos = b_ccLights[4u * i + 0u];\n    light.cc_lightColor = b_ccLights[4u * i + 1u];\n    light.cc_lightSizeRangeAngle = b_ccLights[4u * i + 2u];\n    light.cc_lightDir = b_ccLights[4u * i + 3u];\n    return light;\n  }\n  LightGrid getLightGrid(uint cluster)\n  {\n    uvec4 gridvec = b_clusterLightGrid[cluster];\n    LightGrid grid;\n    grid.offset = gridvec.x;\n    grid.ccLights = gridvec.y;\n    return grid;\n  }\n  uint getGridLightIndex(uint start, uint offset)\n  {\n    return b_clusterLightIndices[start + offset];\n  }\n  uint getClusterZIndex(vec4 worldPos)\n  {\n    float scale = float(24) / log(cc_nearFar.y / cc_nearFar.x);\n    float bias = -(float(24) * log(cc_nearFar.x) / log(cc_nearFar.y / cc_nearFar.x));\n    float eyeDepth = -(cc_matView * worldPos).z;\n    uint zIndex = uint(max(log(eyeDepth) * scale + bias, 0.0));\n    return zIndex;\n  }\n  uint getClusterIndex(vec4 fragCoord, vec4 worldPos)\n  {\n    uint zIndex = getClusterZIndex(worldPos);\n    float clusterSizeX = ceil(cc_viewPort.z / float(16));\n    float clusterSizeY = ceil(cc_viewPort.w / float(8));\n    uvec3 indices = uvec3(uvec2(fragCoord.xy / vec2(clusterSizeX, clusterSizeY)), zIndex);\n    uint cluster = (16u * 8u) * indices.z + 16u * indices.y + indices.x;\n    return cluster;\n  }\n  vec4 CCClusterShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / PI;\n    vec3 position;\n      #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n      position = unpackHighpData(s.position, s.position_fract_part);\n      #else\n      position = s.position;\n      #endif\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    float NV = max(abs(dot(N, V)), 0.001);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    uint cluster = getClusterIndex(gl_FragCoord, vec4(position, 1.0));\n    LightGrid grid = getLightGrid(cluster);\n    uint numLights = grid.ccLights;\n    for (uint i = 0u; i < 100u; i++) {\n      if (i >= numLights) break;\n      uint lightIndex = getGridLightIndex(grid.offset, i);\n      CCLight light = getCCLight(lightIndex);\n      vec3 SLU = light.cc_lightPos.xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.001);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = light.cc_lightSizeRangeAngle.x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = PI * (litRadiusSqr / max(litRadiusSqr , distSqr));\n      float attRadiusSqrInv = 1.0 / max(light.cc_lightSizeRangeAngle.y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (light.cc_lightPos.w > 0.0) {\n        float cosInner = max(dot(-light.cc_lightDir.xyz, SL), 0.01);\n        float cosOuter = light.cc_lightSizeRangeAngle.z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -light.cc_lightDir.xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = light.cc_lightColor.rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW && CC_SHADOW_TYPE == 2\n        if (light.cc_lightPos.w > 0.0) {\n          shadow = CCSpotShadowFactorBase(shadowPos, position, s.shadowBias);\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * light.cc_lightColor.w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  #endif\n  void main () {\n    StandardSurface s; surf(s);\n    #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n    vec4 color = CCClusterShadingAdditive(s, v_shadowPos);\n    #else\n    vec4 color = CCStandardShadingAdditive(s, v_shadowPos);\n    #endif\n    gl_FragData[0] = CCFragOutput(color);\n  }\n#elif (CC_PIPELINE_TYPE == 0 || CC_FORCE_FORWARD_SHADING)\n  void main () {\n    StandardSurface s; surf(s);\n    vec4 color = CCFragOutput(CCStandardShadingBase(s, v_shadowPos));\n    #if CC_USE_FOG != 4\n      CC_APPLY_FOG(color, s.position.xyz);\n    #endif\n    gl_FragData[0] = color;\n  }\n#elif CC_PIPELINE_TYPE == 1\n  vec2 signNotZero(vec2 v) {\n    return vec2((v.x >= 0.0) ? +1.0 : -1.0, (v.y >= 0.0) ? +1.0 : -1.0);\n  }\n  vec2 float32x3_to_oct(in vec3 v) {\n    vec2 p = v.xy * (1.0 / (abs(v.x) + abs(v.y) + abs(v.z)));\n    return (v.z <= 0.0) ? ((1.0 - abs(p.yx)) * signNotZero(p)) : p;\n  }\n  void main () {\n    StandardSurface s; surf(s);\n    gl_FragData[0] = s.albedo;\n    gl_FragData[1] = vec4(float32x3_to_oct(s.normal), s.roughness, s.metallic);\n    gl_FragData[2] = vec4(s.emissive, s.occlusion);\n  }\n#endif"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]},{"name":"CCShadow","defines":[]},{"name":"CCCSM","defines":["CC_SUPPORT_CASCADED_SHADOW_MAP"]}],"samplerTextures":[{"name":"cc_shadowMap","defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_spotShadowMap","defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_environment","defines":["CC_USE_IBL"]},{"name":"cc_diffuseMap","defines":["CC_USE_DIFFUSEMAP"]}],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","!CC_USE_REAL_TIME_JOINT_TEXTURE"]},{"name":"CCLocalBatched","defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"CCLocal","defines":["!USE_INSTANCING","!USE_BATCHING"]},{"name":"CCForwardLight","defines":["CC_FORWARD_ADD","CC_ENABLE_CLUSTERED_LIGHT_CULLING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"cc_realtimeJoint","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","CC_USE_REAL_TIME_JOINT_TEXTURE"]},{"name":"cc_lightingMap","defines":["CC_USE_LIGHTMAP","!USE_BATCHING","!CC_FORWARD_ADD"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":188,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":120}},"defines":[{"name":"USE_INSTANCING","type":"boolean"},{"name":"USE_BATCHING","type":"boolean"},{"name":"CC_USE_SKINNING","type":"boolean"},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean"},{"name":"CC_USE_LIGHTMAP","type":"boolean"},{"name":"CC_RECEIVE_SHADOW","type":"boolean"},{"name":"CC_USE_MORPH","type":"boolean"},{"name":"CC_MORPH_TARGET_COUNT","type":"number","range":[2,8]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean"},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean"},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean"},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean"},{"name":"CC_USE_REAL_TIME_JOINT_TEXTURE","type":"boolean"},{"name":"CC_USE_FOG","type":"number","range":[0,4]},{"name":"CC_USE_ACCURATE_FOG","type":"boolean"},{"name":"CC_SUPPORT_CASCADED_SHADOW_MAP","type":"boolean"},{"name":"USE_VERTEX_COLOR","type":"boolean"},{"name":"HAS_SECOND_UV","type":"boolean"},{"name":"CC_FORWARD_ADD","type":"boolean"},{"name":"USE_TWOSIDE","type":"boolean"},{"name":"SAMPLE_FROM_RT","type":"boolean"},{"name":"CC_USE_DEBUG_VIEW","type":"number","range":[0,3]},{"name":"CC_SHADOWMAP_FORMAT","type":"number","range":[0,3]},{"name":"CC_SHADOWMAP_USE_LINEAR_DEPTH","type":"boolean"},{"name":"CC_DIR_SHADOW_PCF_TYPE","type":"number","range":[0,3]},{"name":"CC_USE_IBL","type":"number","range":[0,2]},{"name":"CC_USE_DIFFUSEMAP","type":"number","range":[0,2]},{"name":"USE_REFLECTION_DENOISE","type":"boolean"},{"name":"CC_SHADOW_TYPE","type":"number","range":[0,3]},{"name":"CC_DIR_LIGHT_SHADOW_TYPE","type":"number","range":[0,3]},{"name":"CC_USE_HDR","type":"boolean"},{"name":"CC_IBL_CONVOLUTED","type":"boolean"},{"name":"USE_ALBEDO_MAP","type":"boolean"},{"name":"ALBEDO_UV","type":"string","options":["v_uv","v_uv1"]},{"name":"USE_NORMAL_MAP","type":"boolean"},{"name":"NORMAL_UV","type":"string","options":["v_uv","v_uv1"]},{"name":"PBR_UV","type":"string","options":["v_uv","v_uv1"]},{"name":"USE_PBR_MAP","type":"boolean"},{"name":"USE_METALLIC_ROUGHNESS_MAP","type":"boolean"},{"name":"USE_OCCLUSION_MAP","type":"boolean"},{"name":"USE_EMISSIVE_MAP","type":"boolean"},{"name":"EMISSIVE_UV","type":"string","options":["v_uv","v_uv1"]},{"name":"USE_CLEARCOAT","type":"boolean"},{"name":"USE_FLAKE","type":"boolean"},{"name":"USE_ALPHA_TEST","type":"boolean"},{"name":"ALPHA_TEST_CHANNEL","type":"string","options":["a","r"]},{"name":"CC_PIPELINE_TYPE","type":"number","range":[0,1]},{"name":"CC_FORCE_FORWARD_SHADING","type":"boolean"}]},{"hash":491941319,"name":"../Mat/builtin-standard-carpaint|shadow-caster-vs:vert|shadow-caster-fs:frag","blocks":[{"name":"Constants","stageFlags":17,"binding":0,"members":[{"name":"tilingOffset","type":16,"count":1},{"name":"albedo","type":16,"count":1},{"name":"albedoScaleAndCutoff","type":16,"count":1},{"name":"pbrParams","type":16,"count":1},{"name":"emissive","type":16,"count":1},{"name":"emissiveScaleParam","type":16,"count":1},{"name":"secondPaintColor","type":16,"count":1},{"name":"coatTiling","type":16,"count":1},{"name":"flakeTiling","type":16,"count":1},{"name":"fresnelScale","type":13,"count":1},{"name":"fresnelHard","type":13,"count":1},{"name":"reflEnvMapScale","type":13,"count":1},{"name":"reflScale","type":13,"count":1},{"name":"reflHard","type":13,"count":1},{"name":"reflLightScale","type":13,"count":1},{"name":"coatNormalScale","type":13,"count":1},{"name":"flakeSize","type":13,"count":1},{"name":"flakeDist","type":13,"count":1},{"name":"flakeNormalScale","type":13,"count":1}],"defines":[]}],"samplerTextures":[{"name":"albedoMap","type":28,"count":1,"stageFlags":16,"binding":1,"defines":["USE_ALBEDO_MAP"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_normal","format":32,"location":1,"defines":[]},{"name":"a_texCoord","format":21,"location":2,"defines":[]},{"name":"a_tangent","format":44,"location":3,"defines":[]},{"name":"a_joints","location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","format":44,"isInstanced":true,"location":6,"defines":["USE_INSTANCING","CC_USE_BAKED_ANIMATION"]},{"name":"a_matWorld0","format":44,"isInstanced":true,"location":7,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING","CC_USE_LIGHTMAP"]},{"name":"a_localShadowBias","format":21,"isInstanced":true,"location":11,"defines":["USE_INSTANCING","CC_RECEIVE_SHADOW"]},{"name":"a_dyn_batch_id","format":11,"location":12,"defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"a_vertexId","format":11,"location":13,"defines":["CC_USE_MORPH"]},{"name":"a_texCoord1","format":21,"location":14,"defines":[]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"glsl3":{"vert":"\n  precision highp float;\n  #define QUATER_PI         0.78539816340\n  #define HALF_PI           1.57079632679\n  #define PI                3.14159265359\n  #define PI2               6.28318530718\n  #define PI4               12.5663706144\n  #define INV_QUATER_PI     1.27323954474\n  #define INV_HALF_PI       0.63661977237\n  #define INV_PI            0.31830988618\n  #define INV_PI2           0.15915494309\n  #define INV_PI4           0.07957747155\n  #define EPSILON           1e-6\n  #define EPSILON_LOWP      1e-4\n  #define LOG2              1.442695\n  #define EXP_VALUE         2.71828183f\n  #define FP_MAX            65504.0\n  #define FP_SCALE          0.0009765625\n  #define FP_SCALE_INV      1024.0\n  #define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n  highp float decode32 (highp vec4 rgba) {\n    rgba = rgba * 255.0;\n    highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n    highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n    highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n    return Sign * exp2(Exponent - 23.0) * Mantissa;\n  }\n  struct StandardVertInput {\n    highp vec4 position;\n    vec3 normal;\n    vec4 tangent;\n  };\n  in vec3 a_position;\n  in vec3 a_normal;\n  in vec2 a_texCoord;\n  in vec4 a_tangent;\n  #if CC_USE_SKINNING\n      in vec4 a_joints;\n    in vec4 a_weights;\n  #endif\n  #if USE_INSTANCING\n    #if CC_USE_BAKED_ANIMATION\n      in highp vec4 a_jointAnimInfo;\n    #endif\n    in vec4 a_matWorld0;\n    in vec4 a_matWorld1;\n    in vec4 a_matWorld2;\n    #if CC_USE_LIGHTMAP\n      in vec4 a_lightingMapUVParam;\n    #endif\n    #if CC_RECEIVE_SHADOW\n      in vec2 a_localShadowBias;\n    #endif\n  #elif USE_BATCHING\n    in float a_dyn_batch_id;\n  #endif\n  #if CC_USE_MORPH\n      in float a_vertexId;\n      int getVertexId() {\n        return int(a_vertexId);\n      }\n  #endif\n  #if CC_USE_MORPH\n    layout(std140) uniform CCMorph {\n      vec4 cc_displacementWeights[15];\n      vec4 cc_displacementTextureInfo;\n    };\n    #if CC_MORPH_TARGET_HAS_POSITION\n      uniform sampler2D cc_PositionDisplacements;\n    #endif\n    #if CC_MORPH_TARGET_HAS_NORMAL\n      uniform sampler2D cc_NormalDisplacements;\n    #endif\n    #if CC_MORPH_TARGET_HAS_TANGENT\n      uniform sampler2D cc_TangentDisplacements;\n    #endif\n    vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n      float pixelIndexF = float(pixelIndex);\n      float x = mod(pixelIndexF, textureResolution.x);\n      float y = floor(pixelIndexF / textureResolution.x);\n      return vec2(x, y);\n    }\n    vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n      return (vec2(location.x, location.y) + .5) / textureResolution;\n    }\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n        vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n          ivec2 texSize = textureSize(tex, 0);\n          return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n        }\n    #else\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex * 4;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n        vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n        vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n        return vec4(\n          decode32(texture(tex, x)),\n          decode32(texture(tex, y)),\n          decode32(texture(tex, z)),\n          1.0\n        );\n      }\n    #endif\n    float getDisplacementWeight(int index) {\n      int quot = index / 4;\n      int remainder = index - quot * 4;\n      if (remainder == 0) {\n        return cc_displacementWeights[quot].x;\n      } else if (remainder == 1) {\n        return cc_displacementWeights[quot].y;\n      } else if (remainder == 2) {\n        return cc_displacementWeights[quot].z;\n      } else {\n        return cc_displacementWeights[quot].w;\n      }\n    }\n    vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n    #if CC_MORPH_PRECOMPUTED\n      return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n    #else\n      vec3 result = vec3(0, 0, 0);\n      int nVertices = int(cc_displacementTextureInfo.z);\n      for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n        result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n      }\n      return result;\n    #endif\n    }\n    #if CC_MORPH_TARGET_HAS_POSITION\n    vec3 getPositionDisplacement(int vertexId) {\n        return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n    #endif\n    #if CC_MORPH_TARGET_HAS_NORMAL\n    vec3 getNormalDisplacement(int vertexId) {\n        return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n    #endif\n    #if CC_MORPH_TARGET_HAS_TANGENT\n    vec3 getTangentDisplacement(int vertexId) {\n        return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n    #endif\n    void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n      int vertexId = getVertexId();\n    #if CC_MORPH_TARGET_HAS_POSITION\n      position.xyz = position.xyz + getPositionDisplacement(vertexId);\n    #endif\n    #if CC_MORPH_TARGET_HAS_NORMAL\n      normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n    #endif\n    #if CC_MORPH_TARGET_HAS_TANGENT\n      tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n    #endif\n    }\n    void applyMorph (inout vec4 position) {\n    #if CC_MORPH_TARGET_HAS_POSITION\n      position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n    #endif\n    }\n  #endif\n  #if CC_USE_SKINNING\n    #if CC_USE_BAKED_ANIMATION\n      layout(std140) uniform CCSkinningTexture {\n        highp vec4 cc_jointTextureInfo;\n      };\n      layout(std140) uniform CCSkinningAnimation {\n        highp vec4 cc_jointAnimInfo;\n      };\n      uniform highp sampler2D cc_jointTexture;\n      void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n      {\n        #if USE_INSTANCING\n          highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n        #else\n          highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n        #endif\n        invSize = cc_jointTextureInfo.w;\n        highp float tempY = floor(temp * invSize);\n        x = floor(temp - tempY * cc_jointTextureInfo.x);\n        y = (tempY + 0.5) * invSize;\n      }\n    #else\n      #if CC_USE_REAL_TIME_JOINT_TEXTURE\n        uniform highp sampler2D cc_realtimeJoint;\n      #else\n        layout(std140) uniform CCSkinning {\n          highp vec4 cc_joints[CC_JOINT_UNIFORM_CAPACITY * 3];\n        };\n      #endif\n    #endif\n    #if CC_USE_BAKED_ANIMATION\n      #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n        mat4 getJointMatrix (float i) {\n          highp float x, y, invSize;\n          CCGetJointTextureCoords(3.0, i, x, y, invSize);\n          vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n          vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n          vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #else\n        mat4 getJointMatrix (float i) {\n          highp float x, y, invSize;\n          CCGetJointTextureCoords(12.0, i, x, y, invSize);\n          vec4 v1 = vec4(\n            decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n            decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n            decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n            decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n          );\n          vec4 v2 = vec4(\n            decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n            decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n            decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n            decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n          );\n          vec4 v3 = vec4(\n            decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n            decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n            decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n            decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n          );\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #endif\n    #else\n      #if CC_USE_REAL_TIME_JOINT_TEXTURE\n        #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n          mat4 getJointMatrix (float i) {\n            float x = i;\n            vec4 v1 = texture(cc_realtimeJoint, vec2( x / 256.0, 0.5 / 3.0));\n            vec4 v2 = texture(cc_realtimeJoint, vec2( x / 256.0, 1.5 / 3.0));\n            vec4 v3 = texture(cc_realtimeJoint, vec2( x / 256.0, 2.5 / 3.0));\n            return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n          }\n        #else\n          mat4 getJointMatrix (float i) {\n           float x = 4.0 * i;\n            vec4 v1 = vec4(\n              decode32(texture(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 0.5 / 3.0))),\n              decode32(texture(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 0.5 / 3.0))),\n              decode32(texture(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 0.5 / 3.0))),\n              decode32(texture(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 0.5 / 3.0)))\n            );\n            vec4 v2 = vec4(\n              decode32(texture(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 1.5 / 3.0))),\n              decode32(texture(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 1.5 / 3.0))),\n              decode32(texture(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 1.5 / 3.0))),\n              decode32(texture(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 1.5 / 3.0)))\n            );\n            vec4 v3 = vec4(\n              decode32(texture(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 2.5 / 3.0))),\n              decode32(texture(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 2.5 / 3.0))),\n              decode32(texture(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 2.5 / 3.0))),\n              decode32(texture(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 2.5 / 3.0)))\n            );\n            return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n          }\n        #endif\n      #else\n        mat4 getJointMatrix (float i) {\n          int idx = int(i);\n          vec4 v1 = cc_joints[idx * 3];\n          vec4 v2 = cc_joints[idx * 3 + 1];\n          vec4 v3 = cc_joints[idx * 3 + 2];\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #endif\n    #endif\n    mat4 skinMatrix () {\n      vec4 joints = vec4(a_joints);\n      return getJointMatrix(joints.x) * a_weights.x\n           + getJointMatrix(joints.y) * a_weights.y\n           + getJointMatrix(joints.z) * a_weights.z\n           + getJointMatrix(joints.w) * a_weights.w;\n    }\n    void CCSkin (inout vec4 position) {\n      mat4 m = skinMatrix();\n      position = m * position;\n    }\n    void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n      mat4 m = skinMatrix();\n      position = m * position;\n      normal = (m * vec4(normal, 0.0)).xyz;\n      tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n    }\n  #endif\n  void CCVertInput(inout StandardVertInput In)\n  {\n        In.position = vec4(a_position, 1.0);\n        In.normal = a_normal;\n        In.tangent = a_tangent;\n    #if CC_USE_MORPH\n      applyMorph(In.position, In.normal, In.tangent);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(In.position, In.normal, In.tangent);\n    #endif\n  }\n  #if !USE_INSTANCING\n    #if USE_BATCHING\n      layout(std140) uniform CCLocalBatched {\n        highp mat4 cc_matWorlds[10];\n      };\n    #else\n      layout(std140) uniform CCLocal {\n        highp mat4 cc_matWorld;\n        highp mat4 cc_matWorldIT;\n        highp vec4 cc_lightingMapUVParam;\n        highp vec4 cc_localShadowBias;\n      };\n    #endif\n  #endif\n  void CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n  {\n    #if USE_INSTANCING\n      matWorld = mat4(\n        vec4(a_matWorld0.xyz, 0.0),\n        vec4(a_matWorld1.xyz, 0.0),\n        vec4(a_matWorld2.xyz, 0.0),\n        vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n      );\n      matWorldIT = matWorld;\n    #elif USE_BATCHING\n      matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n      matWorldIT = matWorld;\n    #else\n      matWorld = cc_matWorld;\n      matWorldIT = cc_matWorldIT;\n    #endif\n  }\n  layout(std140) uniform Constants {\n    vec4 tilingOffset;\n    vec4 albedo;\n    vec4 albedoScaleAndCutoff;\n    vec4 pbrParams;\n    vec4 emissive;\n    vec4 emissiveScaleParam;\n    vec4 secondPaintColor;\n    vec4 coatTiling;\n    vec4 flakeTiling;\n    float fresnelScale;\n    float fresnelHard;\n    float reflEnvMapScale;\n    float reflScale;\n    float reflHard;\n    float reflLightScale;\n    float coatNormalScale;\n    float flakeSize;\n    float flakeDist;\n    float flakeNormalScale;\n  };\n  layout(std140) uniform CCShadow {\n    highp mat4 cc_matLightView;\n    highp mat4 cc_matLightViewProj;\n    highp vec4 cc_shadowInvProjDepthInfo;\n    highp vec4 cc_shadowProjDepthInfo;\n    highp vec4 cc_shadowProjInfo;\n    mediump vec4 cc_shadowNFLSInfo;\n    mediump vec4 cc_shadowWHPBInfo;\n    mediump vec4 cc_shadowLPNNInfo;\n    lowp vec4 cc_shadowColor;\n    mediump vec4 cc_planarNDInfo;\n  };\n#if CC_SUPPORT_CASCADED_SHADOW_MAP\n  layout(std140) uniform CCCSM {\n    highp vec4 cc_csmViewDir0[4];\n    highp vec4 cc_csmViewDir1[4];\n    highp vec4 cc_csmViewDir2[4];\n    highp vec4 cc_csmAtlas[4];\n    highp mat4 cc_matCSMViewProj[4];\n    highp vec4 cc_csmProjDepthInfo[4];\n    highp vec4 cc_csmProjInfo[4];\n    highp vec4 cc_csmSplitsInfo;\n  };\n#endif\n  #if HAS_SECOND_UV || CC_USE_LIGHTMAP\n    in vec2 a_texCoord1;\n  #endif\n  out vec2 v_uv;\n  out vec2 v_uv1;\n  out vec4 v_worldPos;\n  out float v_clip_depth;\n  vec4 vert () {\n    StandardVertInput In;\n    CCVertInput(In);\n    mat4 matWorld, matWorldIT;\n    CCGetWorldMatrixFull(matWorld, matWorldIT);\n    v_worldPos = matWorld * In.position;\n    vec4 clipPos = cc_matLightViewProj * v_worldPos;\n    v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n    #if HAS_SECOND_UV\n      v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n    #endif\n    v_clip_depth = clipPos.z / clipPos.w * 0.5 + 0.5;\n    return clipPos;\n  }\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n  vec4 secondPaintColor;\n  vec4 coatTiling;\n  vec4 flakeTiling;\n  float fresnelScale;\n  float fresnelHard;\n  float reflEnvMapScale;\n  float reflScale;\n  float reflHard;\n  float reflLightScale;\n  float coatNormalScale;\n  float flakeSize;\n  float flakeDist;\n  float flakeNormalScale;\n};\nvec4 packDepthToRGBA (float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 16581375.0) * depth;\n  ret = fract(ret);\n  ret -= vec4(ret.yzw, 0.0) / 255.0;\n  return ret;\n}\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n#if CC_SUPPORT_CASCADED_SHADOW_MAP\n  layout(std140) uniform CCCSM {\n    highp vec4 cc_csmViewDir0[4];\n    highp vec4 cc_csmViewDir1[4];\n    highp vec4 cc_csmViewDir2[4];\n    highp vec4 cc_csmAtlas[4];\n    highp mat4 cc_matCSMViewProj[4];\n    highp vec4 cc_csmProjDepthInfo[4];\n    highp vec4 cc_csmProjInfo[4];\n    highp vec4 cc_csmSplitsInfo;\n  };\n#endif\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nfloat GetLinearDepthFromViewSpace(vec3 viewPos, float near, float far) {\n  float dist = length(viewPos);\n  return (dist - near) / (far - near);\n}\nfloat CCGetLinearDepth(vec3 worldPos, float viewSpaceBias) {\n\tvec4 viewPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  viewPos.z += viewSpaceBias;\n\treturn GetLinearDepthFromViewSpace(viewPos.xyz, cc_shadowNFLSInfo.x, cc_shadowNFLSInfo.y);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n\treturn CCGetLinearDepth(worldPos, 0.0);\n}\n#if CC_RECEIVE_SHADOW\n  layout(std140) uniform CCGlobal {\n    highp   vec4 cc_time;\n    mediump vec4 cc_screenSize;\n    mediump vec4 cc_nativeSize;\n    mediump vec4 cc_debug_view_mode;\n    mediump vec4 cc_debug_view_composite_pack_1;\n    mediump vec4 cc_debug_view_composite_pack_2;\n    mediump vec4 cc_debug_view_composite_pack_3;\n  };\n  layout(std140) uniform CCCamera {\n    highp   mat4 cc_matView;\n    highp   mat4 cc_matViewInv;\n    highp   mat4 cc_matProj;\n    highp   mat4 cc_matProjInv;\n    highp   mat4 cc_matViewProj;\n    highp   mat4 cc_matViewProjInv;\n    highp   vec4 cc_cameraPos;\n    mediump vec4 cc_surfaceTransform;\n    mediump vec4 cc_screenScale;\n    mediump vec4 cc_exposure;\n    mediump vec4 cc_mainLitDir;\n    mediump vec4 cc_mainLitColor;\n    mediump vec4 cc_ambientSky;\n    mediump vec4 cc_ambientGround;\n    mediump vec4 cc_fogColor;\n    mediump vec4 cc_fogBase;\n    mediump vec4 cc_fogAdd;\n    mediump vec4 cc_nearFar;\n    mediump vec4 cc_viewPort;\n  };\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotShadowMap;\n  #if CC_SUPPORT_CASCADED_SHADOW_MAP\n  #else\n  #endif\n#endif\nin vec2 v_uv;\nin vec2 v_uv1;\nin vec4 v_worldPos;\nin float v_clip_depth;\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvec4 frag () {\n  vec4 baseColor = albedo;\n  #if USE_ALBEDO_MAP\n    baseColor *= texture(albedoMap, ALBEDO_UV);\n  #endif\n  #if USE_ALPHA_TEST\n    if (baseColor.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  if(cc_shadowLPNNInfo.x > 0.000001 && cc_shadowLPNNInfo.x < 1.999999) {\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      return vec4(CCGetLinearDepth(v_worldPos.xyz), 1.0, 1.0, 1.0);\n    }\n  }\n  if (cc_shadowLPNNInfo.y > 0.000001) {\n    return packDepthToRGBA(v_clip_depth);\n  }\n  return vec4(v_clip_depth, 1.0, 1.0, 1.0);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\n  precision highp float;\n  #define QUATER_PI         0.78539816340\n  #define HALF_PI           1.57079632679\n  #define PI                3.14159265359\n  #define PI2               6.28318530718\n  #define PI4               12.5663706144\n  #define INV_QUATER_PI     1.27323954474\n  #define INV_HALF_PI       0.63661977237\n  #define INV_PI            0.31830988618\n  #define INV_PI2           0.15915494309\n  #define INV_PI4           0.07957747155\n  #define EPSILON           1e-6\n  #define EPSILON_LOWP      1e-4\n  #define LOG2              1.442695\n  #define EXP_VALUE         2.71828183f\n  #define FP_MAX            65504.0\n  #define FP_SCALE          0.0009765625\n  #define FP_SCALE_INV      1024.0\n  #define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n  highp float decode32 (highp vec4 rgba) {\n    rgba = rgba * 255.0;\n    highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n    highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n    highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n    return Sign * exp2(Exponent - 23.0) * Mantissa;\n  }\n  struct StandardVertInput {\n    highp vec4 position;\n    vec3 normal;\n    vec4 tangent;\n  };\n  attribute vec3 a_position;\n  attribute vec3 a_normal;\n  attribute vec2 a_texCoord;\n  attribute vec4 a_tangent;\n  #if CC_USE_SKINNING\n      attribute vec4 a_joints;\n    attribute vec4 a_weights;\n  #endif\n  #if USE_INSTANCING\n    #if CC_USE_BAKED_ANIMATION\n      attribute highp vec4 a_jointAnimInfo;\n    #endif\n    attribute vec4 a_matWorld0;\n    attribute vec4 a_matWorld1;\n    attribute vec4 a_matWorld2;\n    #if CC_USE_LIGHTMAP\n      attribute vec4 a_lightingMapUVParam;\n    #endif\n    #if CC_RECEIVE_SHADOW\n      attribute vec2 a_localShadowBias;\n    #endif\n  #elif USE_BATCHING\n    attribute float a_dyn_batch_id;\n  #endif\n  #if CC_USE_MORPH\n      attribute float a_vertexId;\n      int getVertexId() {\n        return int(a_vertexId);\n      }\n  #endif\n  #if CC_USE_MORPH\n    uniform vec4 cc_displacementWeights[15];\n  uniform vec4 cc_displacementTextureInfo;\n    #if CC_MORPH_TARGET_HAS_POSITION\n      uniform sampler2D cc_PositionDisplacements;\n    #endif\n    #if CC_MORPH_TARGET_HAS_NORMAL\n      uniform sampler2D cc_NormalDisplacements;\n    #endif\n    #if CC_MORPH_TARGET_HAS_TANGENT\n      uniform sampler2D cc_TangentDisplacements;\n    #endif\n    vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n      float pixelIndexF = float(pixelIndex);\n      float x = mod(pixelIndexF, textureResolution.x);\n      float y = floor(pixelIndexF / textureResolution.x);\n      return vec2(x, y);\n    }\n    vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n      return (vec2(location.x, location.y) + .5) / textureResolution;\n    }\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n        vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n          int pixelIndex = elementIndex;\n          vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n          vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n          return texture2D(tex, uv);\n        }\n    #else\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex * 4;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n        vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n        vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n        return vec4(\n          decode32(texture2D(tex, x)),\n          decode32(texture2D(tex, y)),\n          decode32(texture2D(tex, z)),\n          1.0\n        );\n      }\n    #endif\n    float getDisplacementWeight(int index) {\n      int quot = index / 4;\n      int remainder = index - quot * 4;\n      if (remainder == 0) {\n        return cc_displacementWeights[quot].x;\n      } else if (remainder == 1) {\n        return cc_displacementWeights[quot].y;\n      } else if (remainder == 2) {\n        return cc_displacementWeights[quot].z;\n      } else {\n        return cc_displacementWeights[quot].w;\n      }\n    }\n    vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n    #if CC_MORPH_PRECOMPUTED\n      return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n    #else\n      vec3 result = vec3(0, 0, 0);\n      int nVertices = int(cc_displacementTextureInfo.z);\n      for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n        result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n      }\n      return result;\n    #endif\n    }\n    #if CC_MORPH_TARGET_HAS_POSITION\n    vec3 getPositionDisplacement(int vertexId) {\n        return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n    #endif\n    #if CC_MORPH_TARGET_HAS_NORMAL\n    vec3 getNormalDisplacement(int vertexId) {\n        return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n    #endif\n    #if CC_MORPH_TARGET_HAS_TANGENT\n    vec3 getTangentDisplacement(int vertexId) {\n        return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n    #endif\n    void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n      int vertexId = getVertexId();\n    #if CC_MORPH_TARGET_HAS_POSITION\n      position.xyz = position.xyz + getPositionDisplacement(vertexId);\n    #endif\n    #if CC_MORPH_TARGET_HAS_NORMAL\n      normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n    #endif\n    #if CC_MORPH_TARGET_HAS_TANGENT\n      tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n    #endif\n    }\n    void applyMorph (inout vec4 position) {\n    #if CC_MORPH_TARGET_HAS_POSITION\n      position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n    #endif\n    }\n  #endif\n  #if CC_USE_SKINNING\n    #if CC_USE_BAKED_ANIMATION\n      uniform highp vec4 cc_jointTextureInfo;\n      uniform highp vec4 cc_jointAnimInfo;\n      uniform highp sampler2D cc_jointTexture;\n      void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n      {\n        #if USE_INSTANCING\n          highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n        #else\n          highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n        #endif\n        invSize = cc_jointTextureInfo.w;\n        highp float tempY = floor(temp * invSize);\n        x = floor(temp - tempY * cc_jointTextureInfo.x);\n        y = (tempY + 0.5) * invSize;\n      }\n    #else\n      #if CC_USE_REAL_TIME_JOINT_TEXTURE\n        uniform highp sampler2D cc_realtimeJoint;\n      #else\n        uniform highp vec4 cc_joints[CC_JOINT_UNIFORM_CAPACITY * 3];\n      #endif\n    #endif\n    #if CC_USE_BAKED_ANIMATION\n      #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n        mat4 getJointMatrix (float i) {\n          highp float x, y, invSize;\n          CCGetJointTextureCoords(3.0, i, x, y, invSize);\n          vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n          vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n          vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #else\n        mat4 getJointMatrix (float i) {\n          highp float x, y, invSize;\n          CCGetJointTextureCoords(12.0, i, x, y, invSize);\n          vec4 v1 = vec4(\n            decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n            decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n            decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n            decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n          );\n          vec4 v2 = vec4(\n            decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n            decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n            decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n            decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n          );\n          vec4 v3 = vec4(\n            decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n            decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n            decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n            decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n          );\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #endif\n    #else\n      #if CC_USE_REAL_TIME_JOINT_TEXTURE\n        #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n          mat4 getJointMatrix (float i) {\n            float x = i;\n            vec4 v1 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 0.5 / 3.0));\n            vec4 v2 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 1.5 / 3.0));\n            vec4 v3 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 2.5 / 3.0));\n            return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n          }\n        #else\n          mat4 getJointMatrix (float i) {\n           float x = 4.0 * i;\n            vec4 v1 = vec4(\n              decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 0.5 / 3.0))),\n              decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 0.5 / 3.0))),\n              decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 0.5 / 3.0))),\n              decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 0.5 / 3.0)))\n            );\n            vec4 v2 = vec4(\n              decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 1.5 / 3.0))),\n              decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 1.5 / 3.0))),\n              decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 1.5 / 3.0))),\n              decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 1.5 / 3.0)))\n            );\n            vec4 v3 = vec4(\n              decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 2.5 / 3.0))),\n              decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 2.5 / 3.0))),\n              decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 2.5 / 3.0))),\n              decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 2.5 / 3.0)))\n            );\n            return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n          }\n        #endif\n      #else\n        mat4 getJointMatrix (float i) {\n          int idx = int(i);\n          vec4 v1 = cc_joints[idx * 3];\n          vec4 v2 = cc_joints[idx * 3 + 1];\n          vec4 v3 = cc_joints[idx * 3 + 2];\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #endif\n    #endif\n    mat4 skinMatrix () {\n      vec4 joints = vec4(a_joints);\n      return getJointMatrix(joints.x) * a_weights.x\n           + getJointMatrix(joints.y) * a_weights.y\n           + getJointMatrix(joints.z) * a_weights.z\n           + getJointMatrix(joints.w) * a_weights.w;\n    }\n    void CCSkin (inout vec4 position) {\n      mat4 m = skinMatrix();\n      position = m * position;\n    }\n    void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n      mat4 m = skinMatrix();\n      position = m * position;\n      normal = (m * vec4(normal, 0.0)).xyz;\n      tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n    }\n  #endif\n  void CCVertInput(inout StandardVertInput In)\n  {\n        In.position = vec4(a_position, 1.0);\n        In.normal = a_normal;\n        In.tangent = a_tangent;\n    #if CC_USE_MORPH\n      applyMorph(In.position, In.normal, In.tangent);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(In.position, In.normal, In.tangent);\n    #endif\n  }\n  #if !USE_INSTANCING\n    #if USE_BATCHING\n      uniform highp mat4 cc_matWorlds[10];\n    #else\n      uniform highp mat4 cc_matWorld;\n  uniform highp mat4 cc_matWorldIT;\n    #endif\n  #endif\n  void CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n  {\n    #if USE_INSTANCING\n      matWorld = mat4(\n        vec4(a_matWorld0.xyz, 0.0),\n        vec4(a_matWorld1.xyz, 0.0),\n        vec4(a_matWorld2.xyz, 0.0),\n        vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n      );\n      matWorldIT = matWorld;\n    #elif USE_BATCHING\n      matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n      matWorldIT = matWorld;\n    #else\n      matWorld = cc_matWorld;\n      matWorldIT = cc_matWorldIT;\n    #endif\n  }\n            uniform vec4 tilingOffset;\n  uniform highp mat4 cc_matLightViewProj;\n#if CC_SUPPORT_CASCADED_SHADOW_MAP\n  #endif\n  #if HAS_SECOND_UV || CC_USE_LIGHTMAP\n    attribute vec2 a_texCoord1;\n  #endif\n  varying vec2 v_uv;\n  varying vec2 v_uv1;\n  varying vec4 v_worldPos;\n  varying float v_clip_depth;\n  vec4 vert () {\n    StandardVertInput In;\n    CCVertInput(In);\n    mat4 matWorld, matWorldIT;\n    CCGetWorldMatrixFull(matWorld, matWorldIT);\n    v_worldPos = matWorld * In.position;\n    vec4 clipPos = cc_matLightViewProj * v_worldPos;\n    v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n    #if HAS_SECOND_UV\n      v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n    #endif\n    v_clip_depth = clipPos.z / clipPos.w * 0.5 + 0.5;\n    return clipPos;\n  }\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\n   uniform vec4 albedo;\n   uniform vec4 albedoScaleAndCutoff;\nvec4 packDepthToRGBA (float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 16581375.0) * depth;\n  ret = fract(ret);\n  ret -= vec4(ret.yzw, 0.0) / 255.0;\n  return ret;\n}\nuniform highp mat4 cc_matLightView;\n  uniform mediump vec4 cc_shadowNFLSInfo;\n  uniform mediump vec4 cc_shadowLPNNInfo;\n#if CC_SUPPORT_CASCADED_SHADOW_MAP\n  #endif\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nfloat GetLinearDepthFromViewSpace(vec3 viewPos, float near, float far) {\n  float dist = length(viewPos);\n  return (dist - near) / (far - near);\n}\nfloat CCGetLinearDepth(vec3 worldPos, float viewSpaceBias) {\n\tvec4 viewPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  viewPos.z += viewSpaceBias;\n\treturn GetLinearDepthFromViewSpace(viewPos.xyz, cc_shadowNFLSInfo.x, cc_shadowNFLSInfo.y);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n\treturn CCGetLinearDepth(worldPos, 0.0);\n}\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotShadowMap;\n  #if CC_SUPPORT_CASCADED_SHADOW_MAP\n  #else\n  #endif\n#endif\nvarying vec2 v_uv;\nvarying vec2 v_uv1;\nvarying vec4 v_worldPos;\nvarying float v_clip_depth;\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvec4 frag () {\n  vec4 baseColor = albedo;\n  #if USE_ALBEDO_MAP\n    baseColor *= texture2D(albedoMap, ALBEDO_UV);\n  #endif\n  #if USE_ALPHA_TEST\n    if (baseColor.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  if(cc_shadowLPNNInfo.x > 0.000001 && cc_shadowLPNNInfo.x < 1.999999) {\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      return vec4(CCGetLinearDepth(v_worldPos.xyz), 1.0, 1.0, 1.0);\n    }\n  }\n  if (cc_shadowLPNNInfo.y > 0.000001) {\n    return packDepthToRGBA(v_clip_depth);\n  }\n  return vec4(v_clip_depth, 1.0, 1.0, 1.0);\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCShadow","defines":[]},{"name":"CCCSM","defines":["CC_SUPPORT_CASCADED_SHADOW_MAP"]},{"name":"CCGlobal","defines":["CC_RECEIVE_SHADOW"]},{"name":"CCCamera","defines":["CC_RECEIVE_SHADOW"]}],"samplerTextures":[{"name":"cc_shadowMap","defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_spotShadowMap","defines":["CC_RECEIVE_SHADOW"]}],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","!CC_USE_REAL_TIME_JOINT_TEXTURE"]},{"name":"CCLocalBatched","defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"CCLocal","defines":["!USE_INSTANCING","!USE_BATCHING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"cc_realtimeJoint","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","CC_USE_REAL_TIME_JOINT_TEXTURE"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":144,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":120}},"defines":[{"name":"USE_INSTANCING","type":"boolean"},{"name":"USE_BATCHING","type":"boolean"},{"name":"CC_USE_SKINNING","type":"boolean"},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean"},{"name":"CC_USE_LIGHTMAP","type":"boolean"},{"name":"CC_RECEIVE_SHADOW","type":"boolean"},{"name":"CC_USE_MORPH","type":"boolean"},{"name":"CC_MORPH_TARGET_COUNT","type":"number","range":[2,8]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean"},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean"},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean"},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean"},{"name":"CC_USE_REAL_TIME_JOINT_TEXTURE","type":"boolean"},{"name":"CC_SUPPORT_CASCADED_SHADOW_MAP","type":"boolean"},{"name":"HAS_SECOND_UV","type":"boolean"},{"name":"USE_ALBEDO_MAP","type":"boolean"},{"name":"ALBEDO_UV","type":"string","options":["v_uv","v_uv1"]},{"name":"USE_ALPHA_TEST","type":"boolean"},{"name":"ALPHA_TEST_CHANNEL","type":"string","options":["a","r"]}]}],[{"name":"opaque","passes":[{"program":"../Mat/builtin-standard-carpaint|standard-vs|standard-fs","properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"linear":true,"type":16,"value":[1,1,1,1],"handleInfo":["albedo",0,16]},"albedoScale":{"type":15,"value":[1,1,1],"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"handleInfo":["albedoScaleAndCutoff",3,13]},"occlusion":{"type":13,"value":[1],"handleInfo":["pbrParams",0,13]},"roughness":{"type":13,"value":[0.8],"handleInfo":["pbrParams",1,13]},"metallic":{"type":13,"value":[0.6],"handleInfo":["pbrParams",2,13]},"SpecularIntensity":{"type":13,"value":[0.5],"handleInfo":["pbrParams",3,13]},"emissive":{"linear":true,"type":16,"value":[0,0,0,1]},"emissiveScale":{"type":15,"value":[1,1,1],"handleInfo":["emissiveScaleParam",0,15]},"normalStrenth":{"type":13,"value":[1],"handleInfo":["emissiveScaleParam",3,13]},"mainTexture":{"value":"grey","type":28,"handleInfo":["albedoMap",0,28]},"normalMap":{"value":"normal","type":28},"pbrMap":{"value":"grey","type":28},"metallicRoughnessMap":{"value":"grey","type":28},"occlusionMap":{"value":"white","type":28},"emissiveMap":{"value":"grey","type":28},"secondPaintColor":{"linear":true,"type":16,"value":[1,1,1,1]},"fresnelScale":{"type":13,"value":[1]},"fresnelHard":{"type":13,"value":[1]},"reflEnvMap":{"value":"black","type":31},"reflEnvMapScale":{"type":13,"value":[1]},"reflLightMap":{"value":"black","type":31},"reflScale":{"type":13,"value":[1]},"reflHard":{"type":13,"value":[1]},"reflLightScale":{"type":13,"value":[0.5]},"coatTiling":{"type":16,"value":[1,1,0,0]},"coatNormal":{"value":"grey","type":28},"coatNormalScale":{"type":13,"value":[1]},"flakeTiling":{"type":16,"value":[1,1,0,0]},"flakeMask":{"value":"grey","type":28},"flakeSize":{"type":13,"value":[1]},"flakeDist":{"type":13,"value":[1]},"flakeNormal":{"value":"grey","type":28},"flakeNormalScale":{"type":13,"value":[1]},"albedo":{"type":16,"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"value":[1,1,1,0.5]},"pbrParams":{"type":16,"value":[1,0.8,0.6,0.5]},"emissiveScaleParam":{"type":16,"value":[1,1,1,1]},"albedoMap":{"type":28,"value":"grey"}}},{"phase":"forward-add","propertyIndex":0,"program":"../Mat/builtin-standard-carpaint|standard-vs|standard-fs","embeddedMacros":{"CC_FORWARD_ADD":true},"blendState":{"targets":[{"blend":true,"blendSrc":1,"blendDst":1,"blendSrcAlpha":0,"blendDstAlpha":1}]},"depthStencilState":{"depthFunc":2,"depthTest":true,"depthWrite":false}},{"phase":"shadow-caster","propertyIndex":0,"program":"../Mat/builtin-standard-carpaint|shadow-caster-vs:vert|shadow-caster-fs:frag","rasterizerState":{"cullMode":1},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"type":16,"value":[1,1,1,1],"handleInfo":["albedo",0,16]},"albedoScale":{"type":15,"value":[1,1,1],"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"handleInfo":["albedoScaleAndCutoff",3,13]},"mainTexture":{"value":"grey","type":28,"handleInfo":["albedoMap",0,28]},"albedo":{"type":16,"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"value":[1,1,1,0.5]},"albedoMap":{"type":28,"value":"grey"}}}]},{"name":"transparent","passes":[{"program":"../Mat/builtin-standard-carpaint|standard-vs|standard-fs","embeddedMacros":{"CC_FORCE_FORWARD_SHADING":true},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendDstAlpha":4}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"linear":true,"type":16,"value":[1,1,1,1],"handleInfo":["albedo",0,16]},"albedoScale":{"type":15,"value":[1,1,1],"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"handleInfo":["albedoScaleAndCutoff",3,13]},"occlusion":{"type":13,"value":[1],"handleInfo":["pbrParams",0,13]},"roughness":{"type":13,"value":[0.8],"handleInfo":["pbrParams",1,13]},"metallic":{"type":13,"value":[0.6],"handleInfo":["pbrParams",2,13]},"SpecularIntensity":{"type":13,"value":[0.5],"handleInfo":["pbrParams",3,13]},"emissive":{"linear":true,"type":16,"value":[0,0,0,1]},"emissiveScale":{"type":15,"value":[1,1,1],"handleInfo":["emissiveScaleParam",0,15]},"normalStrenth":{"type":13,"value":[1],"handleInfo":["emissiveScaleParam",3,13]},"mainTexture":{"value":"grey","type":28,"handleInfo":["albedoMap",0,28]},"normalMap":{"value":"normal","type":28},"pbrMap":{"value":"grey","type":28},"metallicRoughnessMap":{"value":"grey","type":28},"occlusionMap":{"value":"white","type":28},"emissiveMap":{"value":"grey","type":28},"secondPaintColor":{"linear":true,"type":16,"value":[1,1,1,1]},"fresnelScale":{"type":13,"value":[1]},"fresnelHard":{"type":13,"value":[1]},"reflEnvMap":{"value":"black","type":31},"reflEnvMapScale":{"type":13,"value":[1]},"reflLightMap":{"value":"black","type":31},"reflScale":{"type":13,"value":[1]},"reflHard":{"type":13,"value":[1]},"reflLightScale":{"type":13,"value":[0.5]},"coatTiling":{"type":16,"value":[1,1,0,0]},"coatNormal":{"value":"grey","type":28},"coatNormalScale":{"type":13,"value":[1]},"flakeTiling":{"type":16,"value":[1,1,0,0]},"flakeMask":{"value":"grey","type":28},"flakeSize":{"type":13,"value":[1]},"flakeDist":{"type":13,"value":[1]},"flakeNormal":{"value":"grey","type":28},"flakeNormalScale":{"type":13,"value":[1]},"albedo":{"type":16,"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"value":[1,1,1,0.5]},"pbrParams":{"type":16,"value":[1,0.8,0.6,0.5]},"emissiveScaleParam":{"type":16,"value":[1,1,1,1]},"albedoMap":{"type":28,"value":"grey"}}},{"phase":"forward-add","propertyIndex":0,"program":"../Mat/builtin-standard-carpaint|standard-vs|standard-fs","embeddedMacros":{"CC_FORWARD_ADD":true},"blendState":{"targets":[{"blend":true,"blendSrc":1,"blendDst":1,"blendSrcAlpha":0,"blendDstAlpha":1}]},"depthStencilState":{"depthFunc":2,"depthTest":true,"depthWrite":false}},{"phase":"shadow-caster","propertyIndex":0,"program":"../Mat/builtin-standard-carpaint|shadow-caster-vs:vert|shadow-caster-fs:frag","rasterizerState":{"cullMode":1},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"type":16,"value":[1,1,1,1],"handleInfo":["albedo",0,16]},"albedoScale":{"type":15,"value":[1,1,1],"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"handleInfo":["albedoScaleAndCutoff",3,13]},"mainTexture":{"value":"grey","type":28,"handleInfo":["albedoMap",0,28]},"albedo":{"type":16,"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"value":[1,1,1,0.5]},"albedoMap":{"type":28,"value":"grey"}}}]}]]],0,0,[],[],[]],[[[6,".bin",4006590425,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1120,"length":120,"count":30,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1120,"count":20,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.515754222869873,-0.017160415649414062,-0.3343636989593506],"maxPosition",8,[1,0.5157544612884521,0.017160654067993164,0.3343638777732849]]],-1],0,0,[],[],[]],[[[15,"Sphere_Carpaint",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{},{},{}],[[[{"roughness":0.3,"metallic":0.75,"SpecularIntensity":1,"fresnelHard":5,"reflEnvMapScale":0.1,"reflScale":0.6,"reflHard":4,"reflLightScale":0.2,"coatNormalScale":0.75,"flakeSize":10,"flakeDist":10},"coatTiling",8,[2,4,2,0,0],"flakeTiling",8,[2,2,1,0,0],"reflEnvMap",6,0,"reflLightMap",6,1,"coatNormal",6,2,"flakeMask",6,3,"flakeNormal",6,4],{},{}],11,0,0]]],0,0,[0,0,0,0,0,0],[27,28,29,30,31,5],[28,28,50,51,52,53]],[[[32,"Branch","1",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{},{},{}],[[[{},"mainColor",8,[4,4278201437]],{},{}],11,0,0]]],0,0,[0],[5],[1]],[[[6,".bin",907581302,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":88704,"length":25920,"count":6480,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":88704,"count":1232,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,1,2,3,4,5]]},"minPosition",8,[1,-0.12377478927373886,-0.0017698599258437753,-0.11742706596851349],"maxPosition",8,[1,0.12377475947141647,0.09215620160102844,0.10472553968429565]]],-1],0,0,[],[],[]],[[[6,".bin",1878358278,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":53856,"length":9408,"count":2352,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":53856,"count":748,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,1,2,3,4,5]]},"minPosition",8,[1,-0.1694241762161255,0.5560775995254517,-0.14092068374156952],"maxPosition",8,[1,0.16942420601844788,0.8913772106170654,0.08972514420747757]]],-1],0,0,[],[],[]],[[[26,"Skin-4",3746706147,["mixamorig:Hips/mixamorig:Spine","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:Neck","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:Neck/mixamorig:Head","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm"],[[[7,-1,-1.280292549706141e-16,1.1663962644535916e-16,0,1.2246468525851679e-16,-0.04650169983506203,0.9989364743232727,0,-1.2246468525851679e-16,0.9989364743232727,0.04650169983506203,0,-1.0653190287643479e-16,0.06301210820674896,-0.8442105650901794,1],[7,-1,-1.280292549706141e-16,1.1663962644535916e-16,0,1.2246468525851679e-16,-0.04650169983506203,0.9989364743232727,0,-1.2246468525851679e-16,0.9989364743232727,0.04650169983506203,0,-1.1829904339836914e-16,0.06300763040781021,-0.9451037645339966,1],[7,-1,1.2246468525851679e-16,1.2246468525851679e-16,0,1.2246468525851679e-16,-1.2246468525851679e-16,1,0,1.2246468525851679e-16,1,1.2246468525851679e-16,0,-1.450180227401262e-16,0.007588000036776066,-1.1917500495910645,1],[7,-1,-1.2246468525851679e-16,1.2246468525851679e-16,0,1.2246468525851679e-16,-1.2246468525851679e-16,1,0,-1.2246468525851679e-16,1,1.2246468525851679e-16,0,-1.5582442937652716e-16,-0.00939400028437376,-1.2817970514297485,1],[7,-1,-1.280292549706141e-16,1.1663962644535916e-16,0,1.2246468525851679e-16,-0.04650169983506203,0.9989364743232727,0,-1.2246468525851679e-16,0.9989364743232727,0.04650169983506203,0,-1.3174738550192567e-16,0.06300340592861176,-1.060410737991333,1],[7,-0.016999104991555214,0.33038225769996643,-0.943699300289154,0,0.04649754986166954,-0.942590057849884,-0.33080580830574036,0,-0.9987473487854004,-0.04950634390115738,0.0006612123688682914,0,-0.06299106031656265,1.1228939294815063,0.34556353092193604,1],[7,0.031100217252969742,0.07478547096252441,-0.9967293739318848,0,0.06340043991804123,-0.9953734874725342,-0.07270211726427078,0,-0.9975069761276245,-0.0609331838786602,-0.035696841776371,0,-0.07567739486694336,1.1478880643844604,-0.054658934473991394,1],[7,-0.0156998410820961,-0.33052530884742737,0.9436389803886414,0,-0.046499527990818024,-0.9425482749938965,-0.33087804913520813,0,0.9987898468971252,-0.0490766316652298,-0.0005713825230486691,0,0.06299297511577606,1.1228516101837158,0.3456418812274933,1],[7,0.031002366915345192,-0.07475702464580536,0.9967412948608398,0,-0.06290480494499207,-0.99533611536026,-0.07270318269729614,0,0.9975761771202087,-0.06044027581810951,-0.035560913383960724,0,0.07529931515455246,1.1478346586227417,-0.05466456338763237,1]],8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[26,"Skin-0",4021967966,["mixamorig:Hips","mixamorig:Hips/mixamorig:Spine","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandIndex1/mixamorig:LeftHandIndex2/mixamorig:LeftHandIndex3","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandMiddle1","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandMiddle1/mixamorig:LeftHandMiddle2","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandMiddle1/mixamorig:LeftHandMiddle2/mixamorig:LeftHandMiddle3","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandPinky1","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandPinky1/mixamorig:LeftHandPinky2","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandPinky1/mixamorig:LeftHandPinky2/mixamorig:LeftHandPinky3","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandRing1","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandRing1/mixamorig:LeftHandRing2","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandRing1/mixamorig:LeftHandRing2/mixamorig:LeftHandRing3","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandThumb1","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandThumb1/mixamorig:LeftHandThumb2","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandThumb1/mixamorig:LeftHandThumb2/mixamorig:LeftHandThumb3","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:Neck","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:Neck/mixamorig:Head","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandIndex1","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandIndex1/mixamorig:RightHandIndex2","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandIndex1/mixamorig:RightHandIndex2/mixamorig:RightHandIndex3","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandMiddle1","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandMiddle1/mixamorig:RightHandMiddle2","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandMiddle1/mixamorig:RightHandMiddle2/mixamorig:RightHandMiddle3","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandPinky1","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandPinky1/mixamorig:RightHandPinky2","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandPinky1/mixamorig:RightHandPinky2/mixamorig:RightHandPinky3","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandRing1","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandRing1/mixamorig:RightHandRing2","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandRing1/mixamorig:RightHandRing2/mixamorig:RightHandRing3","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandThumb1","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandThumb1/mixamorig:RightHandThumb2","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandThumb1/mixamorig:RightHandThumb2/mixamorig:RightHandThumb3","mixamorig:Hips/mixamorig:LeftUpLeg","mixamorig:Hips/mixamorig:LeftUpLeg/mixamorig:LeftLeg","mixamorig:Hips/mixamorig:LeftUpLeg/mixamorig:LeftLeg/mixamorig:LeftFoot","mixamorig:Hips/mixamorig:LeftUpLeg/mixamorig:LeftLeg/mixamorig:LeftFoot/mixamorig:LeftToeBase","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm","mixamorig:Hips/mixamorig:RightUpLeg","mixamorig:Hips/mixamorig:RightUpLeg/mixamorig:RightLeg","mixamorig:Hips/mixamorig:RightUpLeg/mixamorig:RightLeg/mixamorig:RightFoot","mixamorig:Hips/mixamorig:RightUpLeg/mixamorig:RightLeg/mixamorig:RightFoot/mixamorig:RightToeBase","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandIndex1","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandIndex1/mixamorig:LeftHandIndex2"],[[[7,-1,-1.2246468525851679e-16,1.2246468525851679e-16,0,1.2246468525851679e-16,-1.2246468525851679e-16,1,0,-1.2246468525851679e-16,1,1.2246468525851679e-16,0,-9.64457124732164e-17,0.02771100029349327,-0.7598279714584351,1],[7,-1,-1.280292549706141e-16,1.1663962644535916e-16,0,1.2246468525851679e-16,-0.04650169983506203,0.9989364743232727,0,-1.2246468525851679e-16,0.9989364743232727,0.04650169983506203,0,-1.0653190287643479e-16,0.06301210820674896,-0.8442105650901794,1],[7,-0.29262807965278625,0.016116168349981308,0.9560934901237488,0,0.1077103316783905,-0.9929816126823425,0.04969976842403412,0,0.9501911401748657,0.1175241693854332,0.2888120114803314,0,-0.008851292543113232,1.1209585666656494,-0.7818940877914429,1],[7,-0.22431005537509918,0.07095259428024292,0.9719505906105042,0,0.11320507526397705,-0.9886946678161621,0.09830359369516373,0,0.9679434299468994,0.1320744901895523,0.21374166011810303,0,-0.04056498408317566,1.0776605606079102,-0.7832611203193665,1],[7,-0.22431005537509918,0.06996770203113556,0.9720017313957214,0,0.11320507526397705,-0.9887847304344177,0.09730030596256256,0,0.9679434299468994,0.1318567842245102,0.2138708531856537,0,-0.04059552401304245,1.0784757137298584,-0.8145543336868286,1],[7,-0.22430498898029327,-0.05459023267030716,0.9729669690132141,0,0.11330251395702362,-0.9931386709213257,-0.029598653316497803,0,0.9679214954376221,0.10360370576381683,0.22893895208835602,0,-0.04073318466544151,1.1774768829345703,-0.7006113529205322,1],[7,-0.07849761843681335,0.08563326299190521,0.9932583570480347,0,0.12309626489877701,-0.9877989888191223,0.09490497410297394,0,0.9892699718475342,0.12970814108848572,0.06700493395328522,0,-0.11012910306453705,1.066914439201355,-0.7832725048065186,1],[7,-0.07849954813718796,0.048250168561935425,0.9957870244979858,0,0.12299929559230804,-0.9907581210136414,0.0577046163380146,0,0.9892943501472473,0.12700989842414856,0.071840301156044,0,-0.11002396047115326,1.0968623161315918,-0.7735450267791748,1],[7,-0.07849761843681335,0.09146490693092346,0.9927144646644592,0,0.12309626489877701,-0.9872426986694336,0.1007012128829956,0,0.9892699718475342,0.13010166585445404,0.06624054163694382,0,-0.11012551933526993,1.0610625743865967,-0.8450813293457031,1],[7,-1,-1.280292549706141e-16,1.1663962644535916e-16,0,1.2246468525851679e-16,-0.04650169983506203,0.9989364743232727,0,-1.2246468525851679e-16,0.9989364743232727,0.04650169983506203,0,-1.1829904339836914e-16,0.06300763040781021,-0.9451037645339966,1],[7,-0.15189364552497864,0.062363024801015854,0.9864453077316284,0,0.11839504539966583,-0.9896402359008789,0.0808035284280777,0,0.9812589287757874,0.12905976176261902,0.1429470181465149,0,-0.07594315707683563,1.0846822261810303,-0.7697555422782898,1],[7,-0.15189003944396973,0.048396989703178406,0.9872144460678101,0,0.1184922307729721,-0.9907132387161255,0.06680024415254593,0,0.981235682964325,0.12712831795215607,0.14474885165691376,0,-0.07606542855501175,1.0959279537200928,-0.7849109172821045,1],[7,-0.15189003944396973,0.004668589681386948,0.9883613586425781,0,0.1184922307729721,-0.9926806092262268,0.022898882627487183,0,0.981235682964325,0.1205969750881195,0.15022782981395721,0,-0.07607167959213257,1.1308870315551758,-0.7654871344566345,1],[7,-0.975727379322052,-0.003679517423734069,0.21880334615707397,0,-0.01909857802093029,-0.9946230053901672,-0.10190669447183609,0,0.21798376739025116,-0.10361362993717194,0.9704673886299133,0,0.593407928943634,1.137955665588379,-0.07494215667247772,1],[7,-0.975727379322052,-0.04247406870126724,0.21466650068759918,0,-0.01909857802093029,-0.9607123732566833,-0.2769041061401367,0,0.21798376739025116,-0.2742926776409149,0.936617910861969,0,0.6008114218711853,1.1378906965255737,0.10216064751148224,1],[7,-0.975727379322052,-0.04153498262166977,0.21484732627868652,0,-0.01909857802093029,-0.9619187712669373,-0.27269598841667175,0,0.21798376739025116,-0.2701948881149292,0.9377960562705994,0,0.5954883694648743,1.1382033824920654,0.0682426318526268,1],[7,-1,1.2246468525851679e-16,1.2246468525851679e-16,0,1.2246468525851679e-16,-1.2246468525851679e-16,1,0,1.2246468525851679e-16,1,1.2246468525851679e-16,0,-1.450180227401262e-16,0.007588000036776066,-1.1917500495910645,1],[7,-1,-1.2246468525851679e-16,1.2246468525851679e-16,0,1.2246468525851679e-16,-1.2246468525851679e-16,1,0,-1.2246468525851679e-16,1,1.2246468525851679e-16,0,-1.5582442937652716e-16,-0.00939400028437376,-1.2817970514297485,1],[7,-1,-1.280292549706141e-16,1.1663962644535916e-16,0,1.2246468525851679e-16,-0.04650169983506203,0.9989364743232727,0,-1.2246468525851679e-16,0.9989364743232727,0.04650169983506203,0,-1.3174738550192567e-16,0.06300340592861176,-1.060410737991333,1],[7,-0.016999104991555214,0.33038225769996643,-0.943699300289154,0,0.04649754986166954,-0.942590057849884,-0.33080580830574036,0,-0.9987473487854004,-0.04950634390115738,0.0006612123688682914,0,-0.06299106031656265,1.1228939294815063,0.34556353092193604,1],[7,0.031100217252969742,0.07478547096252441,-0.9967293739318848,0,0.06340043991804123,-0.9953734874725342,-0.07270211726427078,0,-0.9975069761276245,-0.0609331838786602,-0.035696841776371,0,-0.07567739486694336,1.1478880643844604,-0.054658934473991394,1],[7,-0.18451838195323944,-0.05100957676768303,-0.9815107583999634,0,0.04610459506511688,-0.9980040192604065,0.04320041462779045,0,-0.9817978143692017,-0.0372789241373539,0.18649309873580933,0,-0.13027706742286682,1.107829213142395,-0.38442784547805786,1],[7,-0.25842294096946716,-0.045064426958560944,-0.9649695158004761,0,-0.09610853344202042,-0.9927090406417847,0.0720982626080513,0,-0.9612853527069092,0.11136494576931,0.2522050440311432,0,-0.012067683041095734,1.1007400751113892,-0.6526650786399841,1],[7,-0.3313745856285095,-0.038493018597364426,-0.9427134394645691,0,-0.09029307216405869,-0.9932721853256226,0.07230078428983688,0,-0.9391279816627502,0.1090812012553215,0.32568833231925964,0,-0.040218889713287354,1.106274962425232,-0.7484861016273499,1],[7,-0.3313745856285095,-0.04133731126785278,-0.9425652027130127,0,-0.09029307216405869,-0.9930269122123718,0.07529636472463608,0,-0.9391279816627502,0.11006123572587967,0.32534798979759216,0,-0.040216490626335144,1.1039055585861206,-0.7787784934043884,1],[7,-0.3313745856285095,-0.0410550981760025,-0.942598819732666,0,-0.09029307216405869,-0.9930726885795593,0.07499971240758896,0,-0.9391279816627502,0.10996606200933456,0.3253883719444275,0,-0.040218107402324677,1.104172706604004,-0.8055528998374939,1],[7,-0.19829443097114563,-0.07019919902086258,-0.9776511788368225,0,-0.10039718449115753,-0.9907603859901428,0.0915050134062767,0,-0.974972665309906,0.11630035191774368,0.1894165426492691,0,0.046264078468084335,1.0809627771377563,-0.7817811965942383,1],[7,-0.0156998410820961,-0.33052530884742737,0.9436389803886414,0,-0.046499527990818024,-0.9425482749938965,-0.33087804913520813,0,0.9987898468971252,-0.0490766316652298,-0.0005713825230486691,0,0.06299297511577606,1.1228516101837158,0.3456418812274933,1],[7,-0.19829443097114563,-0.11056963354349136,-0.9738783240318298,0,-0.10039718449115753,-0.9860979318618774,0.13239802420139313,0,-0.974972665309906,0.1240309625864029,0.18443825840950012,0,0.04627872630953789,1.0463787317276,-0.857010543346405,1],[7,-0.19829842448234558,0.161312535405159,-0.9667563438415527,0,-0.10029920190572739,-0.9845503568649292,-0.1436941772699356,0,-0.9749922156333923,0.06847397238016129,0.2114054411649704,0,0.04622303694486618,1.2498196363449097,-0.5650250911712646,1],[7,-0.05510387197136879,-0.054043445736169815,-0.9970337152481079,0,-0.10880764573812485,-0.9922258853912354,0.05980199575424194,0,-0.9925698041915894,0.11177024990320206,0.048796068876981735,0,0.11027626693248749,1.0944371223449707,-0.7418761849403381,1],[7,-0.05510387197136879,-0.06841590255498886,-0.9961669445037842,0,-0.10880764573812485,-0.9912921786308289,0.07410509884357452,0,-0.9925698041915894,0.11246579885482788,0.047180015593767166,0,0.11026839166879654,1.0831962823867798,-0.7896541953086853,1],[7,-0.05510387197136879,-0.12520502507686615,-0.9905996322631836,0,-0.10880764573812485,-0.9854894876480103,0.13060036301612854,0,-0.9925698041915894,0.11498242616653442,0.04067780449986458,0,0.11026619374752045,1.0349160432815552,-0.8757746815681458,1],[7,-0.17420807480812073,-0.08766008168458939,-0.9808107018470764,0,-0.1019047275185585,-0.989051103591919,0.10650268197059631,0,-0.9794454574584961,0.11849571019411087,0.1633700281381607,0,0.04135267809033394,1.0660719871520996,-0.7975309491157532,1],[7,-0.1742045283317566,-0.06861356645822525,-0.9823374152183533,0,-0.10200265049934387,-0.9909926652908325,0.08730362355709076,0,-0.9794254899024963,0.11541120707988739,0.16563019156455994,0,0.041478224098682404,1.0819754600524902,-0.8058687448501587,1],[7,-0.1742045283317566,0.09638863056898117,-0.9799759387969971,0,-0.10200265049934387,-0.9916220903396606,-0.07939907908439636,0,-0.9794254899024963,0.08612880110740662,0.18257148563861847,0,0.04149743542075157,1.206304669380188,-0.6433278322219849,1],[7,0.031002366915345192,-0.07475702464580536,0.9967412948608398,0,-0.06290480494499207,-0.99533611536026,-0.07270318269729614,0,0.9975761771202087,-0.06044027581810951,-0.035560913383960724,0,0.07529931515455246,1.1478346586227417,-0.05466456338763237,1],[7,-0.9752627015113831,-0.002817666158080101,-0.22094395756721497,0,0.019599249586462975,-0.9970616698265076,-0.07379673421382904,0,-0.2200915813446045,-0.07630322128534317,0.9724680781364441,0,-0.5940971374511719,1.136047601699829,-0.10774732381105423,1],[7,-0.9752588272094727,0.05218348652124405,-0.21472027897834778,0,0.01969916932284832,-0.9473367929458618,-0.3196834921836853,0,-0.22009071707725525,-0.31602492928504944,0.9228483438491821,0,-0.6018683314323425,1.1337302923202515,0.1526176929473877,1],[7,-0.9752627015113831,0.018613498657941818,-0.2201833873987198,0,0.019599249586462975,-0.9852646589279175,-0.1701027750968933,0,-0.2200915813446045,-0.17021776735782623,0.9605217576026917,0,-0.5958089232444763,1.1392191648483276,-0.052975453436374664,1],[7,0.9999673962593079,-0.000001380000412609661,-0.005707732401788235,0,-0.005699814297258854,-0.052800536155700684,-0.9985777139663696,0,-0.00029999023536220193,0.9986101984977722,-0.05279882624745369,0,-0.07272844761610031,0.06504689157009125,0.7098038196563721,1],[7,0.9999822974205017,0.000024978389774332754,0.004204475786536932,0,0.004199925810098648,-0.05349656194448471,-0.9985182285308838,0,0.00019999645883217454,0.9985358715057373,-0.05349572375416756,0,-0.07636744529008865,0.06528718024492264,0.3647750914096832,1],[7,0.9999433159828186,-0.006881120149046183,-0.0030554099939763546,0,0.0037997846957296133,0.8115822672843933,-0.5842097997665405,0,0.006499631330370903,0.5841703414916992,0.8116011023521423,0,-0.07595355063676834,-0.031549274921417236,0.09836725890636444,1],[7,0.9996873736381531,-0.019377559423446655,-0.018358144909143448,0,0.019801730290055275,0.9995679259300232,0.02319825068116188,0,0.01790156401693821,-0.023555180057883263,0.9995238184928894,0,-0.0765703022480011,-0.007160189561545849,-0.04035715386271477,1],[7,-0.18759672343730927,0.05091680958867073,0.9809583425521851,0,-0.045499205589294434,-0.998070478439331,0.04310280457139015,0,0.981182873249054,-0.036547303199768066,0.18955256044864655,0,0.1307898759841919,1.107941746711731,-0.384054958820343,1],[7,0.9999673962593079,-0.00002604247310955543,0.005707914009690285,0,0.005699814297258854,-0.04800453782081604,-0.9988619685173035,0,0.00029999023536220193,0.998894453048706,-0.048002827912569046,0,0.07272861897945404,0.06221103295683861,0.710110604763031,1],[7,0.9999822974205017,-0.00005235982098383829,-0.004204351920634508,0,-0.004199925810098648,-0.05999980494379997,-0.9981791377067566,0,-0.00019999645883217454,0.9981967806816101,-0.05999896302819252,0,0.07636765390634537,0.06660325825214386,0.36441701650619507,1],[7,0.9999451041221619,0.006818253546953201,0.002899297745898366,0,-0.0038997859228402376,0.817065954208374,-0.5764977931976318,0,-0.006299654021859169,0.5764597654342651,0.8170855641365051,0,0.07596912235021591,-0.03201562911272049,0.09870595484972,1],[7,0.9996673464775085,0.019876979291439056,0.01836974546313286,0,-0.020301366224884987,0.9995481371879578,0.023198245093226433,0,-0.017901206389069557,-0.02356412447988987,0.9995235800743103,0,0.07659643143415451,-0.0070917499251663685,-0.04163265973329544,1],[7,-0.25050437450408936,0.04781312867999077,0.9669592380523682,0,0.1112019345164299,-0.990699052810669,0.07780370861291885,0,0.9617167711257935,0.12700730562210083,0.24287357926368713,0,-0.010346993803977966,1.0962934494018555,-0.6601890921592712,1],[7,-0.29262807965278625,-0.011602697893977165,0.9561231136322021,0,0.1077103316783905,-0.9939267039299011,0.020898370072245598,0,0.9501911401748657,0.10909479111433029,0.2920859456062317,0,-0.008855154737830162,1.142307996749878,-0.6908858418464661,1],[7,-0.29262807965278625,0.014480149373412132,0.956143856048584,0,0.1077103316783905,-0.9930490851402283,0.04800218343734741,0,0.9501911401748657,0.11702797561883926,0.28901994228363037,0,-0.008843586780130863,1.1222760677337646,-0.7523563504219055,1]],8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[26,"Skin-2",1731037026,["mixamorig:Hips","mixamorig:Hips/mixamorig:Spine","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2","mixamorig:Hips/mixamorig:LeftUpLeg","mixamorig:Hips/mixamorig:RightUpLeg"],[[[7,-1,-1.2246468525851679e-16,1.2246468525851679e-16,0,1.2246468525851679e-16,-1.2246468525851679e-16,1,0,-1.2246468525851679e-16,1,1.2246468525851679e-16,0,-9.64457124732164e-17,0.02771100029349327,-0.7598279714584351,1],[7,-1,-1.280292549706141e-16,1.1663962644535916e-16,0,1.2246468525851679e-16,-0.04650169983506203,0.9989364743232727,0,-1.2246468525851679e-16,0.9989364743232727,0.04650169983506203,0,-1.0653190287643479e-16,0.06301210820674896,-0.8442105650901794,1],[7,-1,-1.280292549706141e-16,1.1663962644535916e-16,0,1.2246468525851679e-16,-0.04650169983506203,0.9989364743232727,0,-1.2246468525851679e-16,0.9989364743232727,0.04650169983506203,0,-1.1829904339836914e-16,0.06300763040781021,-0.9451037645339966,1],[7,-1,-1.280292549706141e-16,1.1663962644535916e-16,0,1.2246468525851679e-16,-0.04650169983506203,0.9989364743232727,0,-1.2246468525851679e-16,0.9989364743232727,0.04650169983506203,0,-1.3174738550192567e-16,0.06300340592861176,-1.060410737991333,1],[7,0.9999673962593079,-0.000001380000412609661,-0.005707732401788235,0,-0.005699814297258854,-0.052800536155700684,-0.9985777139663696,0,-0.00029999023536220193,0.9986101984977722,-0.05279882624745369,0,-0.07272844761610031,0.06504689157009125,0.7098038196563721,1],[7,0.9999673962593079,-0.00002604247310955543,0.005707914009690285,0,0.005699814297258854,-0.04800453782081604,-0.9988619685173035,0,0.00029999023536220193,0.998894453048706,-0.048002827912569046,0,0.07272861897945404,0.06221103295683861,0.710110604763031,1]],8,8,8,8,8,8]]],0,0,[],[],[]],[[[26,"Skin-3",1422313697,["mixamorig:Hips/mixamorig:LeftUpLeg/mixamorig:LeftLeg","mixamorig:Hips/mixamorig:LeftUpLeg/mixamorig:LeftLeg/mixamorig:LeftFoot","mixamorig:Hips/mixamorig:LeftUpLeg/mixamorig:LeftLeg/mixamorig:LeftFoot/mixamorig:LeftToeBase","mixamorig:Hips/mixamorig:RightUpLeg/mixamorig:RightLeg","mixamorig:Hips/mixamorig:RightUpLeg/mixamorig:RightLeg/mixamorig:RightFoot","mixamorig:Hips/mixamorig:RightUpLeg/mixamorig:RightLeg/mixamorig:RightFoot/mixamorig:RightToeBase"],[[[7,0.9999822974205017,0.000024978389774332754,0.004204475786536932,0,0.004199925810098648,-0.05349656194448471,-0.9985182285308838,0,0.00019999645883217454,0.9985358715057373,-0.05349572375416756,0,-0.07636744529008865,0.06528718024492264,0.3647750914096832,1],[7,0.9999433159828186,-0.006881120149046183,-0.0030554099939763546,0,0.0037997846957296133,0.8115822672843933,-0.5842097997665405,0,0.006499631330370903,0.5841703414916992,0.8116011023521423,0,-0.07595355063676834,-0.031549274921417236,0.09836725890636444,1],[7,0.9996873736381531,-0.019377559423446655,-0.018358144909143448,0,0.019801730290055275,0.9995679259300232,0.02319825068116188,0,0.01790156401693821,-0.023555180057883263,0.9995238184928894,0,-0.0765703022480011,-0.007160189561545849,-0.04035715386271477,1],[7,0.9999822974205017,-0.00005235982098383829,-0.004204351920634508,0,-0.004199925810098648,-0.05999980494379997,-0.9981791377067566,0,-0.00019999645883217454,0.9981967806816101,-0.05999896302819252,0,0.07636765390634537,0.06660325825214386,0.36441701650619507,1],[7,0.9999451041221619,0.006818253546953201,0.002899297745898366,0,-0.0038997859228402376,0.817065954208374,-0.5764977931976318,0,-0.006299654021859169,0.5764597654342651,0.8170855641365051,0,0.07596912235021591,-0.03201562911272049,0.09870595484972,1],[7,0.9996673464775085,0.019876979291439056,0.01836974546313286,0,-0.020301366224884987,0.9995481371879578,0.023198245093226433,0,-0.017901206389069557,-0.02356412447988987,0.9995235800743103,0,0.07659643143415451,-0.0070917499251663685,-0.04163265973329544,1]],8,8,8,8,8,8]]],0,0,[],[],[]],[[[6,".bin",2534740403,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":23976,"length":4224,"count":1056,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":23976,"count":333,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,1,2,3,4,5,6,7,8]]},"minPosition",8,[1,-0.13596363365650177,0.9665579199790955,-0.10093631595373154],"maxPosition",8,[1,0.13596363365650177,1.2388875484466553,0.12003957480192184]]],-1],0,0,[],[],[]],[[[6,".bin",1363247021,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":45576,"length":13224,"count":3306,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":45576,"count":633,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,1]]},"minPosition",8,[1,-0.19592884182929993,1.3615026473999023,-0.12475789338350296],"maxPosition",8,[1,0.19592887163162231,1.6603072881698608,0.14993886649608612]]],-1],0,0,[],[],[]],[[[26,"Skin-1",1432228555,["mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:Neck","mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:Neck/mixamorig:Head"],[[[7,-1,1.2246468525851679e-16,1.2246468525851679e-16,0,1.2246468525851679e-16,-1.2246468525851679e-16,1,0,1.2246468525851679e-16,1,1.2246468525851679e-16,0,-1.450180227401262e-16,0.007588000036776066,-1.1917500495910645,1],[7,-1,-1.2246468525851679e-16,1.2246468525851679e-16,0,1.2246468525851679e-16,-1.2246468525851679e-16,1,0,-1.2246468525851679e-16,1,1.2246468525851679e-16,0,-1.5582442937652716e-16,-0.00939400028437376,-1.2817970514297485,1]],8,8]]],0,0,[],[],[]],[[[6,".bin",652674295,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":79272,"length":12348,"count":6174,"stride":2}},{"primitiveMode":7,"jointMapIndex":1,"vertexBundelIndices":[1],"indexView":{"offset":191628,"length":15336,"count":7668,"stride":2}},{"primitiveMode":7,"jointMapIndex":2,"vertexBundelIndices":[2],"indexView":{"offset":218412,"length":1500,"count":750,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":79272,"count":1101,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]},{"view":{"offset":91620,"length":100008,"count":1389,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]},{"view":{"offset":206964,"length":11448,"count":159,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,27,36,40,41,42,43,44,45,49,50,51],[0,1,9,16,17,18,19,20,21,22,23,24,25,26,28,29,30,31,32,33,34,35,37,38,39,40,45,46,47,48],[0,1,3,4,5,9,18,26,28,29,41,42,43,46,47,48]]},"minPosition",8,[1,-0.7651631832122803,0.0014003500109538436,-0.13749271631240845],"maxPosition",8,[1,0.7651631832122803,1.587031602859497,0.17290210723876953]]],-1],0,0,[],[],[]],[[[53,"Cusultant",".mp3",13.191837],-1],0,0,[],[],[]],[[[32,"Glass","1",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{},{},{}],[[[{},"mainColor",8,[4,2384151401]],{},{}],11,0,0]]],0,0,[0],[5],[1]],[[[15,"car_internal_mat",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_ALBEDO_MAP":true},{},{}],[[[{},"mainTexture",6,0],{},{}],11,0,0]]],0,0,[0,0],[8,5],[336,1]],[[{"base":"2,2,0,0,2,0","rgbe":true,"mipmaps":[{"front":"bea22cae-05c3-4b01-a21d-b5000428fb3d@b47c0@e9a6d","back":"bea22cae-05c3-4b01-a21d-b5000428fb3d@b47c0@40c10","left":"bea22cae-05c3-4b01-a21d-b5000428fb3d@b47c0@8fd34","right":"bea22cae-05c3-4b01-a21d-b5000428fb3d@b47c0@74afd","top":"bea22cae-05c3-4b01-a21d-b5000428fb3d@b47c0@bb97f","bottom":"bea22cae-05c3-4b01-a21d-b5000428fb3d@b47c0@7d38f"}]}],[17],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[1],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[1],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[1],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[1],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[1],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[1],0,[],[],[]],[[[199,1,0.1,0.1]],0,0,[],[],[]],[[[15,"SUV_Carpaint-Red",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_ALBEDO_MAP":true},{},{}],[[[{"roughness":0.3,"metallic":0.75,"SpecularIntensity":1,"fresnelHard":5,"reflEnvMapScale":0.1,"reflScale":0.6,"reflHard":4,"reflLightScale":0.2,"coatNormalScale":0.75,"flakeSize":10,"flakeDist":10},"mainColor",8,[4,4289232420],"secondPaintColor",8,[4,4289232420],"coatTiling",8,[2,4,2,0,0],"flakeTiling",8,[2,2,1,0,0],"mainTexture",6,0,"reflEnvMap",6,1,"reflLightMap",6,2,"coatNormal",6,3,"flakeMask",6,4,"flakeNormal",6,5],{},{}],11,0,0]]],0,0,[0,0,0,0,0,0,0],[8,27,28,29,30,31,5],[54,28,28,50,51,52,53]],[[{"name":"close","rect":{"x":18,"y":15,"width":410,"height":390},"offset":{"x":-20.5,"y":12.5},"originalSize":{"width":487,"height":445},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-205,-195,0,205,-195,0,-205,195,0,205,195,0],"indexes":[0,1,2,2,1,3],"uv":[18,430,428,430,18,40,428,40],"nuv":[0.03696098562628337,0.0898876404494382,0.8788501026694046,0.0898876404494382,0.03696098562628337,0.9662921348314607,0.8788501026694046,0.9662921348314607],"minPos":{"x":-205,"y":-195,"z":0},"maxPos":{"x":205,"y":195,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[2],0,[0],[15],[337]],[[[15,"LightAlbedo",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_NORMAL_MAP":true,"USE_ALBEDO_MAP":true,"USE_METALLIC_ROUGHNESS_MAP":true},{},{}],[[[{"roughness":0.507,"metallic":0.989,"specularIntensity":0.622},"mainTexture",6,0,"normalMap",6,1,"metallicRoughnessMap",6,2,"occlusionMap",6,3],{},{}],11,0,0]]],0,0,[0,0,0,0,0],[8,14,17,22,5],[338,339,340,341,1]],[[[15,"Chrome",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{},{},{}],[[[{"roughness":0.472,"metallic":1,"specularIntensity":1},"mainColor",8,[4,4290098613],"emissive",8,[4,4287006346]],{},{}],11,0,0]]],0,0,[0],[5],[1]],[[[6,".bin",2025511328,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":72688,"length":11880,"count":2970,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":105904,"length":4488,"count":1122,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[2],"indexView":{"offset":154464,"length":8880,"count":2220,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":72688,"count":1298,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]},{"view":{"offset":84568,"length":21336,"count":381,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]},{"view":{"offset":110392,"length":44072,"count":787,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.7742841839790344,-1.418808102607727,-8.940696716308594e-8],"maxPosition",8,[1,0.7742842435836792,1.418808102607727,0.8722562789916992]]],-1],0,0,[],[],[]],[[[15,"Default_Material",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":0}],[[[{"transparencyFactor":0,"albedoScale":1},"mainColor",8,[4,4294967295],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[5],[10]],[[[34],[38,"Table_02",[-2],[0,"37yqt8h/9ed5B9SL01MGnw",-1,0]],[23,"Table_01",1,[[4,-3,[1,"5cdUDAwgZRypXqcN8zjPxm"],[0,1,2],[3],3]],[0,"23+eXbIoNVc5Dwg5KiRjlo",1,0],[3,-0.44563521548866786,0.5490075179051453,0.5490075179051453,0.44563521548866786],[1,-89.99999999999999,101.8667920617666,0]]],0,[0,7,1,0,-1,2,0,0,2,0,12,1,3],[0,0,0,0],[-1,-2,-3,1],[60,60,60,342]],[[[35,"Counsellor_Terry"],[51,"Counsellor_Terry",[-6,-7,-8,-9,-10,-11,-12],[[79,true,-2,[1,"674sTBPE5UM7fkObMCzKlN"],[[null,18,19,null],0,6,6,0]],[80,true,-3,[1,"856IBSBxhPe7+Rk8McLVDF"],[1,0,0,1.5],[1,0.5,1,0.5],20],[82,-4,[1,"ec0+27YhBCbIS09dRVpYi+"],21],[163,false,-5,[1,"46Qz1WUfdOl7MSAHHb63Wj"],22]],[0,"bap47oI4BSfJ5H3d8qViCd",-1,0],[1,221,0,-60],[3,0,1,0,6.123233995736766e-17],[1,2.9999999999999996,3,2.9999999999999996],[1,0,180,0]],[30,"mixamorig:RightHand",[-13,-14,-15,-16,-17],[0,"1a9q6kmvxRKZoMKSKgUDoD",1,0],[1,0.000007111990726116346,-0.000014006089259055443,0.2400234192609787],[3,0.015950409678256977,-0.03536230694403726,0.05519348749510116,0.9977217901884371],[1,1.0000392198562622,1.0000402927398682,1.0000531673431396],[1,2.0599912538676994,-4.172400145689746,6.258099917416975]],[30,"mixamorig:LeftHand",[-18,-19,-20,-21,-22],[0,"59qDgSGUlRhob2g6MhrnVJ",1,0],[1,-0.0000033931585221580463,0.000004594316123984754,0.23987677693367004],[3,0.012727347090965778,0.03762700003164952,-0.05777421542991537,0.9975391538862534],[1,0.9999698400497437,1.000075101852417,0.9999244809150696],[1,1.7154632504015552,4.418698925094537,-6.563615133608637]],[55,"mixamorig:Hips",1,[-23,-24,-25],[0,"d7wvzNa5JU3oxmrAL+P6wC",1,0],[1,-0.000018000000636675395,0.7311469912528992,-0.011030999943614006],[3,0,0.7071067811865476,0.7071067811865476,8.659560751628624e-17],[1,-90.00000000000003,180,7.016709451900449e-15]],[45,"mixamorig:Spine2",[-26,-27,-28],[0,"3ajAmEgENQypyGPMC+X73v",1,0],[1,-7.806255952088362e-20,-0.000002706326768020517,0.12398198246955872]],[75,"Node-003",1,[[194,"Terry",-29,[1,"f5Karb/kFDkJe8d5U4pQwK"],16],[150,-30,[1,"65ZvZg+0RPlZwYY79++4t/"],[17],[3]]],[0,"d5Ea806uFB9IG0xwXrzOxt",1,0],[1,0.022,1.89,0.029],[3,0,-0.09608028456135748,0,0.9953735876135192],[1,0.5440000000000002,0.5440000000000002,0.5440000000000002],[1,0,-11.026999999999997,0]],[12,"Bob_body",1,[[25,-31,[1,"c83f+al1dY+rZjz0Q0iu1H"],[0,1],[3],1,2,3]],[0,"3dE/7jJVtV6p0xq/94vZsz",1,0]],[12,"Bob_hair",1,[[25,-32,[1,"b342xAbUNeJo4PEj/0rcmx"],[4],[3],1,5,6]],[0,"1aE8MLeTxTT5WVOCHwG9Rt",1,0]],[12,"Bob_pants",1,[[25,-33,[1,"55tvtDg9Nf0ac7CgfOT9dl"],[7],[3],1,8,9]],[0,"eebSm6Urxao5yUdIhDlN+q",1,0]],[12,"Bob_shoes",1,[[25,-34,[1,"8cKMkIfKhSoYU4LaSLW63m"],[10],[3],1,11,12]],[0,"aaIqipCE1d8aQCX8LbjX3G",1,0]],[12,"Bob_tshirt",1,[[25,-35,[1,"3bNkxGeUNXPLHSsDK0a2bZ"],[13],[3],1,14,15]],[0,"6aMxolEFtembsNaRv+ZM2/",1,0]],[5,"mixamorig:Spine",4,[-36],[0,"90RobPY7JY2ozAdM73ELTW",1,0],[1,-5.63785109012947e-20,0.00048099999548867345,0.09298700094223022],[3,-0.002599973742786015,3.749386969142393e-33,9.748340240427955e-36,0.9999966200625565],[1,1,1.0000134706497192,1.0000134706497192],[1,-0.29793538028066674,4.29649550374903e-31,-4.3506575803276074e-41]],[46,"mixamorig:Spine1",12,[5],[0,"44MB+S+6xeI4T5ndlnO7h8",1,0],[1,-7.155734622747665e-20,-0.0000021167427348700585,0.10848399251699448]],[5,"mixamorig:Neck",5,[-37],[0,"d7drgGSetZVr7IVDx6g6rj",1,0],[1,-8.890457736832954e-20,-0.000003295910801170976,0.13947997987270355],[3,0.002599973742786015,-3.183963248624237e-19,1.2246095516601117e-16,0.9999966200625565],[1,1,0.999986469745636,0.999986469745636],[1,0.29793538028066674,-7.29708180761021e-17,1.4032849480248883e-14]],[58,"mixamorig:Head",14,[[10,"mixamorig:HeadTop_End",-38,[0,"29LbX/b0tS7pLGxg1vCjT+",1,0],[1,-7.121039901972018e-18,0.058125998824834824,0.30206701159477234]]],[0,"6e2TrFWSFfE7Ew3fI2y3j3",1,0],[1,1.9949319560142975e-18,0.01628899946808815,0.084648996591568]],[5,"mixamorig:RightShoulder",5,[-39],[0,"02Tw9770dfepAHbx+018Aj",1,0],[1,0.060263000428676605,-0.000028168838980491273,0.12214785069227219],[3,-0.5639104913909292,0.5641360949742353,-0.42655653296779306,0.42638591466998227],[1,0.9999865889549255,0.9999468326568604,1.0000556707382202],[1,0,105.81244194071161,-90]],[5,"mixamorig:RightArm",16,[-40],[0,"a0bjMUpLdU07PYY5r/s/cN",1,0],[1,0.0000018851487766369246,0.00000427271015723818,0.1265861690044403],[3,0.09592469554332887,0.01525471509608108,-0.001444959978792015,0.9952706458762445],[1,1.0000245571136475,1.0000132322311401,0.9999257922172546],[1,11.01034051951572,1.755952483412222,0.002885146148329066]],[5,"mixamorig:RightForeArm",17,[2],[0,"19wHfzGvhfLYCH2bvqrMni",1,0],[1,-0.0000059201470321568195,-0.000004742736109619727,0.19180577993392944],[3,0.06366339886030538,-0.10825621022230915,0.006945003553648988,0.9920581291030767],[1,0.9999539256095886,0.9999905228614807,1.0000028610229492],[1,7.343594049883157,-12.455259682516587,-0.00024190947791609172]],[5,"mixamorig:RightHandIndex1",2,[-41],[0,"e9Hir2j19YBqsBQLXQBeoj",1,0],[1,-0.03245886415243149,-0.0006876370171085,0.10816731303930283],[3,-0.04333072235083181,-0.015091490276918113,-0.0006738591596980794,0.9989465658060044],[1,0.9999374151229858,0.9999423623085022,0.9999377727508545],[1,-4.967490595418363,-1.731144953121116,-0.0022029216952239006]],[5,"mixamorig:RightHandIndex2",19,[-42],[0,"30hf8D/R5fgrjmM34Xle4K",1,0],[1,0.000003221039378331625,-0.0000011648443205558578,0.02900322712957859],[3,0.03436752049681162,-7.154177612525927e-19,-2.0804384926259717e-17,0.999409262281925],[1,1,1.000027060508728,1.0000017881393433],[1,3.9390034234421876,-1.3315597092204721e-24,-2.3854160585653996e-15]],[11,"mixamorig:RightHandIndex3",20,[[10,"mixamorig:RightHandIndex4",-43,[0,"6c9yPyLn5RqbaH7CPyTGps",1,0],[1,0.00007353726687142625,0.0000013120520634402055,0.021863095462322235]]],[0,"b6ViGQijpSkZYpl/n9HrK7",1,0],[1,-0.0000715442220098339,-4.214836621940776e-7,0.027970239520072937],[3,-0.08289841497182925,2.5934370202238525e-17,2.304592335477547e-17,0.9965580027249585],[1,1,0.9999864101409912,1.0000663995742798],[1,-9.510372677257644,3.180554575204682e-15,2.3854159486002747e-15]],[5,"mixamorig:RightHandMiddle1",2,[-44],[0,"703+LIzrBZEJOwTjduZAt+",1,0],[1,-0.010880134999752045,-0.0006498924340121448,0.10819046199321747],[3,-0.01778211786398752,0.021900442981534627,0.0003501933182109004,0.9996019428983338],[1,0.9999811053276062,0.9999659657478333,1.0000134706497192],[1,-2.038178184794448,2.510123401400497,-0.004512883410769191]],[5,"mixamorig:RightHandMiddle2",22,[-45],[0,"9bbOKvoSFdT6wh+LKScpE/",1,0],[1,0.00003418165215407498,-0.0000025167089461319847,0.03099985420703888],[3,0.03623407315001189,2.514243892943461e-19,6.934337342972929e-18,0.9993433303639744],[1,1,1.0000602006912231,0.999974250793457],[1,4.153028027731927,0,7.951386703658792e-16]],[11,"mixamorig:RightHandMiddle3",23,[[10,"mixamorig:RightHandMiddle4",-46,[0,"63Sg2e/CNV/It6hM/b2PkH",1,0],[1,1.1779845721093807e-7,-9.955451787391212e-7,0.02477804571390152]]],[0,"431GP9Dt1Zz4ktGisCbgYZ",1,0],[1,-0.00003061149982386269,-5.225316499490873e-7,0.03057563677430153],[3,-0.01642961103270941,2.7523823577034974e-17,1.433192858280603e-17,0.999865024831509],[1,1,0.9999799728393555,0.9999454617500305],[1,-1.882779452685202,3.180554789253529e-15,1.5902774100611075e-15]],[5,"mixamorig:RightHandPinky1",2,[-47],[0,"8cjnv6dVBVIK0BFrss6w0c",1,0],[1,0.03215956687927246,0.0001748849608702585,0.09854201227426529],[3,-0.004966872810865418,0.081171387032356,0.00034296734252772733,0.9966877236502544],[1,0.9999797940254211,1.0000367164611816,0.9999477863311768],[1,-0.5704760379085633,9.311881205417714,-0.007028658397223045]],[5,"mixamorig:RightHandPinky2",25,[-48],[0,"e6xiV4WoNUFZuAdzqkK4EQ",1,0],[1,0.000018834383809007704,-2.82330404388631e-7,0.029547538608312607],[3,0.023187758473016944,0.0000036885815121329228,0.000049485206699410874,0.9997311265508371],[1,1.0000121593475342,0.9999308586120605,1.0000560283660889],[1,2.6573595502478042,0.0002910784585947005,0.0056788633322826425]],[11,"mixamorig:RightHandPinky3",26,[[10,"mixamorig:RightHandPinky4",-49,[0,"2fbPbdIAhSIIS6ZH3gE69R",1,0],[1,-0.000005432204943645047,7.064750775498396e-7,0.019670896232128143]]],[0,"07sdyjs1NbM7tKKp2lsMW2",1,0],[1,-0.000012334857274254318,4.4581975089386106e-7,0.024094533175230026],[3,-0.004400999625541807,2.075540358054824e-17,1.3969266968083653e-17,0.9999903155542537],[1,1,0.9999874234199524,0.9999977350234985],[1,-0.5043190363822357,2.3854159655981727e-15,1.5902772665079599e-15]],[5,"mixamorig:RightHandRing1",2,[-50],[0,"a6m3KoI4tVL6b4zxeJyCYn",1,0],[1,0.011157887987792492,-0.001009488943964243,0.10743608325719833],[3,-0.029944325748216923,0.06021947591113617,0.001773011690091617,0.9977343376400449],[1,0.9999676942825317,0.9999433755874634,0.9999287128448486],[1,-3.4378901171365115,6.907815811826856,-0.003923266491520766]],[5,"mixamorig:RightHandRing2",28,[-51],[0,"d3Sokin8Vd55/Rjku8yPNo",1,0],[1,0.000024954828404588625,-2.906518261625024e-7,0.03059440292418003],[3,0.03987398827697223,-2.801018239872151e-17,-5.826650017911234e-18,0.9992047162913553],[1,1,1.0000481605529785,1.000087022781372],[1,4.570434142770725,-3.1805545630728483e-15,-7.951386656414138e-16]],[11,"mixamorig:RightHandRing3",29,[[10,"mixamorig:RightHandRing4",-52,[0,"3cS7f35I5WSowmQHgz+3nj",1,0],[1,0.00001786916072887834,-4.981880010745954e-7,0.02345055714249611]]],[0,"6f8Y1zAztYSaf3842wlJ8C",1,0],[1,-0.000042705763917183504,4.5507984935966306e-8,0.02848713845014572],[3,-0.040273563207665515,-0.0000022690392781856063,-0.000049591371439658524,0.9991886897088584],[1,0.9999880790710449,1.0000356435775757,0.9999232888221741],[1,-4.616258897112571,-0.0004886664944784287,-0.005667670461262504]],[5,"mixamorig:RightHandThumb1",2,[-53],[0,"2872/KLYlWP7wYLsvqVPAY",1,0],[1,-0.025057023391127586,0.00778393168002367,0.025486184284090996],[3,-0.09607329826364255,-0.5008885192306284,-0.056039295284057274,0.8583357210600988],[1,0.9999297857284546,0.9999889731407166,0.9999727606773376],[1,-12.771603068394855,-60.53178988172773,0.002461791036778549]],[5,"mixamorig:RightHandThumb2",31,[-54],[0,"a53kCT5bBW2L/Ip2RBI8Gx",1,0],[1,0.007890991866588593,-0.000003070059165111161,0.028179800137877464],[3,-0.11224889783760067,1.1683247893884488e-18,-1.0342561825459344e-17,0.9936801220383972],[1,1,1.0000245571136475,0.9999874830245972],[1,-12.889941946892137,-5.3199195575826274e-24,-1.1927080526432528e-15]],[11,"mixamorig:RightHandThumb3",32,[[10,"mixamorig:RightHandThumb4",-55,[0,"c0ozC7FSlQtYJ/YEUuXXbw",1,0],[1,-0.0017042241524904966,0.0000010349435797252227,0.02430623583495617]]],[0,"e0pgHCJ/5ZN4B05+3lG+4K",1,0],[1,-0.006185887381434441,0.0000018903841692008427,0.030563276261091232],[3,0.019127974833119326,0.000014437977782568593,-0.000047860355610576385,0.999817042303098],[1,1.0000015497207642,0.9999481439590454,1.0000579357147217],[1,2.1920382277024517,0.0017590730202212842,-0.0054517426934660995]],[5,"mixamorig:LeftShoulder",5,[-56],[0,"19saMKpmtY1pgqerrFzM0G",1,0],[1,-0.060263000428676605,0.0002018249360844493,0.12214905023574829],[3,0.5649828245083885,0.5630651046910424,-0.4257436640194182,-0.42719366619498167],[1,0.9999922513961792,0.9999521970748901,0.9999594688415527],[1,-105.81322149671736,0.0003853874663356471,89.80519163359102]],[5,"mixamorig:LeftArm",34,[-57],[0,"4djqzEIa1WqqawU3mYzs92",1,0],[1,-0.0000057301786000607535,-4.109856632794617e-8,0.1265980750322342],[3,0.09595965842927508,-0.01831292594780677,0.0017549142230958922,0.9952152033472141],[1,1.0000085830688477,1.0000327825546265,1.0000797510147095],[1,11.014960249031894,-2.108238837203845,-0.0012358474351315135]],[5,"mixamorig:LeftForeArm",35,[3],[0,"7075BJQNlbdb+4+I5jy4eK",1,0],[1,-0.000005853675702383043,0.000014513425412587821,0.19180737435817719],[3,0.06383866888010892,0.10781243563820973,-0.006963227021926297,0.9920950642689509],[1,1.0000066757202148,0.999967098236084,1.000024676322937],[1,7.363827600657653,12.40434646888182,-0.002931341459322897]],[5,"mixamorig:LeftHandMiddle1",3,[-58],[0,"1ahF0ApHtTkorknrQMr6EX",1,0],[1,0.010523983277380466,0.00046254214248619974,0.10555142164230347],[3,0.011156142497608275,-0.019037734390033614,0.00022397107001679773,0.999756497848765],[1,1.0000290870666504,0.9999939203262329,1.000011920928955],[1,1.2786832165212534,-2.181846057435003,0.001321109456046716]],[5,"mixamorig:LeftHandMiddle2",37,[-59],[0,"0e85lTQG9Xk7HWrVx77c9r",1,0],[1,0.000030458386390819214,-0.000002946704626083374,0.032338544726371765],[3,0.005918153163125885,1.4041806302045244e-17,2.7672958784330088e-17,0.9999824875782265],[1,1,0.9999470114707947,1.000017523765564],[1,0.6781743563479663,1.5902773154796552e-15,3.18055469390331e-15]],[11,"mixamorig:LeftHandMiddle3",38,[[10,"mixamorig:LeftHandMiddle4",-60,[0,"31yEM8AUBaeLGQUQ1Z/Giv",1,0],[1,-0.00006450873479479924,3.3204624827476437e-8,0.023937763646245003]]],[0,"dfTQnMwVJSMITLvsb+/KzR",1,0],[1,0.00003519677193253301,-0.0000030462219910987187,0.03189190849661827],[3,-0.054786396125618766,7.603139801862053e-19,-1.3856944724226082e-17,0.9984980975442903],[1,1,1.000054955482483,0.9999564290046692],[1,-6.2812034453894645,0,-1.5902773407317588e-15]],[5,"mixamorig:LeftHandPinky1",3,[-61],[0,"79MzJ9QsJY5LMlYD4JsU0X",1,0],[1,-0.03154924139380455,0.0009128061938099563,0.09920990467071533],[3,0.022073321003830203,-0.08446327581361633,0.0018510562333677921,0.9961803537158902],[1,0.9999517798423767,0.9999334812164307,1.0000261068344116],[1,2.538501167322947,-9.692655786205911,-0.0023375700312155854]],[5,"mixamorig:LeftHandPinky2",40,[-62],[0,"e1UfNGSHxSEqLA6c/V6uNs",1,0],[1,0.00001303607496083714,0.0000013651178960571997,0.028073392808437347],[3,-0.0005574089140091697,-6.946628205613452e-18,1.3873918582412944e-17,0.999999844647639],[1,1,0.9999918937683105,1.000009536743164],[1,-0.06387435977906965,-7.951386447708297e-16,1.5902774245825957e-15]],[11,"mixamorig:LeftHandPinky3",41,[[10,"mixamorig:LeftHandPinky4",-63,[0,"1e4nDE1/9cFYm+p2/XopDB",1,0],[1,-0.00002448160739731975,9.067888413483161e-7,0.019921239465475082]]],[0,"1a4WslC+VZmrv5Z0GUFZ9K",1,0],[1,0.00001210769096360309,0.0000016050785234256182,0.02463148534297943],[3,-0.0353887902763145,-1.4360212859254272e-17,1.3377977235179857e-17,0.9993736205858043],[1,1,1.0000807046890259,1.0000064373016357],[1,-4.0561035717760205,-1.5902773039506434e-15,1.590277374997051e-15]],[5,"mixamorig:LeftHandRing1",3,[-64],[0,"91uA7fi2ZUAqz8S4hZN1iV",1,0],[1,-0.011640723794698715,-0.000724983518011868,0.10608071833848953],[3,-0.0077050829522819966,-0.041153370454898766,-0.0003354950387069429,0.9991230751213682],[1,0.9999757409095764,0.9999338984489441,1.000057578086853],[1,-0.8837803812978452,-4.717317398486356,-0.002075333536422752]],[5,"mixamorig:LeftHandRing2",43,[-65],[0,"c0WYFsmeFR4qRGdHgpt3cs",1,0],[1,-0.000010945245776383672,-0.0000018735581761575304,0.030789494514465332],[3,0.012411774821145373,-1.4048965939345216e-17,-1.370447086365214e-17,0.9999229709561578],[1,1,1.0000107288360596,0.9999595880508423],[1,1.422321147236957,-1.5902772429524865e-15,-1.5902773424804011e-15]],[11,"mixamorig:LeftHandRing3",44,[[10,"mixamorig:LeftHandRing4",-66,[0,"1eTSArRuhRz70h1nnnvayl",1,0],[1,-0.000012406705536704976,-5.019593345423345e-7,0.02302774414420128]]],[0,"26mrb6PuRRk6q/9uJskw5J",1,0],[1,0.000020224824766046368,5.068449127065833e-7,0.02916899137198925],[3,-0.028130590124331473,2.813498271880026e-17,-1.3091515044174652e-17,0.9996042566432263],[1,1,1.000046968460083,0.9999972581863403],[1,-3.2239534759513924,3.180554776213918e-15,-1.5902773433981986e-15]],[5,"mixamorig:LeftHandThumb1",3,[-67],[0,"f5PDVrDIRTCaUdC7g5N2nP",1,0],[1,0.024588605388998985,0.007678675465285778,0.025548988953232765],[3,-0.09580623467332887,0.5069748220820327,0.05678384443064172,0.8547358013937917],[1,1.0000375509262085,0.9999434947967529,0.9999762773513794],[1,-12.788572198280864,61.34697113874079,-0.004144089398105492]],[5,"mixamorig:LeftHandThumb2",46,[-68],[0,"c9rsgSPghczof9Eus8gY0/",1,0],[1,-0.00850366149097681,-3.4092354894710297e-7,0.027751903980970383],[3,-0.10333533095868981,-0.00000949409082610457,0.000049091065499338586,0.9946465738520329],[1,1.0000009536743164,1.0000327825546265,1.0000108480453491],[1,-11.862532624008315,-0.00050081363482375,0.0057077293752795825]],[11,"mixamorig:LeftHandThumb3",47,[[10,"mixamorig:LeftHandThumb4",-69,[0,"e1R8/55ZJfRJJUV3XdrCQl",1,0],[1,0.00239484547637403,-1.592220257862209e-7,0.025486662983894348]]],[0,"53se0u3hBaQ6yfaMgKmu55",1,0],[1,0.006110636983066797,-2.1096073510307178e-7,0.03086167201399803],[3,-0.014708719247442657,0.000015217979157970965,-0.00004762554464006595,0.9998918196876703],[1,0.9999989867210388,0.9999590516090393,0.9999496340751648],[1,-1.6855557734213689,0.0016633906936497122,-0.005482544854509541]],[5,"mixamorig:LeftHandIndex1",3,[-70],[0,"adS1zKMVNUy7j6lLb5rOwM",1,0],[1,0.03268425539135933,-0.00005325473102857359,0.10485702008008957],[3,-0.007048265833428344,0.013163188145437094,0.00010507317813829574,0.9998885144785975],[1,1.000011920928955,0.9999132752418518,1.0000035762786865],[1,-0.8077669764105536,1.5084812169523396,0.001407621481502322]],[5,"mixamorig:LeftHandIndex2",49,[-71],[0,"7c6PHsG51fNY3FYMEta5cb",1,0],[1,0.000066194093960803,0.00000236071400649962,0.031372733414173126],[3,-0.023364219987274712,-0.000001970621284289288,-0.00004965103326285985,0.999727018118085],[1,1.0000112056732178,1.000064730644226,1.000018835067749],[1,-2.6775860623570997,-0.0003586877394017465,-0.005682760135464832]],[11,"mixamorig:LeftHandIndex3",50,[[10,"mixamorig:LeftHandIndex4",-72,[0,"d7AODKVYNf7aZA0GYPGEil",1,0],[1,-0.00008429191802861169,-2.1219882739842433e-8,0.022328177466988564]]],[0,"a1IV4SBBpTc7W4kzaLr54p",1,0],[1,0.000016586000128882006,-0.000001283436176890973,0.028448719531297684],[3,-0.043087817188880495,-0.0000013312637581001387,0.00004966697389687639,0.9990712875172206],[1,0.9999887943267822,0.999996542930603,0.9999983906745911],[1,-4.939029229434294,0.00009282077841029428,0.005692703406265008]],[5,"mixamorig:LeftUpLeg",4,[-73],[0,"651QCM2OtUaZ3iN4vktI0X",1,0],[1,-0.07258199900388718,-0.0013020000187680125,-0.051708001643419266],[3,0.00013347204736317774,0.9998832025507299,-0.011149365763278222,-0.010452515734742377],[1,1.00001859664917,1.0000486373901367,0.9999671578407288],[1,1.277420099046433,-178.80245300900143,0.0286473614502237]],[5,"mixamorig:LeftLeg",52,[-74],[0,"48jaIMsL5UC73y447ySSMf",1,0],[1,-0.000005001814315619413,-0.000009342705197923351,0.32762688398361206],[3,0.022477179177956323,-0.009051257507754507,0.00020535847042612695,0.9997063613789946],[1,0.99998539686203,0.9999122619628906,0.9999969601631165],[1,2.5760194530785125,-1.0374787820494635,0.00021215853207381526]],[5,"mixamorig:LeftFoot",53,[-75],[0,"aeOPW0LcpaO7c+fRzXlnFE",1,0],[1,-8.449933375231922e-8,0.0000032991436000884278,0.2671462297439575],[3,-0.49594700876620973,-0.00111710246472082,0.0019590428778068236,0.8683498596354672],[1,1.0000097751617432,1.0000219345092773,1.000020980834961],[1,-59.46459996768915,0.00017712446802549306,0.2584229740511257]],[11,"mixamorig:LeftToeBase",54,[[10,"mixamorig:LeftToe_End",-76,[0,"043C754EdcmJvI3u9gahl4",1,0],[1,2.4320274860656355e-7,1.8604413298817235e-7,0.05320889502763748]]],[0,"12FN2jOgZXVLX9tIjADBLo",1,0],[1,8.394769679398451e-7,0.000003224042529836879,0.13583791255950928],[3,-0.30672231443434567,-0.005756587745218115,0.017880417480516914,0.9516136685631897],[1,0.9999807476997375,1.0000426769256592,1.0000348091125488],[1,-35.73015526705257,0.0007196214374854454,2.152641707646522]],[5,"mixamorig:RightUpLeg",4,[-77],[0,"34KK2gdjVambb3FDhG6DX6",1,0],[1,0.07258100062608719,-0.0007600000244565308,-0.051708001643419266],[3,-0.00011464684465771247,0.9998615009275161,-0.012950137544098279,0.010452739194334789],[1,1.00001859664917,1.0000354051589966,0.9999539852142334],[1,1.4837996330750818,178.8024530057517,-0.028647361130940224]],[5,"mixamorig:RightLeg",56,[-78],[0,"26hfru3o5R5ah/RCRHS2iQ",1,0],[1,0.000004591029664879898,-0.000006875950930407271,0.32765963673591614],[3,0.01771971595735901,0.009051728125518589,-0.00019488927636833432,0.9998020003493202],[1,0.99998539686203,0.9999454021453857,1.000030279159546],[1,2.0307551434574393,1.0374986901477568,-0.003948439761742979]],[5,"mixamorig:RightFoot",57,[-79],[0,"8ekorT185X3pwdMu/RLDI1",1,0],[1,-7.459941286924732e-8,0.000011545696906978264,0.2670386731624603],[3,-0.49221876068300996,0.001120240306693103,-0.0019571459774497457,0.8704686130314866],[1,1.0000097751617432,1.0000101327896118,1.0000091791152954],[1,-58.973199490897166,0.001351054929260676,-0.2584091319480305]],[11,"mixamorig:RightToeBase",58,[[10,"mixamorig:RightToe_End",-80,[0,"911BiPWWpbK5Gmpw0Scikh",1,0],[1,-0.0000012128639355069026,-0.0000017677015193839907,0.052381351590156555]]],[0,"b8eA8NPq5T9YeMoKRRyU6U",1,0],[1,0.0000031504137041338254,-0.0000036238764096196974,0.1353008896112442],[3,-0.3081828553733895,0.005885140313575481,-0.01808720023308689,0.9511369753958271],[1,1.0000011920928955,1.0000540018081665,1.0000464916229248],[1,-35.906175827978764,0.002684478541909111,-2.179725374087611]]],0,[0,7,1,0,0,1,0,0,1,0,0,1,0,0,1,0,-1,7,0,-2,8,0,-3,9,0,-4,10,0,-5,11,0,-6,4,0,-7,6,0,-1,19,0,-2,22,0,-3,25,0,-4,28,0,-5,31,0,-1,37,0,-2,40,0,-3,43,0,-4,46,0,-5,49,0,-1,12,0,-2,52,0,-3,56,0,-1,14,0,-2,16,0,-3,34,0,0,6,0,0,6,0,0,7,0,0,8,0,0,9,0,0,10,0,0,11,0,-1,13,0,-1,15,0,3,15,0,-1,17,0,-1,18,0,-1,20,0,-1,21,0,3,21,0,-1,23,0,-1,24,0,3,24,0,-1,26,0,-1,27,0,3,27,0,-1,29,0,-1,30,0,3,30,0,-1,32,0,-1,33,0,3,33,0,-1,35,0,-1,36,0,-1,38,0,-1,39,0,3,39,0,-1,41,0,-1,42,0,3,42,0,-1,44,0,-1,45,0,3,45,0,-1,47,0,-1,48,0,3,48,0,-1,50,0,-1,51,0,3,51,0,-1,53,0,-1,54,0,-1,55,0,3,55,0,-1,57,0,-1,58,0,-1,59,0,3,59,0,12,1,2,3,18,3,3,36,5,3,13,80],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,-2,1,11,-1,1,11,-1,1,11,-1,1,11,-1,1,11,6,-1,-2,-3,6,6,18],[11,11,343,344,11,345,346,11,347,348,11,349,350,11,351,352,35,35,41,23,0,0,353]],[[[6,".bin",2764837861,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1120,"length":120,"count":30,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1120,"count":20,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.471784383058548,-0.030739307403564453,-0.33413249254226685],"maxPosition",8,[1,0.471784383058548,0.03073883056640625,0.33413246273994446]]],-1],0,0,[],[],[]],[[[121,"default-material",[{}],[{}]]],0,0,[0],[5],[1]],[[[35,"VirtualControl"],[136,"VirtualControl",33554432,[-7,-8,-9,-10,-11],[[24,-2,[1,"0dngp/9gNO34wUQjZfN/CX"],[5,960,640]],[200,-4,[1,"3f2oTdCepERZdpmIfLsrhd"],-3],[73,45,-5,[1,"e8a+bU/8dPDbbJguUzLdoF"]],[205,-6,[1,"cbB/e+r3RNvqdpaa/KgHu3"]]],[0,"b5oNNtYhlNdKS3ovIvQIpk",-1,0],[1,480,320,0]],[137,"setting",false,33554432,1,[-15,-16,-17,-18,-19],[[112,-12,[1,"a7T+GsXk1CLYuMewtncsNz"],[5,933,200],[0,0,0.5]],[201,9,130,0.4479166666666667,-52,0.421875,false,false,100,100,-13,[1,"c9sWtoju9K2KANnXzRLMNO"]],[206,1,1,12,-14,[1,"57IOtYy+tLJrgkIJZG11lo"]]],[0,"84cMPPQOpCzI+Bo0GVKUQv",1,0],[1,-510,312,0]],[138,"setting-button",33554432,1,[[24,-20,[1,"98TYGMtwRBTYZZn4EZmhzJ"],[5,98,97]],[72,-21,[1,"77BcV1zfNHo4LI4KRqZupe"],5],[202,9,16,-22,[1,"66Zikt9dNPT5sVFZZzKUdn"]],[207,-29,[1,"52zgHUu95FN64Pt8hd6bq1"],2,-28,-27,-26,-25,-24,-23]],[0,"c2TaXI5XpIr5Yyg6W/o1kK",1,0],[1,-415,271.5,0]],[56,"lod",33554432,2,[-36,-37],[[24,-30,[1,"98TYGMtwRBTYZZn4EZmhzJ"],[5,177,71]],[60,-31,[1,"77BcV1zfNHo4LI4KRqZupe"],[4,4292269782],17],[62,1,-33,[1,"2fOwBXUwBNvaJ4NyyrOq4C"],[4,4292269782],-32,18],[65,-35,[1,"79k6RJCGZCz4xL//qpSrcA"],-34]],[0,"b60qO1RTZK6Jw9MvUUYN38",1,0],[1,88.5,0,0]],[56,"debug",33554432,2,[-44,-45],[[24,-38,[1,"98TYGMtwRBTYZZn4EZmhzJ"],[5,177,71]],[60,-39,[1,"77BcV1zfNHo4LI4KRqZupe"],[4,4292269782],6],[62,1,-41,[1,"2fOwBXUwBNvaJ4NyyrOq4C"],[4,4292269782],-40,7],[65,-43,[1,"d1qCls27VPvLyOn8fjYYoZ"],-42]],[0,"4dj6mltu1CEpy/5qesKX8J",1,0],[1,277.5,0,0]],[56,"fps",33554432,2,[-52,-53],[[24,-46,[1,"98TYGMtwRBTYZZn4EZmhzJ"],[5,177,71]],[60,-47,[1,"77BcV1zfNHo4LI4KRqZupe"],[4,4292269782],9],[62,1,-49,[1,"2fOwBXUwBNvaJ4NyyrOq4C"],[4,4292269782],-48,10],[65,-51,[1,"4b/6WzW91JyJxntq5j72qB"],-50]],[0,"aeFmBDF05DfbeJVLKA1KdN",1,0],[1,466.5,0,0]],[56,"quality",33554432,2,[-60,-61],[[24,-54,[1,"98TYGMtwRBTYZZn4EZmhzJ"],[5,177,71]],[60,-55,[1,"77BcV1zfNHo4LI4KRqZupe"],[4,4292269782],12],[62,1,-57,[1,"2fOwBXUwBNvaJ4NyyrOq4C"],[4,4292269782],-56,13],[65,-59,[1,"1eMxy5F7xEjr411YYcpPOa"],-58]],[0,"22imG1Xg9OeYTc1rSNvDbL",1,0],[1,655.5,0,0]],[52,"bend grass",33554432,2,[-67,-68],[[[24,-62,[1,"98TYGMtwRBTYZZn4EZmhzJ"],[5,177,71]],[60,-63,[1,"77BcV1zfNHo4LI4KRqZupe"],[4,4292269782],15],-64,[65,-66,[1,"ccZAbpUQVI7Yx8I1CXsVeg"],-65]],4,4,1,4],[0,"0ek6oMi29OwrG7N7Ra8cUl",1,0],[1,844.5,0,0]],[139,"Jump",33554432,[[24,-69,[1,"98TYGMtwRBTYZZn4EZmhzJ"],[5,176,176]],[72,-70,[1,"77BcV1zfNHo4LI4KRqZupe"],0],[62,3,-72,[1,"2fOwBXUwBNvaJ4NyyrOq4C"],[4,4292269782],-71,1],[73,18,-73,[1,"02vIUbaG9FI7F3Ex/D9Kti"]]],[0,"a31s9nw1JHzonELnKCue2C",1,0],[1,-88,88,0]],[140,"JoyStick",33554432,1,[-81,-82],[[24,-74,[1,"c0GgBiNtlAkYIJhgk5g7ZM"],[5,176,176]],[203,12,74,53,1,-75,[1,"f7QiHk3lZJXoMcaGO6rlIg"]],[208,50,-79,[1,"82w3jdFPJNeqCiHIrvo50g"],-78,-77,9,-76],[209,-80,[1,"daScpUltVOb5s2d7aFz4S4"]]],[0,"6fWzrcHnhGL4efjJVNWfi6",1,0],[1,-318,-179,0],[1,1,1,0.5]],[52,"Toggle",33554432,4,[-86],[[[24,-83,[1,"a7yxb8GDhNnIT24rnD3lO4"],[5,33,33]],[61,2,false,-84,[1,"3a4GKzsKZCNLuWHErVRJ1B"],4],-85],4,4,1],[0,"41WB/XKGVC5ZlgWndiXy4+",1,0],[1,51,0,0]],[52,"Toggle",33554432,5,[-90],[[[24,-87,[1,"a7yxb8GDhNnIT24rnD3lO4"],[5,33,33]],[61,2,false,-88,[1,"3a4GKzsKZCNLuWHErVRJ1B"],8],-89],4,4,1],[0,"30ag0TuJRKXZRFxzTVwOK+",1,0],[1,51,0,0]],[52,"Toggle",33554432,6,[-94],[[[24,-91,[1,"a7yxb8GDhNnIT24rnD3lO4"],[5,33,33]],[61,2,false,-92,[1,"3a4GKzsKZCNLuWHErVRJ1B"],11],-93],4,4,1],[0,"08IdrkfbFDSrEds/t/OFRm",1,0],[1,51,0,0]],[52,"Toggle",33554432,7,[-98],[[[24,-95,[1,"a7yxb8GDhNnIT24rnD3lO4"],[5,33,33]],[61,2,false,-96,[1,"3a4GKzsKZCNLuWHErVRJ1B"],14],-97],4,4,1],[0,"cfpr9JX/BC5IRWdoziqx5c",1,0],[1,51,0,0]],[52,"Toggle",33554432,8,[-102],[[[24,-99,[1,"a7yxb8GDhNnIT24rnD3lO4"],[5,33,33]],[61,2,false,-100,[1,"3a4GKzsKZCNLuWHErVRJ1B"],16],-101],4,4,1],[0,"6dvJ/n+PZCBbRbxkNpfbAp",1,0],[1,51,0,0]],[56,"jumpWidget",33554432,1,[9],[[112,-103,[1,"42bStXxaxBX6NUpje4x5Qj"],[5,176,176],[0,1,0]],[204,36,552,74,53,176,-104,[1,"5afR3EzQJIi6FpE0/Swe7e"]]],[0,"e7g1nMUgZNKYmKdPjKKCXZ",1,0],[1,406,-267,0]],[97,"control-bg",33554432,10,[[24,-105,[1,"f7NISe7HdAD68SLfhnddy8"],[5,176,176]],[72,-106,[1,"e71ctEmpxFC4KlSYRZNz/a"],2],[73,18,-107,[1,"a62SyVdOpNJZ1KUs8XRiHG"]]],[0,"afjWbwpz1PBpNH3f+tgFg5",1,0]],[97,"control",33554432,10,[[24,-108,[1,"f7NISe7HdAD68SLfhnddy8"],[5,80,80]],[72,-109,[1,"e71ctEmpxFC4KlSYRZNz/a"],3],[73,18,-110,[1,"98e4Hry81IZ74L3dwjpQPw"]]],[0,"07wY5Gq2VEaL4TMHR9Ogh4",1,0]],[57,"Label",512,33554432,4,[[24,-111,[1,"07QMd0h1dLcYd/vjigaip6"],[5,80,40]],[64,"Lod",0,18,18,2,false,-112,[1,"ee3IZdy2dLIaAWpjI7P0FL"],[4,4286282619]]],[0,"84KBOMTkpNLJaTzP2+7uki",1,0],[1,-10,0,0]],[98,"Checkmark",33554432,11,[[[24,-113,[1,"e4k6OSwohL75lyfsntvPC5"],[5,22,22]],-114],4,1],[0,"707DzXN1VKTKNGtol76PRI",1,0]],[119,11,[1,"58GFHdMmJFBa4quSrrbzsk"],[4,4292269782],11,[[37,"1cc41vvS9ROubh3cG3gNNZI","toggleLod",3]]],[88,false,12,[1,"58GFHdMmJFBa4quSrrbzsk"],[4,4292269782],12,[[37,"1cc41vvS9ROubh3cG3gNNZI","toggleDebug",3]]],[57,"Label",512,33554432,5,[[24,-115,[1,"07QMd0h1dLcYd/vjigaip6"],[5,80,40]],[64,"Debug",0,18,18,2,false,-116,[1,"ee3IZdy2dLIaAWpjI7P0FL"],[4,4286282619]]],[0,"986ctTNjFKHKbUOWn0pszF",1,0],[1,-10,0,0]],[78,"Checkmark",false,33554432,12,[[[24,-117,[1,"e4k6OSwohL75lyfsntvPC5"],[5,26,26]],-118],4,1],[0,"0aRDXJV91Mha5X+Nb+Zka0",1,0]],[119,13,[1,"58GFHdMmJFBa4quSrrbzsk"],[4,4292269782],13,[[37,"1cc41vvS9ROubh3cG3gNNZI","toggleHighFps",3]]],[57,"Label",512,33554432,6,[[24,-119,[1,"07QMd0h1dLcYd/vjigaip6"],[5,80,40]],[64,"High Fps",0,19,20,2,false,-120,[1,"ee3IZdy2dLIaAWpjI7P0FL"],[4,4286282619]]],[0,"4cIzRF7GFKRLoux14S6PjI",1,0],[1,-10,0,0]],[98,"Checkmark",33554432,13,[[[24,-121,[1,"e4k6OSwohL75lyfsntvPC5"],[5,22,22]],-122],4,1],[0,"fbO4ii40dFYqxDiKjJ2vpT",1,0]],[88,false,14,[1,"58GFHdMmJFBa4quSrrbzsk"],[4,4292269782],14,[[37,"1cc41vvS9ROubh3cG3gNNZI","toggleQuality",3]]],[57,"Label",512,33554432,7,[[24,-123,[1,"07QMd0h1dLcYd/vjigaip6"],[5,120,50.4]],[64,"High  Quality",0,17,17,2,false,-124,[1,"ee3IZdy2dLIaAWpjI7P0FL"],[4,4286282619]]],[0,"9dkQoGOxdNd4VcYfZ8iWq7",1,0],[1,-5,0,0]],[78,"Checkmark",false,33554432,14,[[[24,-125,[1,"e4k6OSwohL75lyfsntvPC5"],[5,26,26]],-126],4,1],[0,"bciyZ6mzdBorSVM/IorG0B",1,0]],[88,false,15,[1,"58GFHdMmJFBa4quSrrbzsk"],[4,4292269782],15,[[37,"1cc41vvS9ROubh3cG3gNNZI","toggleBendGrass",3]]],[57,"Label",512,33554432,8,[[24,-127,[1,"07QMd0h1dLcYd/vjigaip6"],[5,100,40]],[64,"Bend Grass",0,17,17,2,false,-128,[1,"ee3IZdy2dLIaAWpjI7P0FL"],[4,4286282619]]],[0,"c6QKrpfM9J/I/JM6wPHxJI",1,0],[1,-15,0,0]],[78,"Checkmark",false,33554432,15,[[[24,-129,[1,"e4k6OSwohL75lyfsntvPC5"],[5,22,22]],-130],4,1],[0,"4cFSrtAplB9bTKhP8yuhgJ",1,0]],[145,"Camera",33554432,1,[-131],[0,"10aCb7nYRABpQsMdie5N83",1,0],[1,0,0,1000]],[193,0,1073741824,320,2000,6,41943040,34,[1,"4fksSzGytD8pPTPcjomZUc"],[4,4278190080]],[87,20,[1,"25nHiyhlVLhbUiFI4JJ9Sn"]],[114,0,24,[1,"25nHiyhlVLhbUiFI4JJ9Sn"]],[87,27,[1,"25nHiyhlVLhbUiFI4JJ9Sn"]],[114,0,30,[1,"25nHiyhlVLhbUiFI4JJ9Sn"]],[183,1,8,[1,"2fOwBXUwBNvaJ4NyyrOq4C"],[4,4292269782],8],[87,33,[1,"25nHiyhlVLhbUiFI4JJ9Sn"]]],0,[0,7,1,0,0,1,0,42,35,0,0,1,0,0,1,0,0,1,0,-1,34,0,-2,16,0,-3,10,0,-4,2,0,-5,3,0,0,2,0,0,2,0,0,2,0,-1,4,0,-2,5,0,-3,6,0,-4,7,0,-5,8,0,0,3,0,0,3,0,0,3,0,43,40,0,44,31,0,45,28,0,46,25,0,47,22,0,48,21,0,0,3,0,0,4,0,0,4,0,16,4,0,0,4,0,25,21,0,0,4,0,-1,19,0,-2,11,0,0,5,0,0,5,0,16,5,0,0,5,0,25,22,0,0,5,0,-1,23,0,-2,12,0,0,6,0,0,6,0,16,6,0,0,6,0,25,25,0,0,6,0,-1,26,0,-2,13,0,0,7,0,0,7,0,16,7,0,0,7,0,25,28,0,0,7,0,-1,29,0,-2,14,0,0,8,0,0,8,0,-3,40,0,25,31,0,0,8,0,-1,32,0,-2,15,0,0,9,0,0,9,0,16,9,0,0,9,0,0,9,0,0,10,0,0,10,0,49,16,0,50,17,0,51,18,0,0,10,0,0,10,0,-1,17,0,-2,18,0,0,11,0,0,11,0,-3,21,0,-1,20,0,0,12,0,0,12,0,-3,22,0,-1,24,0,0,13,0,0,13,0,-3,25,0,-1,27,0,0,14,0,0,14,0,-3,28,0,-1,30,0,0,15,0,0,15,0,-3,31,0,-1,33,0,0,16,0,0,16,0,0,17,0,0,17,0,0,17,0,0,18,0,0,18,0,0,18,0,0,19,0,0,19,0,0,20,0,-2,36,0,0,23,0,0,23,0,0,24,0,-2,37,0,0,26,0,0,26,0,0,27,0,-2,38,0,0,29,0,0,29,0,0,30,0,-2,39,0,0,32,0,0,32,0,0,33,0,-2,41,0,-1,35,0,12,1,9,3,16,21,26,36,22,26,37,25,26,38,28,26,39,31,26,41,131],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,21,37,22,38,25,39,28,40,41,31],[10,13,10,10,10,10,10,13,10,10,13,10,10,13,10,10,10,10,13,10,13,10,13,10,13,10,13,13,10,13],[158,158,354,355,21,356,22,22,21,22,22,21,22,22,21,22,21,22,22,40,21,40,21,40,21,40,21,22,40,21]],[[{"fmt":"1","w":0,"h":0},-1],[1],0,[],[],[]],[[[32,"poster2_mtl","1",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_TEXTURE":true}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[8,5],[357,43]],[[[15,"Default_Material",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":0}],[[[{"transparencyFactor":0,"albedoScale":1},"mainColor",8,[4,4294967295],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[5],[10]],[[[6,".bin",1591004882,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":305592,"length":72600,"count":18150,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":305592,"count":5457,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.20660819113254547,1.114187995199245e-7,-0.14456799626350403],"maxPosition",8,[1,0.19990862905979156,0.4558136761188507,0.14458584785461426]]],-1],0,0,[],[],[]],[[[34],[38,"CoffeeMaker2",[-2],[0,"77SLfwXEdV4ZwWE2C50LmH",-1,0]],[23,"CoffeeMaker2",1,[[4,-3,[1,"59MHX+FrFSHZ0M0Vqab9HT"],[0],[3],1]],[0,"f2KhE4XJJbIY1fLraqK15P",1,0],[3,0,-0.2233477371332527,0,0.9747388308246756],[1,0,-25.811476333875866,0]]],0,[0,7,1,0,-1,2,0,0,2,0,12,1,3],[0,0],[-1,1],[358,359]],[[[15,"trail_light_mat",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_ALBEDO_MAP":true},{},{}],[[[{},"mainTexture",6,0],{},{}],11,0,0]]],0,0,[0,0],[8,5],[360,1]],[[{"fmt":"1","w":0,"h":0},-1],[1],0,[],[],[]],[[[41,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{},{},{}],[[[{"roughness":0.3,"metallic":0.75,"SpecularIntensity":1,"fresnelHard":5,"reflEnvMapScale":0.1,"reflScale":0.6,"reflHard":4,"reflLightScale":0.2,"coatNormalScale":0.75,"flakeSize":10,"flakeDist":10},"mainColor",8,[4,4281874679],"secondPaintColor",8,[4,4282795770],"coatTiling",8,[2,4,2,0,0],"flakeTiling",8,[2,2,1,0,0],"mainTexture",6,0,"reflEnvMap",6,1,"reflLightMap",6,2,"coatNormal",6,3,"flakeMask",6,4,"flakeNormal",6,5],{},{}],11,0,0]]],0,0,[0,0,0,0,0,0,0],[8,27,28,29,30,31,5],[361,28,28,50,51,52,53]],[[[6,".bin",3343026759,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":22232,"length":4056,"count":1014,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":22232,"count":397,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.1986173540353775,-0.06074347719550133,-0.19214320182800293],"maxPosition",8,[1,0.19861742854118347,0.029899632558226585,0.19622309505939484]]],-1],0,0,[],[],[]],[[[6,".bin",2126217751,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":336,"length":60,"count":15,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":336,"count":7,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.6883847117424011,0.9431431293487549,1.0334409475326538],"maxPosition",8,[1,-0.6124459505081177,1.2738007307052612,1.264099359512329]]],-1],0,0,[],[],[]],[[[6,".bin",309395058,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":528,"length":132,"count":33,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":528,"count":11,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,0.14872558414936066,0.16875746846199036,0.15104521811008453],"maxPosition",8,[1,0.29144248366355896,0.8240742087364197,0.509304404258728]]],-1],0,0,[],[],[]],[[[6,".bin",615774166,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":816,"length":228,"count":57,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":816,"count":17,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.2889973819255829,0.15631651878356934,0.18882445991039276],"maxPosition",8,[1,-0.1349823772907257,1.1482478380203247,0.5823087096214294]]],-1],0,0,[],[],[]],[[[6,".bin",3932533277,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4416,"length":648,"count":162,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":4416,"count":92,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.10213509947061539,-0.5617931485176086,1.1347095966339111],"maxPosition",8,[1,0.10213509947061539,-0.4915068745613098,1.2190845012664795]]],-1],0,0,[],[],[]],[[[6,".bin",896726872,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":33696,"length":6480,"count":1620,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":33696,"count":702,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.05962013080716133,-0.34445223212242126,-0.3446163237094879],"maxPosition",8,[1,0.20141853392124176,0.3444522023200989,0.3446163535118103]]],-1],0,0,[],[],[]],[[[6,".bin",4172441179,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1104,"length":324,"count":81,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1104,"count":23,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.8697957992553711,-2.278724431991577,0.6040249466896057],"maxPosition",8,[1,-0.42497238516807556,-1.7928829193115234,0.7679193615913391]]],-1],0,0,[],[],[]],[[[6,".bin",4108269615,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":2640,"length":792,"count":198,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":10728,"length":1164,"count":291,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":2640,"count":55,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":3432,"length":7296,"count":152,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.03833526372909546,-0.006957588251680136,-0.5348019003868103],"maxPosition",8,[1,0.25207045674324036,1.0509471893310547,0.22568358480930328]]],-1],0,0,[],[],[]],[[[6,".bin",2970032157,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":2640,"length":792,"count":198,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":10728,"length":1164,"count":291,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":2640,"count":55,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":3432,"length":7296,"count":152,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.2520703077316284,-0.006957511883229017,-0.5348020195960999],"maxPosition",8,[1,0.038335416465997696,1.0509471893310547,0.22568351030349731]]],-1],0,0,[],[],[]],[[[6,".bin",2833201954,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":3696,"length":1032,"count":258,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":15720,"length":1860,"count":465,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":3696,"count":77,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":4728,"length":10992,"count":229,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.17967422306537628,-0.005121001973748207,-0.4852014183998108],"maxPosition",8,[1,0.22698776423931122,1.1024459600448608,0.30431121587753296]]],-1],0,0,[],[],[]],[[[6,".bin",602179129,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":336,"length":60,"count":15,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":336,"count":7,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,0.6124459505081177,0.9431431293487549,1.0334409475326538],"maxPosition",8,[1,0.6883847117424011,1.2738007307052612,1.264099359512329]]],-1],0,0,[],[],[]],[[[6,".bin",896726872,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":33696,"length":6480,"count":1620,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":33696,"count":702,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.05962013080716133,-0.34445223212242126,-0.3446163237094879],"maxPosition",8,[1,0.20141853392124176,0.3444522023200989,0.3446163535118103]]],-1],0,0,[],[],[]],[[[6,".bin",1349711049,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4704,"length":1200,"count":300,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":20688,"length":2352,"count":588,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":4704,"count":98,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":5904,"length":14784,"count":308,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.768163800239563,-0.623410701751709,1.0148950815200806],"maxPosition",8,[1,0.768163800239563,1.3264602422714233,1.405426025390625]]],-1],0,0,[],[],[]],[[[6,".bin",4048373953,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":528,"length":132,"count":33,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":528,"count":11,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.291442334651947,0.16875751316547394,0.15104521811008453],"maxPosition",8,[1,-0.14872543513774872,0.8240742087364197,0.509304404258728]]],-1],0,0,[],[],[]],[[[15,"Electric_1_Matte",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true,"DCC_APP_NAME":0}],[[[{"transparencyFactor":0,"albedoScale":1},"mainColor",8,[4,4294967295],"emissiveColor",8,[4,4278190080],"mainTexture",6,0]],11]]],0,0,[0,0],[8,5],[362,10]],[[[6,".bin",1679065822,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":9600,"length":2208,"count":552,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":35952,"length":4776,"count":1194,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":9600,"count":200,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":11808,"length":24144,"count":503,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.9489779472351074,1.6589478254318237,0.1513776034116745],"maxPosition",8,[1,0.9489779472351074,2.450244426727295,0.6457144618034363]]],-1],0,0,[],[],[]],[[[6,".bin",4243411510,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":19104,"length":4392,"count":1098,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":35688,"length":2520,"count":630,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":19104,"count":398,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":23496,"length":12192,"count":254,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.9624225497245789,-2.4147982597351074,0.0964873880147934],"maxPosition",8,[1,0.9624225497245789,-1.8127583265304565,0.5912235975265503]]],-1],0,0,[],[],[]],[[[6,".bin",3411102304,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":29760,"length":8664,"count":2166,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":103032,"length":12456,"count":3114,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[2],"indexView":{"offset":117888,"length":456,"count":114,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":29760,"count":620,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":38424,"length":64608,"count":1346,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":115488,"length":2400,"count":50,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.9547522664070129,-2.386023759841919,0.1513776034116745],"maxPosition",8,[1,0.9547522664070129,2.3935165405273438,1.2082637548446655]]],-1],0,0,[],[],[]],[[[6,".bin",896726872,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":33696,"length":6480,"count":1620,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":33696,"count":702,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.05962013080716133,-0.34445223212242126,-0.3446163237094879],"maxPosition",8,[1,0.20141853392124176,0.3444522023200989,0.3446163535118103]]],-1],0,0,[],[],[]],[[[6,".bin",2254950575,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4800,"length":960,"count":240,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":4800,"count":100,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,0.8621153235435486,-1.1237597465515137,0.15138056874275208],"maxPosition",8,[1,0.9683318734169006,0.9846172332763672,0.2843859791755676]]],-1],0,0,[],[],[]],[[[6,".bin",2032024576,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1200,"length":360,"count":90,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1200,"count":25,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.5750626921653748,-0.005078430287539959,-0.22937774658203125],"maxPosition",8,[1,0.5750624537467957,0.7404924035072327,0.03262130543589592]]],-1],0,0,[],[],[]],[[[6,".bin",4028729316,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1104,"length":324,"count":81,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1104,"count":23,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,0.42497238516807556,-2.278724431991577,0.6040249466896057],"maxPosition",8,[1,0.8697957992553711,-1.7928829193115234,0.7679193615913391]]],-1],0,0,[],[],[]],[[[6,".bin",4197039269,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1824,"length":336,"count":84,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":6240,"length":816,"count":204,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1824,"count":38,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":2160,"length":4080,"count":85,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.9264301657676697,-1.1236956119537354,0.1545068472623825],"maxPosition",8,[1,-0.8631407618522644,0.9845216870307922,0.2843799591064453]]],-1],0,0,[],[],[]],[[[6,".bin",2864183359,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":65408,"length":10152,"count":2538,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":65408,"count":1168,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.7244866490364075,-1.075331449508667,0.2322770655155182],"maxPosition",8,[1,0.7113996744155884,1.3589534759521484,1.1794999837875366]]],-1],0,0,[],[],[]],[[[6,".bin",479150509,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":816,"length":228,"count":57,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":816,"count":17,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,0.1349823772907257,0.1563163697719574,0.18882445991039276],"maxPosition",8,[1,0.2889973819255829,1.1482475996017456,0.5823087096214294]]],-1],0,0,[],[],[]],[[[6,".bin",3428415003,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":6288,"length":2304,"count":576,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":12192,"length":768,"count":192,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":6288,"count":131,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":8592,"length":3600,"count":75,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.7939711809158325,-1.3541505336761475,-0.36648598313331604],"maxPosition",8,[1,0.7939711809158325,-0.002011642325669527,0.013696517795324326]]],-1],0,0,[],[],[]],[[[6,".bin",3714544718,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1008,"length":288,"count":72,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1008,"count":21,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.7412527203559875,-1.099245309829712,0.9427924752235413],"maxPosition",8,[1,0.7412527203559875,-0.1617981642484665,1.3258309364318848]]],-1],0,0,[],[],[]],[[[6,".bin",3159459587,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":3696,"length":1032,"count":258,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":15720,"length":1860,"count":465,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":3696,"count":77,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":4728,"length":10992,"count":229,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.22698767483234406,-0.005120925605297089,-0.4852014183998108],"maxPosition",8,[1,0.17967429757118225,1.1024460792541504,0.30431121587753296]]],-1],0,0,[],[],[]],[[[6,".bin",896726872,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":33696,"length":6480,"count":1620,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":33696,"count":702,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.05962013080716133,-0.34445223212242126,-0.3446163237094879],"maxPosition",8,[1,0.20141853392124176,0.3444522023200989,0.3446163535118103]]],-1],0,0,[],[],[]],[[[6,".bin",534394312,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":12096,"length":3576,"count":894,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":28680,"length":3048,"count":762,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[2],"indexView":{"offset":32880,"length":240,"count":60,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":12096,"count":252,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":15672,"length":13008,"count":271,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":31728,"length":1152,"count":24,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.670826256275177,-0.005078430287539959,-0.6782275438308716],"maxPosition",8,[1,0.670826256275177,1.1567802429199219,0.03262130543589592]]],-1],0,0,[],[],[]],[[{"fmt":"1","w":0,"h":0},-1],[1],0,[],[],[]],[[{"base":"2,2,2,2,0,0","w":256,"h":256,"n":"render-texture"}],[28],0,[],[],[]],[[[15,"Default_Material",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":0}],[[[{"transparencyFactor":0,"albedoScale":1},"mainColor",8,[4,4294967295],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[5],[10]],[[[6,".bin",3451815012,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":49000,"length":9696,"count":2424,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":49000,"count":875,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.05580152943730354,-0.00004825781797990203,-0.055434610694646835],"maxPosition",8,[1,0.05580151081085205,0.020609186962246895,0.05543464422225952]]],-1],0,0,[],[],[]],[[[6,".bin",3085621867,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1456,"length":288,"count":72,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1456,"count":26,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.05580152943730354,-0.00004825781797990203,-0.055434610694646835],"maxPosition",8,[1,0.05580151081085205,-0.00004825781797990203,0.05543464422225952]]],-1],0,0,[],[],[]],[[[6,".bin",1178065483,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":25872,"length":6192,"count":1548,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":25872,"count":462,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.05190274491906166,2.9103830456733704e-11,-0.05228394269943237],"maxPosition",8,[1,0.051902759820222855,0.10742446035146713,0.05228397250175476]]],-1],0,0,[],[],[]],[[[34],[38,"Cup",[-2],[0,"c0lZvWBDhV9K6p8cnCHiNZ",-1,0]],[141,"Cup",1,[-4,-5],[[4,-3,[1,"afKd3ahIJa+oOmKGJJwzqc"],[4],[3],5]],[0,"6dZGIFjLBbKJiKXNkEF9xV",1,0],[3,0,0.3274273518199303,0,0.9448763566097883],[1,0,38.22540079008484,0]],[142,"Coffee2",2,[[4,-6,[1,"f61U+r2dVc/biASOcT8LeV"],[0],[3],1]],[0,"98RIoJzkxdap3qfsj0gjLK",1,0],[1,-0.000599980354309082,0.09629999846220016,-0.0009000003337860107],[1,0.8224075436592102,0.8224075436592102,0.8224075436592102]],[28,"CapCup",2,[[4,-7,[1,"33uNNTDYtcjapY0/pwmtgF"],[2],[3],3]],[0,"79CwNdyYtTTYAl2/gULm+X",1,0],[1,-0.03310000151395798,0.00839999970048666,-0.10400000214576721]]],0,[0,7,1,0,-1,2,0,0,2,0,-1,3,0,-2,4,0,0,3,0,0,4,0,12,1,7],[0,0,0,0,0,0],[-1,1,-1,1,-1,1],[61,363,61,364,61,365]],[[[35,"Paint_03"],[30,"Paint_03",[-2],[0,"9aHHfOVMdT7qPax9QpzJnz",-1,0],[1,12.106,3.225,2.765],[3,-0.4309746445460727,0.43805801513413123,-0.5532725631492245,0.5623659858147707],[1,2.57,2.57,2.57],[1,0,75.834,-89.066]],[23,"Paint_03",1,[[4,-3,[1,"eef7bjqL1f3qYcPmR2mUiT"],[0],[3],1]],[0,"39Yx/R27lU5K+R6IjwZTgy",1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]]],0,[0,7,1,0,-1,2,0,0,2,0,12,1,3],[0,0],[-1,1],[29,159]],[[{"name":"Button_disable","rect":{"x":810,"y":733,"width":301,"height":84},"offset":{"x":0.5,"y":-235},"originalSize":{"width":1920,"height":1080},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-150.5,-42,0,150.5,-42,0,-150.5,42,0,150.5,42,0],"indexes":[0,1,2,2,1,3],"uv":[810,347,1111,347,810,263,1111,263],"nuv":[0.421875,0.24351851851851852,0.5786458333333333,0.24351851851851852,0.421875,0.3212962962962963,0.5786458333333333,0.3212962962962963],"minPos":{"x":-150.5,"y":-42,"z":0},"maxPos":{"x":150.5,"y":42,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[2],0,[0],[15],[366]],[[[32,"Glass","1",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{},{},{}],[[[{"roughness":0.252,"metallic":0.252,"specularIntensity":0.27},"mainColor",8,[4,2186443928]],{},{}],11,0,0]]],0,0,[0],[5],[1]],[[[15,"InteriorAlbedo",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_NORMAL_MAP":true,"USE_ALBEDO_MAP":true,"USE_METALLIC_ROUGHNESS_MAP":true,"USE_OCCLUSION_MAP":true},{},{}],[[[{"roughness":1,"metallic":0.522,"specularIntensity":0.608},"mainColor",8,[4,4288130488],"mainTexture",6,0,"normalMap",6,1,"metallicRoughnessMap",6,2,"occlusionMap",6,3],{},{}],11,0,0]]],0,0,[0,0,0,0,0],[8,14,17,22,5],[367,368,369,370,1]],[[[84,"dcc/imported-specular-glossiness",[{"hash":1600861347,"name":"dcc/imported-specular-glossiness|standard-vs|standard-fs","blocks":[{"name":"Constants","stageFlags":17,"binding":0,"members":[{"name":"tilingOffset","type":16,"count":1},{"name":"diffuseColor","type":16,"count":1},{"name":"specularColor","type":16,"count":1},{"name":"emissive","type":16,"count":1},{"name":"alphaThreshold","type":13,"count":1},{"name":"shininessExponent","type":13,"count":1},{"name":"glossiness","type":13,"count":1},{"name":"metallic","type":13,"count":1},{"name":"normalScale","type":13,"count":1},{"name":"transparencyFactor","type":13,"count":1},{"name":"diffuseFactor","type":13,"count":1},{"name":"specularFactor","type":13,"count":1}],"defines":[]}],"samplerTextures":[{"name":"shininessExponentMap","type":28,"count":1,"stageFlags":16,"binding":1,"defines":["USE_SHININESS_MAP"]},{"name":"specularGlossinessMap","type":28,"count":1,"stageFlags":16,"binding":2,"defines":["USE_SPECULAR_GLOSSINESS_MAP"]},{"name":"specularMap","type":28,"count":1,"stageFlags":16,"binding":3,"defines":["USE_SPECULAR_MAP"]},{"name":"metallicMap","type":28,"count":1,"stageFlags":16,"binding":4,"defines":["USE_METALLIC_MAP"]},{"name":"albedoMap","type":28,"count":1,"stageFlags":16,"binding":5,"defines":["USE_ALBEDO_MAP"]},{"name":"transparencyMap","type":28,"count":1,"stageFlags":16,"binding":6,"defines":["USE_TRANSPARENCY_MAP"]},{"name":"normalMap","type":28,"count":1,"stageFlags":16,"binding":7,"defines":["USE_NORMAL_MAP"]},{"name":"emissiveMap","type":28,"count":1,"stageFlags":16,"binding":8,"defines":["USE_EMISSIVE_MAP"]}],"samplers":[],"textures":[],"buffers":[{"name":"b_ccLightsBuffer","memoryAccess":1,"stageFlags":16,"binding":9,"defines":["CC_FORWARD_ADD"]},{"name":"b_clusterLightIndicesBuffer","memoryAccess":1,"stageFlags":16,"binding":10,"defines":["CC_FORWARD_ADD"]},{"name":"b_clusterLightGridBuffer","memoryAccess":1,"stageFlags":16,"binding":11,"defines":["CC_FORWARD_ADD"]}],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_normal","format":32,"location":1,"defines":[]},{"name":"a_texCoord","format":21,"location":2,"defines":[]},{"name":"a_tangent","format":44,"location":3,"defines":[]},{"name":"a_joints","location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","format":44,"isInstanced":true,"location":6,"defines":["USE_INSTANCING","CC_USE_BAKED_ANIMATION"]},{"name":"a_matWorld0","format":44,"isInstanced":true,"location":7,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING","CC_USE_LIGHTMAP"]},{"name":"a_localShadowBias","format":21,"isInstanced":true,"location":11,"defines":["USE_INSTANCING","CC_RECEIVE_SHADOW"]},{"name":"a_dyn_batch_id","format":11,"location":12,"defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"a_vertexId","format":11,"location":13,"defines":["CC_USE_MORPH"]},{"name":"a_color","format":44,"location":14,"defines":["USE_VERTEX_COLOR"]},{"name":"a_texCoord1","format":21,"location":15,"defines":[]}],"fragColors":[{"name":"fragColorX","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":["CC_FORWARD_ADD"]},{"name":"fragColor0","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":1,"defines":["CC_FORWARD_ADD","CC_PIPELINE_TYPE"]},{"name":"fragColor1","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":2,"defines":["CC_FORWARD_ADD","CC_PIPELINE_TYPE"]},{"name":"fragColor2","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":3,"defines":["CC_FORWARD_ADD","CC_PIPELINE_TYPE"]}],"glsl3":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\nin vec4 a_tangent;\n#if CC_USE_SKINNING\n    in vec4 a_joints;\n  in vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    in highp vec4 a_jointAnimInfo;\n  #endif\n  in vec4 a_matWorld0;\n  in vec4 a_matWorld1;\n  in vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    in vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    in vec2 a_localShadowBias;\n  #endif\n#elif USE_BATCHING\n  in float a_dyn_batch_id;\n#endif\n#if CC_USE_MORPH\n    in float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\n#if CC_USE_MORPH\n  layout(std140) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n  #endif\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n  vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n  vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n  vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n  }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    layout(std140) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(std140) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      uniform highp sampler2D cc_realtimeJoint;\n    #else\n      layout(std140) uniform CCSkinning {\n        highp vec4 cc_joints[CC_JOINT_UNIFORM_CAPACITY * 3];\n      };\n    #endif\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n        mat4 getJointMatrix (float i) {\n          float x = i;\n          vec4 v1 = texture(cc_realtimeJoint, vec2( x / 256.0, 0.5 / 3.0));\n          vec4 v2 = texture(cc_realtimeJoint, vec2( x / 256.0, 1.5 / 3.0));\n          vec4 v3 = texture(cc_realtimeJoint, vec2( x / 256.0, 2.5 / 3.0));\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #else\n        mat4 getJointMatrix (float i) {\n         float x = 4.0 * i;\n          vec4 v1 = vec4(\n            decode32(texture(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 0.5 / 3.0)))\n          );\n          vec4 v2 = vec4(\n            decode32(texture(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 1.5 / 3.0)))\n          );\n          vec4 v3 = vec4(\n            decode32(texture(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 2.5 / 3.0)))\n          );\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #endif\n    #else\n      mat4 getJointMatrix (float i) {\n        int idx = int(i);\n        vec4 v1 = cc_joints[idx * 3];\n        vec4 v2 = cc_joints[idx * 3 + 1];\n        vec4 v3 = cc_joints[idx * 3 + 2];\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_debug_view_mode;\n  mediump vec4 cc_debug_view_composite_pack_1;\n  mediump vec4 cc_debug_view_composite_pack_2;\n  mediump vec4 cc_debug_view_composite_pack_3;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if !USE_INSTANCING\n  #if USE_BATCHING\n    layout(std140) uniform CCLocalBatched {\n      highp mat4 cc_matWorlds[10];\n    };\n  #else\n    layout(std140) uniform CCLocal {\n      highp mat4 cc_matWorld;\n      highp mat4 cc_matWorldIT;\n      highp vec4 cc_lightingMapUVParam;\n      highp vec4 cc_localShadowBias;\n    };\n  #endif\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\nlayout(std140) uniform Constants {\n  vec4  tilingOffset;\n  vec4  diffuseColor;\n  vec4  specularColor;\n  vec4  emissive;\n  float alphaThreshold;\n  float shininessExponent;\n  float glossiness;\n  float metallic;\n  float normalScale;\n  float transparencyFactor;\n  float diffuseFactor;\n  float specularFactor;\n};\n#if CC_USE_FOG != 4\n  float LinearFog(vec4 pos, vec3 cameraPos, float fogStart, float fogEnd) {\n      vec4 wPos = pos;\n      float cam_dis = distance(cameraPos, wPos.xyz);\n      return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n  }\n  float ExpFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * fogDensity);\n      return f;\n  }\n  float ExpSquaredFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n      return f;\n  }\n  float LayeredFog(vec4 pos, vec3 cameraPos, float fogTop, float fogRange, float fogAtten) {\n      vec4 wPos = pos;\n      vec3 camWorldProj = cameraPos.xyz;\n      camWorldProj.y = 0.;\n      vec3 worldPosProj = wPos.xyz;\n      worldPosProj.y = 0.;\n      float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n      float fDeltaY, fDensityIntegral;\n      if (cameraPos.y > fogTop) {\n          if (wPos.y < fogTop) {\n              fDeltaY = (fogTop - wPos.y) / fogRange * 2.0;\n              fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n          }\n          else {\n              fDeltaY = 0.;\n              fDensityIntegral = 0.;\n          }\n      }\n      else {\n          if (wPos.y < fogTop) {\n              float fDeltaA = (fogTop - cameraPos.y) / fogRange * 2.;\n              float fDeltaB = (fogTop - wPos.y) / fogRange * 2.;\n              fDeltaY = abs(fDeltaA - fDeltaB);\n              fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n          }\n          else {\n              fDeltaY = abs(fogTop - cameraPos.y) / fogRange * 2.;\n              fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n          }\n      }\n      float fDensity;\n      if (fDeltaY != 0.) {\n          fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n      }\n      else {\n          fDensity = 0.;\n      }\n      float f = exp(-fDensity);\n      return f;\n  }\n#endif\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n#if CC_USE_FOG == 0\n\tfactor = LinearFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.y);\n#elif CC_USE_FOG == 1\n\tfactor = ExpFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 2\n\tfactor = ExpSquaredFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 3\n\tfactor = LayeredFog(pos, cc_cameraPos.xyz, cc_fogAdd.x, cc_fogAdd.y, cc_fogAdd.z);\n#else\n\tfactor = 1.0;\n#endif\n}\n#if !CC_USE_ACCURATE_FOG\nout mediump float v_fog_factor;\n#endif\nvoid CC_TRANSFER_FOG(vec4 pos) {\n#if !CC_USE_ACCURATE_FOG\n    CC_TRANSFER_FOG_BASE(pos, v_fog_factor);\n#endif\n}\nout highp vec4 v_shadowPos;\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n#if CC_SUPPORT_CASCADED_SHADOW_MAP\n  layout(std140) uniform CCCSM {\n    highp vec4 cc_csmViewDir0[4];\n    highp vec4 cc_csmViewDir1[4];\n    highp vec4 cc_csmViewDir2[4];\n    highp vec4 cc_csmAtlas[4];\n    highp mat4 cc_matCSMViewProj[4];\n    highp vec4 cc_csmProjDepthInfo[4];\n    highp vec4 cc_csmProjInfo[4];\n    highp vec4 cc_csmSplitsInfo;\n  };\n#endif\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotShadowMap;\n  #if CC_SUPPORT_CASCADED_SHADOW_MAP\n  #else\n  #endif\n#endif\n#if CC_RECEIVE_SHADOW\nvec2 CCGetShadowBias()\n{\n  #if USE_INSTANCING\n    return vec2(a_localShadowBias.x + cc_shadowWHPBInfo.w, a_localShadowBias.y + cc_shadowLPNNInfo.z);\n  #elif !USE_BATCHING\n    return vec2(cc_localShadowBias.x + cc_shadowWHPBInfo.w, cc_localShadowBias.y + cc_shadowLPNNInfo.z);\n  #else\n    return vec2(cc_shadowWHPBInfo.w, cc_shadowLPNNInfo.z);\n  #endif\n}\n#endif\n#if USE_VERTEX_COLOR\n  in vec4 a_color;\n  out vec4 v_color;\n#endif\nout vec3 v_position;\nout vec3 v_normal;\nout vec2 v_uv;\nout vec2 v_uv1;\n#if USE_NORMAL_MAP\n  out vec3 v_tangent;\n  out vec3 v_bitangent;\n#endif\n#if CC_RECEIVE_SHADOW\n  out mediump vec2 v_shadowBias;\n#endif\n#if HAS_SECOND_UV || CC_USE_LIGHTMAP\n  in vec2 a_texCoord1;\n#endif\n#if CC_USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  out vec3 v_luv;\n  void CCLightingMapCaclUV()\n  {\n  #if !USE_INSTANCING\n    v_luv.xy = cc_lightingMapUVParam.xy + a_texCoord1 * cc_lightingMapUVParam.z;\n    v_luv.z = cc_lightingMapUVParam.w;\n  #else\n    v_luv.xy = a_lightingMapUVParam.xy + a_texCoord1 * a_lightingMapUVParam.z;\n    v_luv.z = a_lightingMapUVParam.w;\n  #endif\n  }\n#endif\nvoid main () {\n  StandardVertInput In;\n  CCVertInput(In);\n  mat4 matWorld, matWorldIT;\n  CCGetWorldMatrixFull(matWorld, matWorldIT);\n  vec4 pos = matWorld * In.position;\n  v_position = pos.xyz;\n  v_normal = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz);\n  #if USE_TWOSIDE\n    vec3 viewDirect = normalize(cc_cameraPos.xyz - v_position);\n    v_normal *= dot(v_normal, viewDirect) < 0.0 ? -1.0 : 1.0;\n  #endif\n  #if USE_NORMAL_MAP\n    v_tangent = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n    v_bitangent = cross(v_normal, v_tangent) * In.tangent.w;\n  #endif\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  CC_TRANSFER_FOG(pos);\n  v_shadowPos = cc_matLightViewProj * pos;\n  #if CC_USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    CCLightingMapCaclUV();\n  #endif\n  #if CC_RECEIVE_SHADOW\n    v_shadowBias = CCGetShadowBias();\n  #endif\n  gl_Position = cc_matProj * (cc_matView * matWorld) * In.position;\n}","frag":"\nprecision highp float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_debug_view_mode;\n  mediump vec4 cc_debug_view_composite_pack_1;\n  mediump vec4 cc_debug_view_composite_pack_2;\n  mediump vec4 cc_debug_view_composite_pack_3;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(std140) uniform Constants {\n  vec4  tilingOffset;\n  vec4  diffuseColor;\n  vec4  specularColor;\n  vec4  emissive;\n  float alphaThreshold;\n  float shininessExponent;\n  float glossiness;\n  float metallic;\n  float normalScale;\n  float transparencyFactor;\n  float diffuseFactor;\n  float specularFactor;\n};\n#if CC_USE_FOG != 4\n  float LinearFog(vec4 pos, vec3 cameraPos, float fogStart, float fogEnd) {\n      vec4 wPos = pos;\n      float cam_dis = distance(cameraPos, wPos.xyz);\n      return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n  }\n  float ExpFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * fogDensity);\n      return f;\n  }\n  float ExpSquaredFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n      return f;\n  }\n  float LayeredFog(vec4 pos, vec3 cameraPos, float fogTop, float fogRange, float fogAtten) {\n      vec4 wPos = pos;\n      vec3 camWorldProj = cameraPos.xyz;\n      camWorldProj.y = 0.;\n      vec3 worldPosProj = wPos.xyz;\n      worldPosProj.y = 0.;\n      float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n      float fDeltaY, fDensityIntegral;\n      if (cameraPos.y > fogTop) {\n          if (wPos.y < fogTop) {\n              fDeltaY = (fogTop - wPos.y) / fogRange * 2.0;\n              fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n          }\n          else {\n              fDeltaY = 0.;\n              fDensityIntegral = 0.;\n          }\n      }\n      else {\n          if (wPos.y < fogTop) {\n              float fDeltaA = (fogTop - cameraPos.y) / fogRange * 2.;\n              float fDeltaB = (fogTop - wPos.y) / fogRange * 2.;\n              fDeltaY = abs(fDeltaA - fDeltaB);\n              fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n          }\n          else {\n              fDeltaY = abs(fogTop - cameraPos.y) / fogRange * 2.;\n              fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n          }\n      }\n      float fDensity;\n      if (fDeltaY != 0.) {\n          fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n      }\n      else {\n          fDensity = 0.;\n      }\n      float f = exp(-fDensity);\n      return f;\n  }\n#endif\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n#if CC_USE_FOG == 0\n\tfactor = LinearFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.y);\n#elif CC_USE_FOG == 1\n\tfactor = ExpFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 2\n\tfactor = ExpSquaredFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 3\n\tfactor = LayeredFog(pos, cc_cameraPos.xyz, cc_fogAdd.x, cc_fogAdd.y, cc_fogAdd.z);\n#else\n\tfactor = 1.0;\n#endif\n}\nvoid CC_APPLY_FOG_BASE(inout vec4 color, float factor) {\n\tcolor = vec4(mix(cc_fogColor.rgb, color.rgb, factor), color.a);\n}\n#if !CC_USE_ACCURATE_FOG\nin mediump float v_fog_factor;\n#endif\nvoid CC_APPLY_FOG(inout vec4 color) {\n#if !CC_USE_ACCURATE_FOG\n    CC_APPLY_FOG_BASE(color, v_fog_factor);\n#endif\n}\nvoid CC_APPLY_FOG(inout vec4 color, vec3 worldPos) {\n#if CC_USE_ACCURATE_FOG\n    float factor;\n    CC_TRANSFER_FOG_BASE(vec4(worldPos, 1.0), factor);\n#else\n    float factor = v_fog_factor;\n#endif\n    CC_APPLY_FOG_BASE(color, factor);\n}\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_WORLD_POS CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT + 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR CC_SURFACES_DEBUG_VIEW_WORLD_POS + 1\n#define CC_SURFACES_DEBUG_VIEW_FACE_SIDE CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR + 1\n#define CC_SURFACES_DEBUG_VIEW_UV0 CC_SURFACES_DEBUG_VIEW_FACE_SIDE + 1\n#define CC_SURFACES_DEBUG_VIEW_UV1 CC_SURFACES_DEBUG_VIEW_UV0 + 1\n#define CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP CC_SURFACES_DEBUG_VIEW_UV1 + 1\n#define CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP + 1\n#define CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT + 1\n#define CC_SURFACES_DEBUG_VIEW_BASE_COLOR CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR CC_SURFACES_DEBUG_VIEW_BASE_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSPARENCY CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_METALLIC CC_SURFACES_DEBUG_VIEW_TRANSPARENCY + 1\n#define CC_SURFACES_DEBUG_VIEW_ROUGHNESS CC_SURFACES_DEBUG_VIEW_METALLIC + 1\n#define CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY CC_SURFACES_DEBUG_VIEW_ROUGHNESS + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_ALL CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE CC_SURFACES_DEBUG_VIEW_DIRECT_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_ALL CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_EMISSIVE CC_SURFACES_DEBUG_VIEW_ENV_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_LIGHT_MAP CC_SURFACES_DEBUG_VIEW_EMISSIVE + 1\n#define CC_SURFACES_DEBUG_VIEW_SHADOW CC_SURFACES_DEBUG_VIEW_LIGHT_MAP + 1\n#define CC_SURFACES_DEBUG_VIEW_AO CC_SURFACES_DEBUG_VIEW_SHADOW + 1\n#define CC_SURFACES_DEBUG_VIEW_FOG CC_SURFACES_DEBUG_VIEW_AO + 1\n#define CC_SURFACES_DEBUG_VIEW_SINGLE 1\n#define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC 2\n#define IS_DEBUG_VIEW_LIGHTING_ENABLE_WITH_ALBEDO (cc_debug_view_mode.y > 0.0)\n#define IS_DEBUG_VIEW_MISC_ENABLE_CSM_LAYER_COLORATION (cc_debug_view_mode.z > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_DIFFUSE (cc_debug_view_composite_pack_1.x > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_SPECULAR (cc_debug_view_composite_pack_1.y > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_ENV_DIFFUSE (cc_debug_view_composite_pack_1.z > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_ENV_SPECULAR (cc_debug_view_composite_pack_1.w > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_EMISSIVE (cc_debug_view_composite_pack_2.x > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_LIGHT_MAP (cc_debug_view_composite_pack_2.y > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_SHADOW (cc_debug_view_composite_pack_2.z > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_AO (cc_debug_view_composite_pack_2.w > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_NORMAL_MAP (cc_debug_view_composite_pack_3.x > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_FOG (cc_debug_view_composite_pack_3.y > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TONE_MAPPING (cc_debug_view_composite_pack_3.z > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION (cc_debug_view_composite_pack_3.w > 0.0)\nvec3 SRGBToLinear (vec3 gamma) {\n#ifdef CC_USE_SURFACE_SHADER\n  #if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION) {\n      return gamma;\n    }\n  #endif\n#endif\n  return gamma * gamma;\n}\nvec3 LinearToSRGB(vec3 linear) {\n#ifdef CC_USE_SURFACE_SHADER\n  #if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION) {\n      return linear;\n    }\n  #endif\n#endif\n  return sqrt(linear);\n}\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n#if CC_SUPPORT_CASCADED_SHADOW_MAP\n  layout(std140) uniform CCCSM {\n    highp vec4 cc_csmViewDir0[4];\n    highp vec4 cc_csmViewDir1[4];\n    highp vec4 cc_csmViewDir2[4];\n    highp vec4 cc_csmAtlas[4];\n    highp mat4 cc_matCSMViewProj[4];\n    highp vec4 cc_csmProjDepthInfo[4];\n    highp vec4 cc_csmProjInfo[4];\n    highp vec4 cc_csmSplitsInfo;\n  };\n#endif\nfloat GetLinearDepthFromViewSpace(vec3 viewPos, float near, float far) {\n  float dist = length(viewPos);\n  return (dist - near) / (far - near);\n}\nvec3 RotationVecFromAxisY(vec3 v, float cosTheta, float sinTheta)\n{\n    vec3 result;\n    result.x = dot(v, vec3(cosTheta, 0.0, -sinTheta));\n    result.y = v.y;\n    result.z = dot(v, vec3(sinTheta, 0.0,  cosTheta));\n    return result;\n}\nfloat CCGetLinearDepth(vec3 worldPos, float viewSpaceBias) {\n\tvec4 viewPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  viewPos.z += viewSpaceBias;\n\treturn GetLinearDepthFromViewSpace(viewPos.xyz, cc_shadowNFLSInfo.x, cc_shadowNFLSInfo.y);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n\treturn CCGetLinearDepth(worldPos, 0.0);\n}\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotShadowMap;\n    highp float unpackHighpData (float mainPart, float modPart) {\n      highp float data = mainPart;\n      return data + modPart;\n    }\n    void packHighpData (out float mainPart, out float modPart, highp float data) {\n      mainPart = fract(data);\n      modPart = data - mainPart;\n    }\n    highp float unpackHighpData (float mainPart, float modPart, const float modValue) {\n      highp float data = mainPart * modValue;\n      return data + modPart * modValue;\n    }\n    void packHighpData (out float mainPart, out float modPart, highp float data, const float modValue) {\n      highp float divide = data / modValue;\n      mainPart = floor(divide);\n      modPart = (data - mainPart * modValue) / modValue;\n    }\n    highp vec2 unpackHighpData (vec2 mainPart, vec2 modPart) {\n      highp vec2 data = mainPart;\n      return data + modPart;\n    }\n    void packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data) {\n      mainPart = fract(data);\n      modPart = data - mainPart;\n    }\n    highp vec2 unpackHighpData (vec2 mainPart, vec2 modPart, const float modValue) {\n      highp vec2 data = mainPart * modValue;\n      return data + modPart * modValue;\n    }\n    void packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data, const float modValue) {\n      highp vec2 divide = data / modValue;\n      mainPart = floor(divide);\n      modPart = (data - mainPart * modValue) / modValue;\n    }\n    highp vec3 unpackHighpData (vec3 mainPart, vec3 modPart) {\n      highp vec3 data = mainPart;\n      return data + modPart;\n    }\n    void packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data) {\n      mainPart = fract(data);\n      modPart = data - mainPart;\n    }\n    highp vec3 unpackHighpData (vec3 mainPart, vec3 modPart, const float modValue) {\n      highp vec3 data = mainPart * modValue;\n      return data + modPart * modValue;\n    }\n    void packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data, const float modValue) {\n      highp vec3 divide = data / modValue;\n      mainPart = floor(divide);\n      modPart = (data - mainPart * modValue) / modValue;\n    }\n    highp vec4 unpackHighpData (vec4 mainPart, vec4 modPart) {\n      highp vec4 data = mainPart;\n      return data + modPart;\n    }\n    void packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data) {\n      mainPart = fract(data);\n      modPart = data - mainPart;\n    }\n    highp vec4 unpackHighpData (vec4 mainPart, vec4 modPart, const float modValue) {\n      highp vec4 data = mainPart * modValue;\n      return data + modPart * modValue;\n    }\n    void packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data, const float modValue) {\n      highp vec4 divide = data / modValue;\n      mainPart = floor(divide);\n      modPart = (data - mainPart * modValue) / modValue;\n    }\n  float NativePCFShadowFactorHard (vec3 shadowNDCPos, sampler2D shadowMap, vec2 shadowMapResolution)\n  {\n    #if CC_SHADOWMAP_FORMAT == 1\n      return step(shadowNDCPos.z, dot(texture(shadowMap, shadowNDCPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    #else\n      return step(shadowNDCPos.z, texture(shadowMap, shadowNDCPos.xy).x);\n    #endif\n  }\n  float NativePCFShadowFactorSoft (vec3 shadowNDCPos, sampler2D shadowMap, vec2 shadowMapResolution)\n  {\n    vec2 oneTap = 1.0 / shadowMapResolution;\n    vec2 shadowNDCPos_offset = shadowNDCPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    #if CC_SHADOWMAP_FORMAT == 1\n      block0 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos_offset.x, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos_offset.x, shadowNDCPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    #else\n      block0 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos.y)).x);\n      block1 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos_offset.x, shadowNDCPos.y)).x);\n      block2 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset.y)).x);\n      block3 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos_offset.x, shadowNDCPos_offset.y)).x);\n    #endif\n    float coefX   = mod(shadowNDCPos.x, oneTap.x) * shadowMapResolution.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(shadowNDCPos.y, oneTap.y) * shadowMapResolution.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float NativePCFShadowFactorSoft3X (vec3 shadowNDCPos, sampler2D shadowMap, vec2 shadowMapResolution)\n  {\n    vec2 oneTap = 1.0 / shadowMapResolution;\n    float shadowNDCPos_offset_L = shadowNDCPos.x - oneTap.x;\n    float shadowNDCPos_offset_R = shadowNDCPos.x + oneTap.x;\n    float shadowNDCPos_offset_U = shadowNDCPos.y - oneTap.y;\n    float shadowNDCPos_offset_D = shadowNDCPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    #if CC_SHADOWMAP_FORMAT == 1\n      block0 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    #else\n      block0 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos_offset_U)).x);\n      block1 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset_U)).x);\n      block2 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos_offset_U)).x);\n      block3 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos.y)).x);\n      block4 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos.y)).x);\n      block5 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos.y)).x);\n      block6 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos_offset_D)).x);\n      block7 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset_D)).x);\n      block8 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos_offset_D)).x);\n    #endif\n    float coefX = mod(shadowNDCPos.x, oneTap.x) * shadowMapResolution.x;\n    float coefY = mod(shadowNDCPos.y, oneTap.y) * shadowMapResolution.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\n  float NativePCFShadowFactorSoft5X (vec3 shadowNDCPos, sampler2D shadowMap, vec2 shadowMapResolution)\n  {\n    vec2 oneTap = 1.0 / shadowMapResolution;\n    vec2 twoTap = oneTap * 2.0;\n    vec2 offset1 = shadowNDCPos.xy + vec2(-twoTap.x, -twoTap.y);\n    vec2 offset2 = shadowNDCPos.xy + vec2(-oneTap.x, -twoTap.y);\n    vec2 offset3 = shadowNDCPos.xy + vec2(0.0, -twoTap.y);\n    vec2 offset4 = shadowNDCPos.xy + vec2(oneTap.x, -twoTap.y);\n    vec2 offset5 = shadowNDCPos.xy + vec2(twoTap.x, -twoTap.y);\n    vec2 offset6 = shadowNDCPos.xy + vec2(-twoTap.x, -oneTap.y);\n    vec2 offset7 = shadowNDCPos.xy + vec2(-oneTap.x, -oneTap.y);\n    vec2 offset8 = shadowNDCPos.xy + vec2(0.0, -oneTap.y);\n    vec2 offset9 = shadowNDCPos.xy + vec2(oneTap.x, -oneTap.y);\n    vec2 offset10 = shadowNDCPos.xy + vec2(twoTap.x, -oneTap.y);\n    vec2 offset11 = shadowNDCPos.xy + vec2(-twoTap.x, 0.0);\n    vec2 offset12 = shadowNDCPos.xy + vec2(-oneTap.x, 0.0);\n    vec2 offset13 = shadowNDCPos.xy + vec2(0.0, 0.0);\n    vec2 offset14 = shadowNDCPos.xy + vec2(oneTap.x, 0.0);\n    vec2 offset15 = shadowNDCPos.xy + vec2(twoTap.x, 0.0);\n    vec2 offset16 = shadowNDCPos.xy + vec2(-twoTap.x, oneTap.y);\n    vec2 offset17 = shadowNDCPos.xy + vec2(-oneTap.x, oneTap.y);\n    vec2 offset18 = shadowNDCPos.xy + vec2(0.0, oneTap.y);\n    vec2 offset19 = shadowNDCPos.xy + vec2(oneTap.x, oneTap.y);\n    vec2 offset20 = shadowNDCPos.xy + vec2(twoTap.x, oneTap.y);\n    vec2 offset21 = shadowNDCPos.xy + vec2(-twoTap.x, twoTap.y);\n    vec2 offset22 = shadowNDCPos.xy + vec2(-oneTap.x, twoTap.y);\n    vec2 offset23 = shadowNDCPos.xy + vec2(0.0, twoTap.y);\n    vec2 offset24 = shadowNDCPos.xy + vec2(oneTap.x, twoTap.y);\n    vec2 offset25 = shadowNDCPos.xy + vec2(twoTap.x, twoTap.y);\n    float block1, block2, block3, block4, block5, block6, block7, block8, block9, block10, block11, block12, block13, block14, block15, block16, block17, block18, block19, block20, block21, block22, block23, block24, block25;\n    #if CC_SHADOWMAP_FORMAT == 1\n      block1 = step(shadowNDCPos.z, dot(texture(shadowMap, offset1), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(shadowNDCPos.z, dot(texture(shadowMap, offset2), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(shadowNDCPos.z, dot(texture(shadowMap, offset3), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(shadowNDCPos.z, dot(texture(shadowMap, offset4), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(shadowNDCPos.z, dot(texture(shadowMap, offset5), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(shadowNDCPos.z, dot(texture(shadowMap, offset6), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(shadowNDCPos.z, dot(texture(shadowMap, offset7), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(shadowNDCPos.z, dot(texture(shadowMap, offset8), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block9 = step(shadowNDCPos.z, dot(texture(shadowMap, offset9), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block10 = step(shadowNDCPos.z, dot(texture(shadowMap, offset10), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block11 = step(shadowNDCPos.z, dot(texture(shadowMap, offset11), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block12 = step(shadowNDCPos.z, dot(texture(shadowMap, offset12), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block13 = step(shadowNDCPos.z, dot(texture(shadowMap, offset13), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block14 = step(shadowNDCPos.z, dot(texture(shadowMap, offset14), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block15 = step(shadowNDCPos.z, dot(texture(shadowMap, offset15), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block16 = step(shadowNDCPos.z, dot(texture(shadowMap, offset16), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block17 = step(shadowNDCPos.z, dot(texture(shadowMap, offset17), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block18 = step(shadowNDCPos.z, dot(texture(shadowMap, offset18), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block19 = step(shadowNDCPos.z, dot(texture(shadowMap, offset19), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block20 = step(shadowNDCPos.z, dot(texture(shadowMap, offset20), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block21 = step(shadowNDCPos.z, dot(texture(shadowMap, offset21), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block22 = step(shadowNDCPos.z, dot(texture(shadowMap, offset22), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block23 = step(shadowNDCPos.z, dot(texture(shadowMap, offset23), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block24 = step(shadowNDCPos.z, dot(texture(shadowMap, offset24), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block25 = step(shadowNDCPos.z, dot(texture(shadowMap, offset25), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    #else\n      block1 = step(shadowNDCPos.z, texture(shadowMap, offset1).x);\n      block2 = step(shadowNDCPos.z, texture(shadowMap, offset2).x);\n      block3 = step(shadowNDCPos.z, texture(shadowMap, offset3).x);\n      block4 = step(shadowNDCPos.z, texture(shadowMap, offset4).x);\n      block5 = step(shadowNDCPos.z, texture(shadowMap, offset5).x);\n      block6 = step(shadowNDCPos.z, texture(shadowMap, offset6).x);\n      block7 = step(shadowNDCPos.z, texture(shadowMap, offset7).x);\n      block8 = step(shadowNDCPos.z, texture(shadowMap, offset8).x);\n      block9 = step(shadowNDCPos.z, texture(shadowMap, offset9).x);\n      block10 = step(shadowNDCPos.z, texture(shadowMap, offset10).x);\n      block11 = step(shadowNDCPos.z, texture(shadowMap, offset11).x);\n      block12 = step(shadowNDCPos.z, texture(shadowMap, offset12).x);\n      block13 = step(shadowNDCPos.z, texture(shadowMap, offset13).x);\n      block14 = step(shadowNDCPos.z, texture(shadowMap, offset14).x);\n      block15 = step(shadowNDCPos.z, texture(shadowMap, offset15).x);\n      block16 = step(shadowNDCPos.z, texture(shadowMap, offset16).x);\n      block17 = step(shadowNDCPos.z, texture(shadowMap, offset17).x);\n      block18 = step(shadowNDCPos.z, texture(shadowMap, offset18).x);\n      block19 = step(shadowNDCPos.z, texture(shadowMap, offset19).x);\n      block20 = step(shadowNDCPos.z, texture(shadowMap, offset20).x);\n      block21 = step(shadowNDCPos.z, texture(shadowMap, offset21).x);\n      block22 = step(shadowNDCPos.z, texture(shadowMap, offset22).x);\n      block23 = step(shadowNDCPos.z, texture(shadowMap, offset23).x);\n      block24 = step(shadowNDCPos.z, texture(shadowMap, offset24).x);\n      block25 = step(shadowNDCPos.z, texture(shadowMap, offset25).x);\n    #endif\n    vec2 coef = fract(shadowNDCPos.xy * shadowMapResolution);\n    vec2 v1X1 = mix(vec2(block1, block6), vec2(block2, block7), coef.xx);\n    vec2 v1X2 = mix(vec2(block2, block7), vec2(block3, block8), coef.xx);\n    vec2 v1X3 = mix(vec2(block3, block8), vec2(block4, block9), coef.xx);\n    vec2 v1X4 = mix(vec2(block4, block9), vec2(block5, block10), coef.xx);\n    float v1 = mix(v1X1.x, v1X1.y, coef.y) + mix(v1X2.x, v1X2.y, coef.y) + mix(v1X3.x, v1X3.y, coef.y) + mix(v1X4.x, v1X4.y, coef.y);\n    vec2 v2X1 = mix(vec2(block6, block11), vec2(block7, block12), coef.xx);\n    vec2 v2X2 = mix(vec2(block7, block12), vec2(block8, block13), coef.xx);\n    vec2 v2X3 = mix(vec2(block8, block13), vec2(block9, block14), coef.xx);\n    vec2 v2X4 = mix(vec2(block9, block14), vec2(block10, block15), coef.xx);\n    float v2 = mix(v2X1.x, v2X1.y, coef.y) + mix(v2X2.x, v2X2.y, coef.y) + mix(v2X3.x, v2X3.y, coef.y) + mix(v2X4.x, v2X4.y, coef.y);\n    vec2 v3X1 = mix(vec2(block11, block16), vec2(block12, block17), coef.xx);\n    vec2 v3X2 = mix(vec2(block12, block17), vec2(block13, block18), coef.xx);\n    vec2 v3X3 = mix(vec2(block13, block18), vec2(block14, block19), coef.xx);\n    vec2 v3X4 = mix(vec2(block14, block19), vec2(block15, block20), coef.xx);\n    float v3 = mix(v3X1.x, v3X1.y, coef.y) + mix(v3X2.x, v3X2.y, coef.y) + mix(v3X3.x, v3X3.y, coef.y) + mix(v3X4.x, v3X4.y, coef.y);\n    vec2 v4X1 = mix(vec2(block16, block21), vec2(block17, block22), coef.xx);\n    vec2 v4X2 = mix(vec2(block17, block22), vec2(block18, block23), coef.xx);\n    vec2 v4X3 = mix(vec2(block18, block23), vec2(block19, block24), coef.xx);\n    vec2 v4X4 = mix(vec2(block19, block24), vec2(block20, block25), coef.xx);\n    float v4 = mix(v4X1.x, v4X1.y, coef.y) + mix(v4X2.x, v4X2.y, coef.y) + mix(v4X3.x, v4X3.y, coef.y) + mix(v4X4.x, v4X4.y, coef.y);\n    float fAvg = (v1 + v2 + v3 + v4) * 0.0625;\n    return fAvg;\n  }\n  bool GetShadowNDCPos(out vec3 shadowNDCPos, vec4 shadowPosWithDepthBias)\n  {\n  \tshadowNDCPos = shadowPosWithDepthBias.xyz / shadowPosWithDepthBias.w * 0.5 + 0.5;\n  \tif (shadowNDCPos.x < 0.0 || shadowNDCPos.x > 1.0 ||\n  \t\tshadowNDCPos.y < 0.0 || shadowNDCPos.y > 1.0 ||\n  \t\tshadowNDCPos.z < 0.0 || shadowNDCPos.z > 1.0) {\n  \t\treturn false;\n  \t}\n  \tshadowNDCPos.xy = cc_cameraPos.w == 1.0 ? vec2(shadowNDCPos.xy.x, 1.0 - shadowNDCPos.xy.y) : shadowNDCPos.xy;\n  \treturn true;\n  }\n  vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal, float normalBias, vec3 matViewDir0, vec3 matViewDir1, vec3 matViewDir2, vec2 projScaleXY)\n  {\n    vec4 newShadowPos = shadowPos;\n    if (normalBias > EPSILON_LOWP)\n    {\n      vec3 viewNormal = vec3(dot(matViewDir0, worldNormal), dot(matViewDir1, worldNormal), dot(matViewDir2, worldNormal));\n      if (viewNormal.z < 0.1)\n        newShadowPos.xy += viewNormal.xy * projScaleXY * normalBias * clamp(viewNormal.z, 0.001, 0.1);\n    }\n    return newShadowPos;\n  }\n  vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal, float normalBias, mat4 matLightView, vec2 projScaleXY)\n  {\n  \tvec4 newShadowPos = shadowPos;\n  \tif (normalBias > EPSILON_LOWP)\n  \t{\n  \t\tvec4 viewNormal = matLightView * vec4(worldNormal, 0.0);\n  \t\tif (viewNormal.z < 0.1)\n  \t\t\tnewShadowPos.xy += viewNormal.xy * projScaleXY * normalBias * clamp(viewNormal.z, 0.001, 0.1);\n  \t}\n  \treturn newShadowPos;\n  }\n  vec4 ApplyShadowDepthBias_Perspective(vec4 shadowPos, float viewspaceDepthBias)\n  {\n  \tvec3 viewSpacePos;\n  \tviewSpacePos.xy = shadowPos.xy * cc_shadowProjInfo.zw;\n  \tviewSpacePos.z = shadowPos.z * cc_shadowInvProjDepthInfo.x + shadowPos.w * cc_shadowInvProjDepthInfo.y;\n  \tviewSpacePos.xyz += cc_shadowProjDepthInfo.z * normalize(viewSpacePos.xyz) * viewspaceDepthBias;\n  \tvec4 clipSpacePos;\n  \tclipSpacePos.xy = viewSpacePos.xy * cc_shadowProjInfo.xy;\n  \tclipSpacePos.zw = viewSpacePos.z * cc_shadowProjDepthInfo.xz + vec2(cc_shadowProjDepthInfo.y, 0.0);\n  \t#if CC_SHADOWMAP_USE_LINEAR_DEPTH\n  \t\tclipSpacePos.z = GetLinearDepthFromViewSpace(viewSpacePos.xyz, cc_shadowNFLSInfo.x, cc_shadowNFLSInfo.y);\n  \t\tclipSpacePos.z = (clipSpacePos.z * 2.0 - 1.0) * clipSpacePos.w;\n  \t#endif\n  \treturn clipSpacePos;\n  }\n  vec4 ApplyShadowDepthBias_Orthographic(vec4 shadowPos, float viewspaceDepthBias, float projScaleZ, float projBiasZ)\n  {\n  \tfloat coeffA = projScaleZ;\n  \tfloat coeffB = projBiasZ;\n  \tfloat viewSpacePos_z = (shadowPos.z - coeffB) / coeffA;\n  \tviewSpacePos_z += viewspaceDepthBias;\n  \tvec4 result = shadowPos;\n  \tresult.z = viewSpacePos_z * coeffA + coeffB;\n  \treturn result;\n  }\n  vec4 ApplyShadowDepthBias_PerspectiveLinearDepth(vec4 shadowPos, float viewspaceDepthBias, vec3 worldPos)\n  {\n    shadowPos.z = CCGetLinearDepth(worldPos, viewspaceDepthBias) * 2.0 - 1.0;\n    shadowPos.z *= shadowPos.w;\n    return shadowPos;\n  }\n  float CCGetDirLightShadowFactorHard (vec4 shadowPosWithDepthBias) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorHard(shadowNDCPos, cc_shadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetDirLightShadowFactorSoft (vec4 shadowPosWithDepthBias) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft(shadowNDCPos, cc_shadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetDirLightShadowFactorSoft3X (vec4 shadowPosWithDepthBias) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft3X(shadowNDCPos, cc_shadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetDirLightShadowFactorSoft5X (vec4 shadowPosWithDepthBias) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft5X(shadowNDCPos, cc_shadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetSpotLightShadowFactorHard (vec4 shadowPosWithDepthBias, vec3 worldPos) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorHard(shadowNDCPos, cc_spotShadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetSpotLightShadowFactorSoft (vec4 shadowPosWithDepthBias, vec3 worldPos) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft(shadowNDCPos, cc_spotShadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetSpotLightShadowFactorSoft3X (vec4 shadowPosWithDepthBias, vec3 worldPos) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft3X(shadowNDCPos, cc_spotShadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetSpotLightShadowFactorSoft5X (vec4 shadowPosWithDepthBias, vec3 worldPos) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft5X(shadowNDCPos, cc_spotShadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCSpotShadowFactorBase(vec4 shadowPos, vec3 worldPos, vec2 shadowBias)\n  {\n    float pcf = cc_shadowWHPBInfo.z;\n    vec4 pos = vec4(1.0);\n    #if CC_SHADOWMAP_USE_LINEAR_DEPTH\n      pos = ApplyShadowDepthBias_PerspectiveLinearDepth(shadowPos, shadowBias.x, worldPos);\n    #else\n      pos = ApplyShadowDepthBias_Perspective(shadowPos, shadowBias.x);\n    #endif\n    if (pcf > 2.9) {\n      return CCGetSpotLightShadowFactorSoft5X(pos, worldPos);\n    }else if (pcf > 1.9) {\n      return CCGetSpotLightShadowFactorSoft3X(pos, worldPos);\n    }else if (pcf > 0.9) {\n      return CCGetSpotLightShadowFactorSoft(pos, worldPos);\n    }else {\n      return CCGetSpotLightShadowFactorHard(pos, worldPos);\n    }\n  }\n  float CCShadowFactorBase(vec4 shadowPos, vec3 N, vec2 shadowBias)\n  {\n    vec4 pos = ApplyShadowDepthBias_FaceNormal(shadowPos, N, shadowBias.y, cc_matLightView, cc_shadowProjInfo.xy);\n    pos = ApplyShadowDepthBias_Orthographic(pos, shadowBias.x, cc_shadowProjDepthInfo.x, cc_shadowProjDepthInfo.y);\n    float realtimeShadow = 1.0;\n    #if CC_DIR_SHADOW_PCF_TYPE == 3\n      realtimeShadow = CCGetDirLightShadowFactorSoft5X(pos);\n    #endif\n    #if CC_DIR_SHADOW_PCF_TYPE == 2\n      realtimeShadow =  CCGetDirLightShadowFactorSoft3X(pos);\n    #endif\n    #if CC_DIR_SHADOW_PCF_TYPE == 1\n      realtimeShadow = CCGetDirLightShadowFactorSoft(pos);\n    #endif\n    #if CC_DIR_SHADOW_PCF_TYPE == 0\n      realtimeShadow = CCGetDirLightShadowFactorHard(pos);\n    #endif\n    return mix(realtimeShadow, 1.0, cc_shadowNFLSInfo.w);\n  }\n  #if CC_SUPPORT_CASCADED_SHADOW_MAP\n    int CCGetCSMLevel(out vec4 csmPos, out vec4 shadowProjDepthInfo, out vec4 shadowProjInfo, out vec3 shadowViewDir0, out vec3 shadowViewDir1, out vec3 shadowViewDir2, vec3 worldPos) {\n      int layer = -1;\n      highp float layerThreshold = cc_csmViewDir0[0].w;\n      for (int i = 0; i < 4; i++) {\n        vec4 shadowPos = cc_matCSMViewProj[i] * vec4(worldPos.xyz, 1.0);\n        vec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\n        if (clipPos.x >= (0.0 + layerThreshold) && clipPos.x <= (1.0 - layerThreshold) &&\n            clipPos.y >= (0.0 + layerThreshold) && clipPos.y <= (1.0 - layerThreshold) &&\n            clipPos.z >= 0.0 && clipPos.z <= 1.0 && layer < 0) {\n          csmPos = cc_matCSMViewProj[i] * vec4(worldPos.xyz, 1.0);\n          csmPos.xy = csmPos.xy * cc_csmAtlas[i].xy + cc_csmAtlas[i].zw;\n          shadowProjDepthInfo = cc_csmProjDepthInfo[i];\n          shadowProjInfo = cc_csmProjInfo[i];\n          shadowViewDir0 = cc_csmViewDir0[i].xyz;\n          shadowViewDir1 = cc_csmViewDir1[i].xyz;\n          shadowViewDir2 = cc_csmViewDir2[i].xyz;\n          layer = i;\n        }\n      }\n      return layer;\n    }\n    float CCCSMFactorBase(vec3 worldPos, vec3 N, vec2 shadowBias)\n    {\n      vec4 csmPos = vec4(1.0);\n      vec4 shadowProjDepthInfo, shadowProjInfo;\n      vec3 shadowViewDir0, shadowViewDir1, shadowViewDir2;\n      int level = CCGetCSMLevel(csmPos, shadowProjDepthInfo, shadowProjInfo, shadowViewDir0, shadowViewDir1, shadowViewDir2, worldPos);\n      if (level < 0) { return 1.0; }\n      vec4 pos = ApplyShadowDepthBias_FaceNormal(csmPos, N, shadowBias.y, shadowViewDir0, shadowViewDir1, shadowViewDir2, shadowProjInfo.xy);\n      pos = ApplyShadowDepthBias_Orthographic(pos, shadowBias.x, shadowProjDepthInfo.x, shadowProjDepthInfo.y);\n      float realtimeShadow = 1.0;\n      #if CC_DIR_SHADOW_PCF_TYPE == 3\n        realtimeShadow = CCGetDirLightShadowFactorSoft5X(pos);\n      #endif\n      #if CC_DIR_SHADOW_PCF_TYPE == 2\n        realtimeShadow = CCGetDirLightShadowFactorSoft3X(pos);\n      #endif\n      #if CC_DIR_SHADOW_PCF_TYPE == 1\n        realtimeShadow = CCGetDirLightShadowFactorSoft(pos);\n      #endif\n      #if CC_DIR_SHADOW_PCF_TYPE == 0\n        realtimeShadow = CCGetDirLightShadowFactorHard(pos);\n      #endif\n      return mix(realtimeShadow, 1.0, cc_shadowNFLSInfo.w);\n    }\n  #else\n    int CCGetCSMLevel(out vec4 csmPos, out vec4 shadowProjDepthInfo, out vec4 shadowProjInfo, out vec3 shadowViewDir0, out vec3 shadowViewDir1, out vec3 shadowViewDir2, vec3 worldPos) {\n      return -1;\n    }\n    float CCCSMFactorBase(vec3 worldPos, vec3 N, vec2 shadowBias) {\n      vec4 shadowPos = cc_matLightViewProj * vec4(worldPos, 1.0);\n      return CCShadowFactorBase(shadowPos, N, shadowBias);\n    }\n  #endif\n#endif\n#if CC_USE_IBL\n  uniform samplerCube cc_environment;\n  vec4 fragTextureLod (sampler2D tex, vec2 coord, float lod) {\n      return textureLod(tex, coord, lod);\n  }\n  vec4 fragTextureLod (samplerCube tex, vec3 coord, float lod) {\n      return textureLod(tex, coord, lod);\n  }\n  vec3 unpackRGBE (vec4 rgbe) {\n    return rgbe.rgb * pow(1.1, rgbe.a * 255.0 - 128.0);\n  }\n  #if CC_USE_DIFFUSEMAP\n    uniform samplerCube cc_diffuseMap;\n  #endif\n#endif\nfloat GGXMobile (float roughness, float NoH, vec3 H, vec3 N) {\n  vec3 NxH = cross(N, H);\n  float OneMinusNoHSqr = dot(NxH, NxH);\n  float a = roughness * roughness;\n  float n = NoH * a;\n  float p = a / (OneMinusNoHSqr + n * n);\n  return p * p;\n}\nfloat CalcSpecular (float roughness, float NoH, vec3 H, vec3 N) {\n  return (roughness * 0.25 + 0.25) * GGXMobile(roughness, NoH, H, N);\n}\nvec3 BRDFApprox (vec3 specular, float roughness, float NoV) {\n  const vec4 c0 = vec4(-1.0, -0.0275, -0.572, 0.022);\n  const vec4 c1 = vec4(1.0, 0.0425, 1.04, -0.04);\n  vec4 r = roughness * c0 + c1;\n  float a004 = min(r.x * r.x, exp2(-9.28 * NoV)) * r.x + r.y;\n  vec2 AB = vec2(-1.04, 1.04) * a004 + r.zw;\n  AB.y *= clamp(50.0 * specular.g, 0.0, 1.0);\n  return specular * AB.x + AB.y;\n}\n#if USE_REFLECTION_DENOISE\n  vec3 GetEnvReflectionWithMipFiltering(vec3 R, float roughness, float mipCount, float denoiseIntensity) {\n    #if CC_USE_IBL\n    \tfloat mip = roughness * (mipCount - 1.0);\n    \tfloat delta = (dot(dFdx(R), dFdy(R))) * 1000.0;\n    \tfloat mipBias = mix(0.0, 5.0, clamp(delta, 0.0, 1.0));\n    \tvec4 biased = fragTextureLod(cc_environment, R, mip + mipBias);\n     \tvec4 filtered = texture(cc_environment, R);\n      #if CC_USE_IBL == 2\n      \tbiased.rgb = unpackRGBE(biased);\n      \tfiltered.rgb = unpackRGBE(filtered);\n      #else\n      \tbiased.rgb = SRGBToLinear(biased.rgb);\n      \tfiltered.rgb = SRGBToLinear(filtered.rgb);\n      #endif\n      return mix(biased.rgb, filtered.rgb, denoiseIntensity);\n    #else\n      return vec3(0.0, 0.0, 0.0);\n    #endif\n  }\n#endif\nstruct StandardSurface {\n  vec4 albedo;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    vec3 position, position_fract_part;\n    #else\n    vec3 position;\n    #endif\n  vec3 normal;\n  vec3 emissive;\n  vec3 lightmap;\n  float lightmap_test;\n  float roughness;\n  float metallic;\n  float occlusion;\n  float specularIntensity;\n  #if CC_RECEIVE_SHADOW\n    vec2 shadowBias;\n  #endif\n};\nvec4 CCStandardShadingBase (StandardSurface s, vec4 shadowPos) {\n  vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n  vec3 specular = mix(vec3(0.08 * s.specularIntensity), s.albedo.rgb, s.metallic);\n  vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n  vec3 N = normalize(s.normal);\n  vec3 V = normalize(cc_cameraPos.xyz - position);\n  vec3 L = normalize(-cc_mainLitDir.xyz);\n  float NL = max(dot(N, L), 0.0);\n  float shadow = 1.0;\n  #if CC_RECEIVE_SHADOW && CC_SHADOW_TYPE == 2\n    if (NL > 0.0 && cc_mainLitDir.w > 0.0) {\n      if (cc_shadowLPNNInfo.w > 0.0) {\n        #if CC_DIR_LIGHT_SHADOW_TYPE == 2\n          shadow = CCCSMFactorBase(position, N, s.shadowBias);\n        #endif\n      } else {\n        #if CC_DIR_LIGHT_SHADOW_TYPE == 1\n          shadow = CCShadowFactorBase(shadowPos, N, s.shadowBias);\n        #endif\n      }\n    }\n  #endif\n  #if CC_USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    vec3 lightmap = s.lightmap.rgb;\n    #if CC_USE_HDR\n        lightmap.rgb *= cc_exposure.w * cc_exposure.x;\n    #endif\n    vec3 finalColor = diffuse * lightmap.rgb * shadow;\n  #else\n    float NV = max(abs(dot(N, V)), 0.0);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 H = normalize(L + V);\n    float NH = max(dot(N, H), 0.0);\n    vec3 finalColor = NL * cc_mainLitColor.rgb * cc_mainLitColor.w;\n    vec3 diffuseContrib = diffuse / PI;\n    vec3 specularContrib = specular * CalcSpecular(s.roughness, NH, H, N);\n    vec3 dirlightContrib = (diffuseContrib + specularContrib);\n    dirlightContrib *= shadow;\n    finalColor *= dirlightContrib;\n  #endif\n  float fAmb = 0.5 - N.y * 0.5;\n  vec3 ambDiff = mix(cc_ambientSky.rgb, cc_ambientGround.rgb, fAmb);\n  #if CC_USE_IBL\n    #if CC_USE_DIFFUSEMAP\n      vec4 diffuseMap = texture(cc_diffuseMap, N);\n      #if CC_USE_DIFFUSEMAP == 2\n        ambDiff = unpackRGBE(diffuseMap);\n      #else\n        ambDiff = SRGBToLinear(diffuseMap.rgb);\n      #endif\n    #endif\n    vec3 R = normalize(reflect(-V, N));\n    vec3 rotationDir = RotationVecFromAxisY(R.xyz, cc_surfaceTransform.z, cc_surfaceTransform.w);\n    #if USE_REFLECTION_DENOISE && !CC_IBL_CONVOLUTED\n      vec3 env = GetEnvReflectionWithMipFiltering(rotationDir, s.roughness, cc_ambientGround.w, 0.6);\n    #else\n      vec4 envmap = fragTextureLod(cc_environment, rotationDir, s.roughness * (cc_ambientGround.w - 1.0));\n      #if CC_USE_IBL == 2\n        vec3 env = unpackRGBE(envmap);\n      #else\n        vec3 env = SRGBToLinear(envmap.rgb);\n      #endif\n    #endif\n    finalColor += env * cc_ambientSky.w * specular * s.occlusion;\n  #endif\n  finalColor += ambDiff.rgb * cc_ambientSky.w * diffuse * s.occlusion;\n  finalColor += s.emissive;\n  return vec4(finalColor, s.albedo.a);\n}\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = ACESToneMap(color.rgb);\n  #endif\n  color.rgb = LinearToSRGB(color.rgb);\n  return color;\n}\nin highp vec4 v_shadowPos;\n#if CC_RECEIVE_SHADOW && CC_SHADOW_TYPE == 2\n#endif\nbool GetMetallicAlbedoFromDiffuseSpecularWithoutColor(out float metallic, out vec3 albedo, vec3 diffuse, vec3 specular, float f0 )\n{\n\tfloat d = max(max(diffuse.x, diffuse.y), diffuse.z);\n\tvec3 normalizedColor = diffuse / (d + (d < EPSILON_LOWP ? EPSILON_LOWP : 0.0));\n\tnormalizedColor = d < EPSILON_LOWP ? specular : normalizedColor;\n\tfloat s = max(max(specular.x, specular.y), specular.z);\n\tfloat delta = (d + s) * (d + s)  - 4.0 * f0 * d;\n\tfloat deltaSqrt = sqrt(max(0.0, delta));\n\tfloat solverMetallic = (-d - s + 2.0 * f0 + deltaSqrt) / (2.0 * f0);\n\tvec3 solverAlbedo = (d + s) * normalizedColor - vec3(f0 * (1.0 - solverMetallic));\n\tbool isValidSolver = delta >= 0.0;\n\tmetallic = isValidSolver ? clamp(solverMetallic, 0.0, 1.0) : 0.0;\n\talbedo = isValidSolver ? vec3(max(0.0, solverAlbedo.x), max(0.0, solverAlbedo.y), max(0.0, solverAlbedo.z)) : diffuse;\n\treturn isValidSolver;\n}\n#if CC_USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  in vec3 v_luv;\n  uniform sampler2D cc_lightingMap;\n#endif\nin vec3 v_position;\nin vec2 v_uv;\nin vec2 v_uv1;\nin vec3 v_normal;\n#if CC_RECEIVE_SHADOW\n  in mediump vec2 v_shadowBias;\n#endif\n#define DCC_APP_OTHERS 0\n#define DCC_APP_AUTODESK 1\n#define DCC_APP_BLENDER 2\n#define DCC_APP_CINEMA4D 3\n#define DCC_APP_GLTF 4\n#if USE_SHININESS_MAP\n  uniform sampler2D shininessExponentMap;\n#endif\n#if USE_SPECULAR_GLOSSINESS_MAP\n  uniform sampler2D specularGlossinessMap;\n#endif\n#if USE_SPECULAR_MAP\n  uniform sampler2D specularMap;\n#endif\n #if USE_METALLIC_MAP\n  uniform sampler2D metallicMap;\n#endif\n#if USE_VERTEX_COLOR\n  in vec4 v_color;\n#endif\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_TRANSPARENCY_MAP\n  uniform sampler2D transparencyMap;\n#endif\n#if USE_NORMAL_MAP\n  in vec3 v_tangent;\n  in vec3 v_bitangent;\n  uniform sampler2D normalMap;\n#endif\n#if USE_EMISSIVE_MAP\n  uniform sampler2D emissiveMap;\n#endif\nfloat discolor(vec3 srcColor) {\n  return dot(GRAY_VECTOR, srcColor);\n}\nfloat convertShininessExponent(float shininessExp)\n{\n  #if DCC_APP_NAME == DCC_APP_BLENDER\n    float glossiness = clamp(sqrt(shininessExp) * 0.1, 0.0, 0.95);\n  #elif DCC_APP_NAME == DCC_APP_AUTODESK\n    float l2 = clamp(log(shininessExp + EPSILON) * 0.1442695 , 0.0, 1.0);\n    float glossiness = pow(l2, 0.5);\n  #else\n    float glossiness = clamp(log(shininessExp + EPSILON) * 0.1442695 , 0.0, 1.0);\n  #endif\n    return glossiness;\n}\nfloat getSpecularIntensityFromRoughness(float roughness)\n{\n  #if DCC_APP_NAME == DCC_APP_BLENDER\n    float specularIntensityMultiplier = mix(1.0, 5.0, roughness);\n  #elif DCC_APP_NAME == DCC_APP_CINEMA4D\n    float specularIntensityMultiplier = mix(1.0, 50.0, roughness);\n  #elif DCC_APP_NAME == DCC_APP_AUTODESK\n    float specularIntensityMultiplier = mix(1.0, 20.0, roughness);\n  #else\n    float specularIntensityMultiplier = 1.0;\n  #endif\n    return specularIntensityMultiplier;\n}\nvec4 getSpecularColorAndFactor()\n{\n  vec3 inSpecular = specularColor.rgb;\n  #if USE_SPECULAR_GLOSSINESS_MAP\n    inSpecular = SRGBToLinear(texture(specularGlossinessMap, TEXTURE_UV).rgb);\n  #endif\n  #if USE_SPECULAR_MAP\n      vec4 specularTex = texture(specularMap, TEXTURE_UV);\n      specularTex.rgb = SRGBToLinear(specularTex.rgb);\n      inSpecular = specularTex.rgb;\n  #endif\n  return vec4(inSpecular, specularFactor);\n}\nvoid surf (out StandardSurface s) {\n  vec4 baseColor = vec4(1.0);\n  #if USE_VERTEX_COLOR\n    baseColor.rgb *= SRGBToLinear(v_color.rgb);\n    baseColor.a *= v_color.a;\n  #endif\n  #if USE_ALBEDO_MAP\n    vec4 texColor = texture(albedoMap, TEXTURE_UV);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    texColor.a *= transparencyFactor;\n    baseColor *= texColor;\n  #else\n    baseColor *= diffuseColor;\n  #endif\n  baseColor.rgb *= diffuseFactor;\n  #if USE_TRANSPARENCY_MAP\n    baseColor.a = texture(transparencyMap, TEXTURE_UV).a;\n  #endif\n  #if USE_ALPHA_TEST\n    if (baseColor.a < alphaThreshold) discard;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    s.shadowBias = v_shadowBias;\n  #endif\n  vec4 specularColorAndFactor = getSpecularColorAndFactor();\n  float inGlossiness = 0.0, inSpecularIntensity = specularColorAndFactor.w;\n  #if HAS_EXPORTED_GLOSSINESS\n    #if USE_SPECULAR_GLOSSINESS_MAP\n      inGlossiness = 1.0 - texture(specularGlossinessMap, TEXTURE_UV).a;\n    #else\n      inGlossiness = glossiness;\n    #endif\n  #else\n    #if USE_SHININESS_MAP\n      #if USE_SHININESS_MAP_CHANNEL\n        inGlossiness = 1.0 - texture(shininessExponentMap, TEXTURE_UV).SHININESS_MAP_CHANNEL;\n      #else\n        inGlossiness = 1.0 - discolor(texture(shininessExponentMap, TEXTURE_UV).rgb);\n      #endif\n    #else\n      inGlossiness = convertShininessExponent(shininessExponent);\n    #endif\n    inSpecularIntensity *= getSpecularIntensityFromRoughness(1.0 - inGlossiness);\n  #endif\n  float inMetallic = 0.0;\n  vec4 albedo = baseColor;\n  #if HAS_EXPORTED_METALLIC\n    inMetallic = metallic;\n    float spec = specularFactor;\n    #if USE_SPECULAR_MAP\n      spec = dot(GRAY_VECTOR, texture(specularMap, TEXTURE_UV).rgb);\n    #endif\n    inSpecularIntensity *= spec * 0.5;\n  #else\n    GetMetallicAlbedoFromDiffuseSpecularWithoutColor(inMetallic, albedo.rgb, baseColor.rgb, specularColorAndFactor.rgb, 0.04);\n    inSpecularIntensity *= inMetallic;\n  #endif\n  s.normal = v_normal;\n  #if USE_NORMAL_MAP\n    vec3 nmmp = texture(normalMap, TEXTURE_UV).xyz - vec3(0.5);\n    s.normal =\n      (nmmp.x * normalScale) * normalize(v_tangent) +\n      (nmmp.y * normalScale) * normalize(v_bitangent) +\n      nmmp.z * normalize(s.normal);\n  #endif\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    packHighpData(s.position, s.position_fract_part, v_position);\n    #else\n    s.position = v_position;\n    #endif\n  s.albedo = albedo;\n  s.occlusion = 1.0;\n  s.roughness = 1.0 - inGlossiness;\n  s.metallic = inMetallic;\n  s.specularIntensity = inSpecularIntensity * 0.5;\n  s.emissive = vec3(0.0);\n#if USE_EMISSIVE_MAP\n  s.emissive = texture(emissiveMap, TEXTURE_UV).xyz;\n#endif\n  #if CC_USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    vec4 lightColor = texture(cc_lightingMap, v_luv.xy);\n    s.lightmap = lightColor.xyz * v_luv.z;\n    s.lightmap_test = v_luv.z;\n  #endif\n}\n#if CC_FORWARD_ADD\n  #if CC_PIPELINE_TYPE == 0\n    #define LIGHTS_PER_PASS 1\n  #else\n    #define LIGHTS_PER_PASS 10\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  layout(std140) uniform CCForwardLight {\n    highp vec4 cc_lightPos[LIGHTS_PER_PASS];\n    vec4 cc_lightColor[LIGHTS_PER_PASS];\n    vec4 cc_lightSizeRangeAngle[LIGHTS_PER_PASS];\n    vec4 cc_lightDir[LIGHTS_PER_PASS];\n  };\n  #endif\n  float SmoothDistAtt (float distSqr, float invSqrAttRadius) {\n    float factor = distSqr * invSqrAttRadius;\n    float smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\n    return smoothFactor * smoothFactor;\n  }\n  float GetDistAtt (float distSqr, float invSqrAttRadius) {\n    float attenuation = 1.0 / max(distSqr, 0.01*0.01);\n    attenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\n    return attenuation;\n  }\n  float GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\n    float cd = dot(litDir, L);\n    float attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\n    return (attenuation * attenuation);\n  }\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  vec4 CCStandardShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 position;\n      #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n      position = unpackHighpData(s.position, s.position_fract_part);\n      #else\n      position = s.position;\n      #endif\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / PI;\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    float NV = max(abs(dot(N, V)), 0.0);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    int numLights = CC_PIPELINE_TYPE == 0 ? LIGHTS_PER_PASS : int(cc_lightDir[0].w);\n    for (int i = 0; i < LIGHTS_PER_PASS; i++) {\n      if (i >= numLights) break;\n      vec3 SLU = cc_lightPos[i].xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.0);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = cc_lightSizeRangeAngle[i].x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = litRadiusSqr / max(litRadiusSqr, distSqr);\n      float attRadiusSqrInv = 1.0 / max(cc_lightSizeRangeAngle[i].y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (cc_lightPos[i].w > 0.0) {\n        float cosInner = max(dot(-cc_lightDir[i].xyz, SL), 0.01);\n        float cosOuter = cc_lightSizeRangeAngle[i].z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -cc_lightDir[i].xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = cc_lightColor[i].rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW  && CC_SHADOW_TYPE == 2\n        if (cc_lightPos[i].w > 0.0 && cc_lightSizeRangeAngle[i].w > 0.0) {\n          shadow = CCSpotShadowFactorBase(shadowPos, position, s.shadowBias);\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * cc_lightColor[i].w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n  layout(std430, binding = 4) readonly buffer b_ccLightsBuffer { vec4 b_ccLights[]; };\n  layout(std430, binding = 5) readonly buffer b_clusterLightIndicesBuffer { uint b_clusterLightIndices[]; };\n  layout(std430, binding = 6) readonly buffer b_clusterLightGridBuffer { uvec4 b_clusterLightGrid[]; };\n  struct CCLight\n  {\n    vec4 cc_lightPos;\n    vec4 cc_lightColor;\n    vec4 cc_lightSizeRangeAngle;\n    vec4 cc_lightDir;\n  };\n  struct Cluster\n  {\n    vec3 minBounds;\n    vec3 maxBounds;\n  };\n  struct LightGrid\n  {\n    uint offset;\n    uint ccLights;\n  };\n  CCLight getCCLight(uint i)\n  {\n    CCLight light;\n    light.cc_lightPos = b_ccLights[4u * i + 0u];\n    light.cc_lightColor = b_ccLights[4u * i + 1u];\n    light.cc_lightSizeRangeAngle = b_ccLights[4u * i + 2u];\n    light.cc_lightDir = b_ccLights[4u * i + 3u];\n    return light;\n  }\n  LightGrid getLightGrid(uint cluster)\n  {\n    uvec4 gridvec = b_clusterLightGrid[cluster];\n    LightGrid grid;\n    grid.offset = gridvec.x;\n    grid.ccLights = gridvec.y;\n    return grid;\n  }\n  uint getGridLightIndex(uint start, uint offset)\n  {\n    return b_clusterLightIndices[start + offset];\n  }\n  uint getClusterZIndex(vec4 worldPos)\n  {\n    float scale = float(24) / log(cc_nearFar.y / cc_nearFar.x);\n    float bias = -(float(24) * log(cc_nearFar.x) / log(cc_nearFar.y / cc_nearFar.x));\n    float eyeDepth = -(cc_matView * worldPos).z;\n    uint zIndex = uint(max(log(eyeDepth) * scale + bias, 0.0));\n    return zIndex;\n  }\n  uint getClusterIndex(vec4 fragCoord, vec4 worldPos)\n  {\n    uint zIndex = getClusterZIndex(worldPos);\n    float clusterSizeX = ceil(cc_viewPort.z / float(16));\n    float clusterSizeY = ceil(cc_viewPort.w / float(8));\n    uvec3 indices = uvec3(uvec2(fragCoord.xy / vec2(clusterSizeX, clusterSizeY)), zIndex);\n    uint cluster = (16u * 8u) * indices.z + 16u * indices.y + indices.x;\n    return cluster;\n  }\n  vec4 CCClusterShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / PI;\n    vec3 position;\n      #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n      position = unpackHighpData(s.position, s.position_fract_part);\n      #else\n      position = s.position;\n      #endif\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    float NV = max(abs(dot(N, V)), 0.001);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    uint cluster = getClusterIndex(gl_FragCoord, vec4(position, 1.0));\n    LightGrid grid = getLightGrid(cluster);\n    uint numLights = grid.ccLights;\n    for (uint i = 0u; i < 100u; i++) {\n      if (i >= numLights) break;\n      uint lightIndex = getGridLightIndex(grid.offset, i);\n      CCLight light = getCCLight(lightIndex);\n      vec3 SLU = light.cc_lightPos.xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.001);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = light.cc_lightSizeRangeAngle.x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = PI * (litRadiusSqr / max(litRadiusSqr , distSqr));\n      float attRadiusSqrInv = 1.0 / max(light.cc_lightSizeRangeAngle.y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (light.cc_lightPos.w > 0.0) {\n        float cosInner = max(dot(-light.cc_lightDir.xyz, SL), 0.01);\n        float cosOuter = light.cc_lightSizeRangeAngle.z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -light.cc_lightDir.xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = light.cc_lightColor.rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW && CC_SHADOW_TYPE == 2\n        if (light.cc_lightPos.w > 0.0) {\n          shadow = CCSpotShadowFactorBase(shadowPos, position, s.shadowBias);\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * light.cc_lightColor.w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  #endif\n  layout(location = 0) out vec4 fragColorX;\n  void main () {\n    StandardSurface s; surf(s);\n    #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n    vec4 color = CCClusterShadingAdditive(s, v_shadowPos);\n    #else\n    vec4 color = CCStandardShadingAdditive(s, v_shadowPos);\n    #endif\n    fragColorX = CCFragOutput(color);\n  }\n#elif (CC_PIPELINE_TYPE == 0 || CC_FORCE_FORWARD_SHADING)\n  layout(location = 0) out vec4 fragColorX;\n  void main () {\n    StandardSurface s; surf(s);\n    vec4 color = CCFragOutput(CCStandardShadingBase(s, v_shadowPos));\n    #if CC_USE_FOG != 4\n      CC_APPLY_FOG(color, s.position.xyz);\n    #endif\n    fragColorX = color;\n  }\n#elif CC_PIPELINE_TYPE == 1\n  vec2 signNotZero(vec2 v) {\n    return vec2((v.x >= 0.0) ? +1.0 : -1.0, (v.y >= 0.0) ? +1.0 : -1.0);\n  }\n  vec2 float32x3_to_oct(in vec3 v) {\n    vec2 p = v.xy * (1.0 / (abs(v.x) + abs(v.y) + abs(v.z)));\n    return (v.z <= 0.0) ? ((1.0 - abs(p.yx)) * signNotZero(p)) : p;\n  }\n  layout(location = 0) out vec4 fragColor0;\n  layout(location = 1) out vec4 fragColor1;\n  layout(location = 2) out vec4 fragColor2;\n  void main () {\n    StandardSurface s; surf(s);\n    fragColor0 = s.albedo;\n    fragColor1 = vec4(float32x3_to_oct(s.normal), s.roughness, s.metallic);\n    fragColor2 = vec4(s.emissive, s.occlusion);\n  }\n#endif"},"glsl1":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\n#if CC_USE_SKINNING\n    attribute vec4 a_joints;\n  attribute vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    attribute highp vec4 a_jointAnimInfo;\n  #endif\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    attribute vec2 a_localShadowBias;\n  #endif\n#elif USE_BATCHING\n  attribute float a_dyn_batch_id;\n#endif\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\n#if CC_USE_MORPH\n  uniform vec4 cc_displacementWeights[15];\n  uniform vec4 cc_displacementTextureInfo;\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n  #endif\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n        return texture2D(tex, uv);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture2D(tex, x)),\n        decode32(texture2D(tex, y)),\n        decode32(texture2D(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n  vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n  vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n  vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n  }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    uniform highp vec4 cc_jointTextureInfo;\n    uniform highp vec4 cc_jointAnimInfo;\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      uniform highp sampler2D cc_realtimeJoint;\n    #else\n      uniform highp vec4 cc_joints[CC_JOINT_UNIFORM_CAPACITY * 3];\n    #endif\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n        mat4 getJointMatrix (float i) {\n          float x = i;\n          vec4 v1 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 0.5 / 3.0));\n          vec4 v2 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 1.5 / 3.0));\n          vec4 v3 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 2.5 / 3.0));\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #else\n        mat4 getJointMatrix (float i) {\n         float x = 4.0 * i;\n          vec4 v1 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 0.5 / 3.0)))\n          );\n          vec4 v2 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 1.5 / 3.0)))\n          );\n          vec4 v3 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 2.5 / 3.0)))\n          );\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #endif\n    #else\n      mat4 getJointMatrix (float i) {\n        int idx = int(i);\n        vec4 v1 = cc_joints[idx * 3];\n        vec4 v2 = cc_joints[idx * 3 + 1];\n        vec4 v3 = cc_joints[idx * 3 + 2];\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matProj;\n  uniform highp vec4 cc_cameraPos;\n  uniform mediump vec4 cc_fogBase;\n  uniform mediump vec4 cc_fogAdd;\n#if !USE_INSTANCING\n  #if USE_BATCHING\n    uniform highp mat4 cc_matWorlds[10];\n  #else\n    uniform highp mat4 cc_matWorld;\n  uniform highp mat4 cc_matWorldIT;\n  uniform highp vec4 cc_lightingMapUVParam;\n  uniform highp vec4 cc_localShadowBias;\n  #endif\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\n    uniform vec4 tilingOffset;\n#if CC_USE_FOG != 4\n  float LinearFog(vec4 pos, vec3 cameraPos, float fogStart, float fogEnd) {\n      vec4 wPos = pos;\n      float cam_dis = distance(cameraPos, wPos.xyz);\n      return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n  }\n  float ExpFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * fogDensity);\n      return f;\n  }\n  float ExpSquaredFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n      return f;\n  }\n  float LayeredFog(vec4 pos, vec3 cameraPos, float fogTop, float fogRange, float fogAtten) {\n      vec4 wPos = pos;\n      vec3 camWorldProj = cameraPos.xyz;\n      camWorldProj.y = 0.;\n      vec3 worldPosProj = wPos.xyz;\n      worldPosProj.y = 0.;\n      float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n      float fDeltaY, fDensityIntegral;\n      if (cameraPos.y > fogTop) {\n          if (wPos.y < fogTop) {\n              fDeltaY = (fogTop - wPos.y) / fogRange * 2.0;\n              fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n          }\n          else {\n              fDeltaY = 0.;\n              fDensityIntegral = 0.;\n          }\n      }\n      else {\n          if (wPos.y < fogTop) {\n              float fDeltaA = (fogTop - cameraPos.y) / fogRange * 2.;\n              float fDeltaB = (fogTop - wPos.y) / fogRange * 2.;\n              fDeltaY = abs(fDeltaA - fDeltaB);\n              fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n          }\n          else {\n              fDeltaY = abs(fogTop - cameraPos.y) / fogRange * 2.;\n              fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n          }\n      }\n      float fDensity;\n      if (fDeltaY != 0.) {\n          fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n      }\n      else {\n          fDensity = 0.;\n      }\n      float f = exp(-fDensity);\n      return f;\n  }\n#endif\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n#if CC_USE_FOG == 0\n\tfactor = LinearFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.y);\n#elif CC_USE_FOG == 1\n\tfactor = ExpFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 2\n\tfactor = ExpSquaredFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 3\n\tfactor = LayeredFog(pos, cc_cameraPos.xyz, cc_fogAdd.x, cc_fogAdd.y, cc_fogAdd.z);\n#else\n\tfactor = 1.0;\n#endif\n}\n#if !CC_USE_ACCURATE_FOG\nvarying mediump float v_fog_factor;\n#endif\nvoid CC_TRANSFER_FOG(vec4 pos) {\n#if !CC_USE_ACCURATE_FOG\n    CC_TRANSFER_FOG_BASE(pos, v_fog_factor);\n#endif\n}\nvarying highp vec4 v_shadowPos;\nuniform highp mat4 cc_matLightViewProj;\n  uniform mediump vec4 cc_shadowWHPBInfo;\n  uniform mediump vec4 cc_shadowLPNNInfo;\n#if CC_SUPPORT_CASCADED_SHADOW_MAP\n  #endif\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotShadowMap;\n  #if CC_SUPPORT_CASCADED_SHADOW_MAP\n  #else\n  #endif\n#endif\n#if CC_RECEIVE_SHADOW\nvec2 CCGetShadowBias()\n{\n  #if USE_INSTANCING\n    return vec2(a_localShadowBias.x + cc_shadowWHPBInfo.w, a_localShadowBias.y + cc_shadowLPNNInfo.z);\n  #elif !USE_BATCHING\n    return vec2(cc_localShadowBias.x + cc_shadowWHPBInfo.w, cc_localShadowBias.y + cc_shadowLPNNInfo.z);\n  #else\n    return vec2(cc_shadowWHPBInfo.w, cc_shadowLPNNInfo.z);\n  #endif\n}\n#endif\n#if USE_VERTEX_COLOR\n  attribute vec4 a_color;\n  varying vec4 v_color;\n#endif\nvarying vec3 v_position;\nvarying vec3 v_normal;\nvarying vec2 v_uv;\nvarying vec2 v_uv1;\n#if USE_NORMAL_MAP\n  varying vec3 v_tangent;\n  varying vec3 v_bitangent;\n#endif\n#if CC_RECEIVE_SHADOW\n  varying mediump vec2 v_shadowBias;\n#endif\n#if HAS_SECOND_UV || CC_USE_LIGHTMAP\n  attribute vec2 a_texCoord1;\n#endif\n#if CC_USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  varying vec3 v_luv;\n  void CCLightingMapCaclUV()\n  {\n  #if !USE_INSTANCING\n    v_luv.xy = cc_lightingMapUVParam.xy + a_texCoord1 * cc_lightingMapUVParam.z;\n    v_luv.z = cc_lightingMapUVParam.w;\n  #else\n    v_luv.xy = a_lightingMapUVParam.xy + a_texCoord1 * a_lightingMapUVParam.z;\n    v_luv.z = a_lightingMapUVParam.w;\n  #endif\n  }\n#endif\nvoid main () {\n  StandardVertInput In;\n  CCVertInput(In);\n  mat4 matWorld, matWorldIT;\n  CCGetWorldMatrixFull(matWorld, matWorldIT);\n  vec4 pos = matWorld * In.position;\n  v_position = pos.xyz;\n  v_normal = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz);\n  #if USE_TWOSIDE\n    vec3 viewDirect = normalize(cc_cameraPos.xyz - v_position);\n    v_normal *= dot(v_normal, viewDirect) < 0.0 ? -1.0 : 1.0;\n  #endif\n  #if USE_NORMAL_MAP\n    v_tangent = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n    v_bitangent = cross(v_normal, v_tangent) * In.tangent.w;\n  #endif\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  CC_TRANSFER_FOG(pos);\n  v_shadowPos = cc_matLightViewProj * pos;\n  #if CC_USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    CCLightingMapCaclUV();\n  #endif\n  #if CC_RECEIVE_SHADOW\n    v_shadowBias = CCGetShadowBias();\n  #endif\n  gl_Position = cc_matProj * (cc_matView * matWorld) * In.position;\n}","frag":"\n#ifdef GL_EXT_draw_buffers\n#extension GL_EXT_draw_buffers: enable\n#endif\n#ifdef GL_OES_standard_derivatives\n#extension GL_OES_standard_derivatives: enable\n#endif\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod: enable\n#endif\nprecision highp float;\nuniform mediump vec4 cc_debug_view_mode;\n  uniform mediump vec4 cc_debug_view_composite_pack_1;\n  uniform mediump vec4 cc_debug_view_composite_pack_2;\n  uniform mediump vec4 cc_debug_view_composite_pack_3;\nuniform highp mat4 cc_matView;\n  uniform highp vec4 cc_cameraPos;\n  uniform mediump vec4 cc_surfaceTransform;\n  uniform mediump vec4 cc_exposure;\n  uniform mediump vec4 cc_mainLitDir;\n  uniform mediump vec4 cc_mainLitColor;\n  uniform mediump vec4 cc_ambientSky;\n  uniform mediump vec4 cc_ambientGround;\n  uniform mediump vec4 cc_fogColor;\n  uniform mediump vec4 cc_fogBase;\n  uniform mediump vec4 cc_fogAdd;\n  uniform mediump vec4 cc_nearFar;\n  uniform mediump vec4 cc_viewPort;\n     uniform vec4 diffuseColor;\n     uniform vec4 specularColor;\n     uniform vec4 emissive;\n     uniform float alphaThreshold;\n     uniform float shininessExponent;\n     uniform float glossiness;\n     uniform float metallic;\n     uniform float normalScale;\n     uniform float transparencyFactor;\n     uniform float diffuseFactor;\n     uniform float specularFactor;\n#if CC_USE_FOG != 4\n  float LinearFog(vec4 pos, vec3 cameraPos, float fogStart, float fogEnd) {\n      vec4 wPos = pos;\n      float cam_dis = distance(cameraPos, wPos.xyz);\n      return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n  }\n  float ExpFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * fogDensity);\n      return f;\n  }\n  float ExpSquaredFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n      return f;\n  }\n  float LayeredFog(vec4 pos, vec3 cameraPos, float fogTop, float fogRange, float fogAtten) {\n      vec4 wPos = pos;\n      vec3 camWorldProj = cameraPos.xyz;\n      camWorldProj.y = 0.;\n      vec3 worldPosProj = wPos.xyz;\n      worldPosProj.y = 0.;\n      float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n      float fDeltaY, fDensityIntegral;\n      if (cameraPos.y > fogTop) {\n          if (wPos.y < fogTop) {\n              fDeltaY = (fogTop - wPos.y) / fogRange * 2.0;\n              fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n          }\n          else {\n              fDeltaY = 0.;\n              fDensityIntegral = 0.;\n          }\n      }\n      else {\n          if (wPos.y < fogTop) {\n              float fDeltaA = (fogTop - cameraPos.y) / fogRange * 2.;\n              float fDeltaB = (fogTop - wPos.y) / fogRange * 2.;\n              fDeltaY = abs(fDeltaA - fDeltaB);\n              fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n          }\n          else {\n              fDeltaY = abs(fogTop - cameraPos.y) / fogRange * 2.;\n              fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n          }\n      }\n      float fDensity;\n      if (fDeltaY != 0.) {\n          fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n      }\n      else {\n          fDensity = 0.;\n      }\n      float f = exp(-fDensity);\n      return f;\n  }\n#endif\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n#if CC_USE_FOG == 0\n\tfactor = LinearFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.y);\n#elif CC_USE_FOG == 1\n\tfactor = ExpFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 2\n\tfactor = ExpSquaredFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 3\n\tfactor = LayeredFog(pos, cc_cameraPos.xyz, cc_fogAdd.x, cc_fogAdd.y, cc_fogAdd.z);\n#else\n\tfactor = 1.0;\n#endif\n}\nvoid CC_APPLY_FOG_BASE(inout vec4 color, float factor) {\n\tcolor = vec4(mix(cc_fogColor.rgb, color.rgb, factor), color.a);\n}\n#if !CC_USE_ACCURATE_FOG\nvarying mediump float v_fog_factor;\n#endif\nvoid CC_APPLY_FOG(inout vec4 color) {\n#if !CC_USE_ACCURATE_FOG\n    CC_APPLY_FOG_BASE(color, v_fog_factor);\n#endif\n}\nvoid CC_APPLY_FOG(inout vec4 color, vec3 worldPos) {\n#if CC_USE_ACCURATE_FOG\n    float factor;\n    CC_TRANSFER_FOG_BASE(vec4(worldPos, 1.0), factor);\n#else\n    float factor = v_fog_factor;\n#endif\n    CC_APPLY_FOG_BASE(color, factor);\n}\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_WORLD_POS CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT + 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR CC_SURFACES_DEBUG_VIEW_WORLD_POS + 1\n#define CC_SURFACES_DEBUG_VIEW_FACE_SIDE CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR + 1\n#define CC_SURFACES_DEBUG_VIEW_UV0 CC_SURFACES_DEBUG_VIEW_FACE_SIDE + 1\n#define CC_SURFACES_DEBUG_VIEW_UV1 CC_SURFACES_DEBUG_VIEW_UV0 + 1\n#define CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP CC_SURFACES_DEBUG_VIEW_UV1 + 1\n#define CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP + 1\n#define CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT + 1\n#define CC_SURFACES_DEBUG_VIEW_BASE_COLOR CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR CC_SURFACES_DEBUG_VIEW_BASE_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSPARENCY CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_METALLIC CC_SURFACES_DEBUG_VIEW_TRANSPARENCY + 1\n#define CC_SURFACES_DEBUG_VIEW_ROUGHNESS CC_SURFACES_DEBUG_VIEW_METALLIC + 1\n#define CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY CC_SURFACES_DEBUG_VIEW_ROUGHNESS + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_ALL CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE CC_SURFACES_DEBUG_VIEW_DIRECT_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_ALL CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_EMISSIVE CC_SURFACES_DEBUG_VIEW_ENV_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_LIGHT_MAP CC_SURFACES_DEBUG_VIEW_EMISSIVE + 1\n#define CC_SURFACES_DEBUG_VIEW_SHADOW CC_SURFACES_DEBUG_VIEW_LIGHT_MAP + 1\n#define CC_SURFACES_DEBUG_VIEW_AO CC_SURFACES_DEBUG_VIEW_SHADOW + 1\n#define CC_SURFACES_DEBUG_VIEW_FOG CC_SURFACES_DEBUG_VIEW_AO + 1\n#define CC_SURFACES_DEBUG_VIEW_SINGLE 1\n#define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC 2\n#define IS_DEBUG_VIEW_LIGHTING_ENABLE_WITH_ALBEDO (cc_debug_view_mode.y > 0.0)\n#define IS_DEBUG_VIEW_MISC_ENABLE_CSM_LAYER_COLORATION (cc_debug_view_mode.z > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_DIFFUSE (cc_debug_view_composite_pack_1.x > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_SPECULAR (cc_debug_view_composite_pack_1.y > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_ENV_DIFFUSE (cc_debug_view_composite_pack_1.z > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_ENV_SPECULAR (cc_debug_view_composite_pack_1.w > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_EMISSIVE (cc_debug_view_composite_pack_2.x > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_LIGHT_MAP (cc_debug_view_composite_pack_2.y > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_SHADOW (cc_debug_view_composite_pack_2.z > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_AO (cc_debug_view_composite_pack_2.w > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_NORMAL_MAP (cc_debug_view_composite_pack_3.x > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_FOG (cc_debug_view_composite_pack_3.y > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TONE_MAPPING (cc_debug_view_composite_pack_3.z > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION (cc_debug_view_composite_pack_3.w > 0.0)\nvec3 SRGBToLinear (vec3 gamma) {\n#ifdef CC_USE_SURFACE_SHADER\n  #if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION) {\n      return gamma;\n    }\n  #endif\n#endif\n  return gamma * gamma;\n}\nvec3 LinearToSRGB(vec3 linear) {\n#ifdef CC_USE_SURFACE_SHADER\n  #if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION) {\n      return linear;\n    }\n  #endif\n#endif\n  return sqrt(linear);\n}\nuniform highp mat4 cc_matLightView;\n  uniform highp mat4 cc_matLightViewProj;\n  uniform highp vec4 cc_shadowInvProjDepthInfo;\n  uniform highp vec4 cc_shadowProjDepthInfo;\n  uniform highp vec4 cc_shadowProjInfo;\n  uniform mediump vec4 cc_shadowNFLSInfo;\n  uniform mediump vec4 cc_shadowWHPBInfo;\n  uniform mediump vec4 cc_shadowLPNNInfo;\n#if CC_SUPPORT_CASCADED_SHADOW_MAP\n  uniform highp vec4 cc_csmViewDir0[4];\n  uniform highp vec4 cc_csmViewDir1[4];\n  uniform highp vec4 cc_csmViewDir2[4];\n  uniform highp vec4 cc_csmAtlas[4];\n  uniform highp mat4 cc_matCSMViewProj[4];\n  uniform highp vec4 cc_csmProjDepthInfo[4];\n  uniform highp vec4 cc_csmProjInfo[4];\n#endif\nfloat GetLinearDepthFromViewSpace(vec3 viewPos, float near, float far) {\n  float dist = length(viewPos);\n  return (dist - near) / (far - near);\n}\nvec3 RotationVecFromAxisY(vec3 v, float cosTheta, float sinTheta)\n{\n    vec3 result;\n    result.x = dot(v, vec3(cosTheta, 0.0, -sinTheta));\n    result.y = v.y;\n    result.z = dot(v, vec3(sinTheta, 0.0,  cosTheta));\n    return result;\n}\nfloat CCGetLinearDepth(vec3 worldPos, float viewSpaceBias) {\n\tvec4 viewPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  viewPos.z += viewSpaceBias;\n\treturn GetLinearDepthFromViewSpace(viewPos.xyz, cc_shadowNFLSInfo.x, cc_shadowNFLSInfo.y);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n\treturn CCGetLinearDepth(worldPos, 0.0);\n}\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotShadowMap;\n    highp float unpackHighpData (float mainPart, float modPart) {\n      highp float data = mainPart;\n      return data + modPart;\n    }\n    void packHighpData (out float mainPart, out float modPart, highp float data) {\n      mainPart = fract(data);\n      modPart = data - mainPart;\n    }\n    highp float unpackHighpData (float mainPart, float modPart, const float modValue) {\n      highp float data = mainPart * modValue;\n      return data + modPart * modValue;\n    }\n    void packHighpData (out float mainPart, out float modPart, highp float data, const float modValue) {\n      highp float divide = data / modValue;\n      mainPart = floor(divide);\n      modPart = (data - mainPart * modValue) / modValue;\n    }\n    highp vec2 unpackHighpData (vec2 mainPart, vec2 modPart) {\n      highp vec2 data = mainPart;\n      return data + modPart;\n    }\n    void packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data) {\n      mainPart = fract(data);\n      modPart = data - mainPart;\n    }\n    highp vec2 unpackHighpData (vec2 mainPart, vec2 modPart, const float modValue) {\n      highp vec2 data = mainPart * modValue;\n      return data + modPart * modValue;\n    }\n    void packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data, const float modValue) {\n      highp vec2 divide = data / modValue;\n      mainPart = floor(divide);\n      modPart = (data - mainPart * modValue) / modValue;\n    }\n    highp vec3 unpackHighpData (vec3 mainPart, vec3 modPart) {\n      highp vec3 data = mainPart;\n      return data + modPart;\n    }\n    void packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data) {\n      mainPart = fract(data);\n      modPart = data - mainPart;\n    }\n    highp vec3 unpackHighpData (vec3 mainPart, vec3 modPart, const float modValue) {\n      highp vec3 data = mainPart * modValue;\n      return data + modPart * modValue;\n    }\n    void packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data, const float modValue) {\n      highp vec3 divide = data / modValue;\n      mainPart = floor(divide);\n      modPart = (data - mainPart * modValue) / modValue;\n    }\n    highp vec4 unpackHighpData (vec4 mainPart, vec4 modPart) {\n      highp vec4 data = mainPart;\n      return data + modPart;\n    }\n    void packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data) {\n      mainPart = fract(data);\n      modPart = data - mainPart;\n    }\n    highp vec4 unpackHighpData (vec4 mainPart, vec4 modPart, const float modValue) {\n      highp vec4 data = mainPart * modValue;\n      return data + modPart * modValue;\n    }\n    void packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data, const float modValue) {\n      highp vec4 divide = data / modValue;\n      mainPart = floor(divide);\n      modPart = (data - mainPart * modValue) / modValue;\n    }\n  float NativePCFShadowFactorHard (vec3 shadowNDCPos, sampler2D shadowMap, vec2 shadowMapResolution)\n  {\n    #if CC_SHADOWMAP_FORMAT == 1\n      return step(shadowNDCPos.z, dot(texture2D(shadowMap, shadowNDCPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    #else\n      return step(shadowNDCPos.z, texture2D(shadowMap, shadowNDCPos.xy).x);\n    #endif\n  }\n  float NativePCFShadowFactorSoft (vec3 shadowNDCPos, sampler2D shadowMap, vec2 shadowMapResolution)\n  {\n    vec2 oneTap = 1.0 / shadowMapResolution;\n    vec2 shadowNDCPos_offset = shadowNDCPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    #if CC_SHADOWMAP_FORMAT == 1\n      block0 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset.x, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset.x, shadowNDCPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    #else\n      block0 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos.y)).x);\n      block1 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset.x, shadowNDCPos.y)).x);\n      block2 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset.y)).x);\n      block3 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset.x, shadowNDCPos_offset.y)).x);\n    #endif\n    float coefX   = mod(shadowNDCPos.x, oneTap.x) * shadowMapResolution.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(shadowNDCPos.y, oneTap.y) * shadowMapResolution.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float NativePCFShadowFactorSoft3X (vec3 shadowNDCPos, sampler2D shadowMap, vec2 shadowMapResolution)\n  {\n    vec2 oneTap = 1.0 / shadowMapResolution;\n    float shadowNDCPos_offset_L = shadowNDCPos.x - oneTap.x;\n    float shadowNDCPos_offset_R = shadowNDCPos.x + oneTap.x;\n    float shadowNDCPos_offset_U = shadowNDCPos.y - oneTap.y;\n    float shadowNDCPos_offset_D = shadowNDCPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    #if CC_SHADOWMAP_FORMAT == 1\n      block0 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    #else\n      block0 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos_offset_U)).x);\n      block1 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset_U)).x);\n      block2 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos_offset_U)).x);\n      block3 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos.y)).x);\n      block4 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos.y)).x);\n      block5 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos.y)).x);\n      block6 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos_offset_D)).x);\n      block7 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset_D)).x);\n      block8 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos_offset_D)).x);\n    #endif\n    float coefX = mod(shadowNDCPos.x, oneTap.x) * shadowMapResolution.x;\n    float coefY = mod(shadowNDCPos.y, oneTap.y) * shadowMapResolution.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\n  float NativePCFShadowFactorSoft5X (vec3 shadowNDCPos, sampler2D shadowMap, vec2 shadowMapResolution)\n  {\n    vec2 oneTap = 1.0 / shadowMapResolution;\n    vec2 twoTap = oneTap * 2.0;\n    vec2 offset1 = shadowNDCPos.xy + vec2(-twoTap.x, -twoTap.y);\n    vec2 offset2 = shadowNDCPos.xy + vec2(-oneTap.x, -twoTap.y);\n    vec2 offset3 = shadowNDCPos.xy + vec2(0.0, -twoTap.y);\n    vec2 offset4 = shadowNDCPos.xy + vec2(oneTap.x, -twoTap.y);\n    vec2 offset5 = shadowNDCPos.xy + vec2(twoTap.x, -twoTap.y);\n    vec2 offset6 = shadowNDCPos.xy + vec2(-twoTap.x, -oneTap.y);\n    vec2 offset7 = shadowNDCPos.xy + vec2(-oneTap.x, -oneTap.y);\n    vec2 offset8 = shadowNDCPos.xy + vec2(0.0, -oneTap.y);\n    vec2 offset9 = shadowNDCPos.xy + vec2(oneTap.x, -oneTap.y);\n    vec2 offset10 = shadowNDCPos.xy + vec2(twoTap.x, -oneTap.y);\n    vec2 offset11 = shadowNDCPos.xy + vec2(-twoTap.x, 0.0);\n    vec2 offset12 = shadowNDCPos.xy + vec2(-oneTap.x, 0.0);\n    vec2 offset13 = shadowNDCPos.xy + vec2(0.0, 0.0);\n    vec2 offset14 = shadowNDCPos.xy + vec2(oneTap.x, 0.0);\n    vec2 offset15 = shadowNDCPos.xy + vec2(twoTap.x, 0.0);\n    vec2 offset16 = shadowNDCPos.xy + vec2(-twoTap.x, oneTap.y);\n    vec2 offset17 = shadowNDCPos.xy + vec2(-oneTap.x, oneTap.y);\n    vec2 offset18 = shadowNDCPos.xy + vec2(0.0, oneTap.y);\n    vec2 offset19 = shadowNDCPos.xy + vec2(oneTap.x, oneTap.y);\n    vec2 offset20 = shadowNDCPos.xy + vec2(twoTap.x, oneTap.y);\n    vec2 offset21 = shadowNDCPos.xy + vec2(-twoTap.x, twoTap.y);\n    vec2 offset22 = shadowNDCPos.xy + vec2(-oneTap.x, twoTap.y);\n    vec2 offset23 = shadowNDCPos.xy + vec2(0.0, twoTap.y);\n    vec2 offset24 = shadowNDCPos.xy + vec2(oneTap.x, twoTap.y);\n    vec2 offset25 = shadowNDCPos.xy + vec2(twoTap.x, twoTap.y);\n    float block1, block2, block3, block4, block5, block6, block7, block8, block9, block10, block11, block12, block13, block14, block15, block16, block17, block18, block19, block20, block21, block22, block23, block24, block25;\n    #if CC_SHADOWMAP_FORMAT == 1\n      block1 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset1), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset2), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset3), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset4), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset5), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset6), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset7), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset8), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block9 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset9), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block10 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset10), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block11 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset11), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block12 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset12), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block13 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset13), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block14 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset14), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block15 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset15), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block16 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset16), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block17 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset17), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block18 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset18), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block19 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset19), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block20 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset20), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block21 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset21), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block22 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset22), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block23 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset23), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block24 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset24), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block25 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset25), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    #else\n      block1 = step(shadowNDCPos.z, texture2D(shadowMap, offset1).x);\n      block2 = step(shadowNDCPos.z, texture2D(shadowMap, offset2).x);\n      block3 = step(shadowNDCPos.z, texture2D(shadowMap, offset3).x);\n      block4 = step(shadowNDCPos.z, texture2D(shadowMap, offset4).x);\n      block5 = step(shadowNDCPos.z, texture2D(shadowMap, offset5).x);\n      block6 = step(shadowNDCPos.z, texture2D(shadowMap, offset6).x);\n      block7 = step(shadowNDCPos.z, texture2D(shadowMap, offset7).x);\n      block8 = step(shadowNDCPos.z, texture2D(shadowMap, offset8).x);\n      block9 = step(shadowNDCPos.z, texture2D(shadowMap, offset9).x);\n      block10 = step(shadowNDCPos.z, texture2D(shadowMap, offset10).x);\n      block11 = step(shadowNDCPos.z, texture2D(shadowMap, offset11).x);\n      block12 = step(shadowNDCPos.z, texture2D(shadowMap, offset12).x);\n      block13 = step(shadowNDCPos.z, texture2D(shadowMap, offset13).x);\n      block14 = step(shadowNDCPos.z, texture2D(shadowMap, offset14).x);\n      block15 = step(shadowNDCPos.z, texture2D(shadowMap, offset15).x);\n      block16 = step(shadowNDCPos.z, texture2D(shadowMap, offset16).x);\n      block17 = step(shadowNDCPos.z, texture2D(shadowMap, offset17).x);\n      block18 = step(shadowNDCPos.z, texture2D(shadowMap, offset18).x);\n      block19 = step(shadowNDCPos.z, texture2D(shadowMap, offset19).x);\n      block20 = step(shadowNDCPos.z, texture2D(shadowMap, offset20).x);\n      block21 = step(shadowNDCPos.z, texture2D(shadowMap, offset21).x);\n      block22 = step(shadowNDCPos.z, texture2D(shadowMap, offset22).x);\n      block23 = step(shadowNDCPos.z, texture2D(shadowMap, offset23).x);\n      block24 = step(shadowNDCPos.z, texture2D(shadowMap, offset24).x);\n      block25 = step(shadowNDCPos.z, texture2D(shadowMap, offset25).x);\n    #endif\n    vec2 coef = fract(shadowNDCPos.xy * shadowMapResolution);\n    vec2 v1X1 = mix(vec2(block1, block6), vec2(block2, block7), coef.xx);\n    vec2 v1X2 = mix(vec2(block2, block7), vec2(block3, block8), coef.xx);\n    vec2 v1X3 = mix(vec2(block3, block8), vec2(block4, block9), coef.xx);\n    vec2 v1X4 = mix(vec2(block4, block9), vec2(block5, block10), coef.xx);\n    float v1 = mix(v1X1.x, v1X1.y, coef.y) + mix(v1X2.x, v1X2.y, coef.y) + mix(v1X3.x, v1X3.y, coef.y) + mix(v1X4.x, v1X4.y, coef.y);\n    vec2 v2X1 = mix(vec2(block6, block11), vec2(block7, block12), coef.xx);\n    vec2 v2X2 = mix(vec2(block7, block12), vec2(block8, block13), coef.xx);\n    vec2 v2X3 = mix(vec2(block8, block13), vec2(block9, block14), coef.xx);\n    vec2 v2X4 = mix(vec2(block9, block14), vec2(block10, block15), coef.xx);\n    float v2 = mix(v2X1.x, v2X1.y, coef.y) + mix(v2X2.x, v2X2.y, coef.y) + mix(v2X3.x, v2X3.y, coef.y) + mix(v2X4.x, v2X4.y, coef.y);\n    vec2 v3X1 = mix(vec2(block11, block16), vec2(block12, block17), coef.xx);\n    vec2 v3X2 = mix(vec2(block12, block17), vec2(block13, block18), coef.xx);\n    vec2 v3X3 = mix(vec2(block13, block18), vec2(block14, block19), coef.xx);\n    vec2 v3X4 = mix(vec2(block14, block19), vec2(block15, block20), coef.xx);\n    float v3 = mix(v3X1.x, v3X1.y, coef.y) + mix(v3X2.x, v3X2.y, coef.y) + mix(v3X3.x, v3X3.y, coef.y) + mix(v3X4.x, v3X4.y, coef.y);\n    vec2 v4X1 = mix(vec2(block16, block21), vec2(block17, block22), coef.xx);\n    vec2 v4X2 = mix(vec2(block17, block22), vec2(block18, block23), coef.xx);\n    vec2 v4X3 = mix(vec2(block18, block23), vec2(block19, block24), coef.xx);\n    vec2 v4X4 = mix(vec2(block19, block24), vec2(block20, block25), coef.xx);\n    float v4 = mix(v4X1.x, v4X1.y, coef.y) + mix(v4X2.x, v4X2.y, coef.y) + mix(v4X3.x, v4X3.y, coef.y) + mix(v4X4.x, v4X4.y, coef.y);\n    float fAvg = (v1 + v2 + v3 + v4) * 0.0625;\n    return fAvg;\n  }\n  bool GetShadowNDCPos(out vec3 shadowNDCPos, vec4 shadowPosWithDepthBias)\n  {\n  \tshadowNDCPos = shadowPosWithDepthBias.xyz / shadowPosWithDepthBias.w * 0.5 + 0.5;\n  \tif (shadowNDCPos.x < 0.0 || shadowNDCPos.x > 1.0 ||\n  \t\tshadowNDCPos.y < 0.0 || shadowNDCPos.y > 1.0 ||\n  \t\tshadowNDCPos.z < 0.0 || shadowNDCPos.z > 1.0) {\n  \t\treturn false;\n  \t}\n  \tshadowNDCPos.xy = cc_cameraPos.w == 1.0 ? vec2(shadowNDCPos.xy.x, 1.0 - shadowNDCPos.xy.y) : shadowNDCPos.xy;\n  \treturn true;\n  }\n  vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal, float normalBias, vec3 matViewDir0, vec3 matViewDir1, vec3 matViewDir2, vec2 projScaleXY)\n  {\n    vec4 newShadowPos = shadowPos;\n    if (normalBias > EPSILON_LOWP)\n    {\n      vec3 viewNormal = vec3(dot(matViewDir0, worldNormal), dot(matViewDir1, worldNormal), dot(matViewDir2, worldNormal));\n      if (viewNormal.z < 0.1)\n        newShadowPos.xy += viewNormal.xy * projScaleXY * normalBias * clamp(viewNormal.z, 0.001, 0.1);\n    }\n    return newShadowPos;\n  }\n  vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal, float normalBias, mat4 matLightView, vec2 projScaleXY)\n  {\n  \tvec4 newShadowPos = shadowPos;\n  \tif (normalBias > EPSILON_LOWP)\n  \t{\n  \t\tvec4 viewNormal = matLightView * vec4(worldNormal, 0.0);\n  \t\tif (viewNormal.z < 0.1)\n  \t\t\tnewShadowPos.xy += viewNormal.xy * projScaleXY * normalBias * clamp(viewNormal.z, 0.001, 0.1);\n  \t}\n  \treturn newShadowPos;\n  }\n  vec4 ApplyShadowDepthBias_Perspective(vec4 shadowPos, float viewspaceDepthBias)\n  {\n  \tvec3 viewSpacePos;\n  \tviewSpacePos.xy = shadowPos.xy * cc_shadowProjInfo.zw;\n  \tviewSpacePos.z = shadowPos.z * cc_shadowInvProjDepthInfo.x + shadowPos.w * cc_shadowInvProjDepthInfo.y;\n  \tviewSpacePos.xyz += cc_shadowProjDepthInfo.z * normalize(viewSpacePos.xyz) * viewspaceDepthBias;\n  \tvec4 clipSpacePos;\n  \tclipSpacePos.xy = viewSpacePos.xy * cc_shadowProjInfo.xy;\n  \tclipSpacePos.zw = viewSpacePos.z * cc_shadowProjDepthInfo.xz + vec2(cc_shadowProjDepthInfo.y, 0.0);\n  \t#if CC_SHADOWMAP_USE_LINEAR_DEPTH\n  \t\tclipSpacePos.z = GetLinearDepthFromViewSpace(viewSpacePos.xyz, cc_shadowNFLSInfo.x, cc_shadowNFLSInfo.y);\n  \t\tclipSpacePos.z = (clipSpacePos.z * 2.0 - 1.0) * clipSpacePos.w;\n  \t#endif\n  \treturn clipSpacePos;\n  }\n  vec4 ApplyShadowDepthBias_Orthographic(vec4 shadowPos, float viewspaceDepthBias, float projScaleZ, float projBiasZ)\n  {\n  \tfloat coeffA = projScaleZ;\n  \tfloat coeffB = projBiasZ;\n  \tfloat viewSpacePos_z = (shadowPos.z - coeffB) / coeffA;\n  \tviewSpacePos_z += viewspaceDepthBias;\n  \tvec4 result = shadowPos;\n  \tresult.z = viewSpacePos_z * coeffA + coeffB;\n  \treturn result;\n  }\n  vec4 ApplyShadowDepthBias_PerspectiveLinearDepth(vec4 shadowPos, float viewspaceDepthBias, vec3 worldPos)\n  {\n    shadowPos.z = CCGetLinearDepth(worldPos, viewspaceDepthBias) * 2.0 - 1.0;\n    shadowPos.z *= shadowPos.w;\n    return shadowPos;\n  }\n  float CCGetDirLightShadowFactorHard (vec4 shadowPosWithDepthBias) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorHard(shadowNDCPos, cc_shadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetDirLightShadowFactorSoft (vec4 shadowPosWithDepthBias) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft(shadowNDCPos, cc_shadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetDirLightShadowFactorSoft3X (vec4 shadowPosWithDepthBias) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft3X(shadowNDCPos, cc_shadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetDirLightShadowFactorSoft5X (vec4 shadowPosWithDepthBias) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft5X(shadowNDCPos, cc_shadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetSpotLightShadowFactorHard (vec4 shadowPosWithDepthBias, vec3 worldPos) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorHard(shadowNDCPos, cc_spotShadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetSpotLightShadowFactorSoft (vec4 shadowPosWithDepthBias, vec3 worldPos) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft(shadowNDCPos, cc_spotShadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetSpotLightShadowFactorSoft3X (vec4 shadowPosWithDepthBias, vec3 worldPos) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft3X(shadowNDCPos, cc_spotShadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetSpotLightShadowFactorSoft5X (vec4 shadowPosWithDepthBias, vec3 worldPos) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft5X(shadowNDCPos, cc_spotShadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCSpotShadowFactorBase(vec4 shadowPos, vec3 worldPos, vec2 shadowBias)\n  {\n    float pcf = cc_shadowWHPBInfo.z;\n    vec4 pos = vec4(1.0);\n    #if CC_SHADOWMAP_USE_LINEAR_DEPTH\n      pos = ApplyShadowDepthBias_PerspectiveLinearDepth(shadowPos, shadowBias.x, worldPos);\n    #else\n      pos = ApplyShadowDepthBias_Perspective(shadowPos, shadowBias.x);\n    #endif\n    if (pcf > 2.9) {\n      return CCGetSpotLightShadowFactorSoft5X(pos, worldPos);\n    }else if (pcf > 1.9) {\n      return CCGetSpotLightShadowFactorSoft3X(pos, worldPos);\n    }else if (pcf > 0.9) {\n      return CCGetSpotLightShadowFactorSoft(pos, worldPos);\n    }else {\n      return CCGetSpotLightShadowFactorHard(pos, worldPos);\n    }\n  }\n  float CCShadowFactorBase(vec4 shadowPos, vec3 N, vec2 shadowBias)\n  {\n    vec4 pos = ApplyShadowDepthBias_FaceNormal(shadowPos, N, shadowBias.y, cc_matLightView, cc_shadowProjInfo.xy);\n    pos = ApplyShadowDepthBias_Orthographic(pos, shadowBias.x, cc_shadowProjDepthInfo.x, cc_shadowProjDepthInfo.y);\n    float realtimeShadow = 1.0;\n    #if CC_DIR_SHADOW_PCF_TYPE == 3\n      realtimeShadow = CCGetDirLightShadowFactorSoft5X(pos);\n    #endif\n    #if CC_DIR_SHADOW_PCF_TYPE == 2\n      realtimeShadow =  CCGetDirLightShadowFactorSoft3X(pos);\n    #endif\n    #if CC_DIR_SHADOW_PCF_TYPE == 1\n      realtimeShadow = CCGetDirLightShadowFactorSoft(pos);\n    #endif\n    #if CC_DIR_SHADOW_PCF_TYPE == 0\n      realtimeShadow = CCGetDirLightShadowFactorHard(pos);\n    #endif\n    return mix(realtimeShadow, 1.0, cc_shadowNFLSInfo.w);\n  }\n  #if CC_SUPPORT_CASCADED_SHADOW_MAP\n    int CCGetCSMLevel(out vec4 csmPos, out vec4 shadowProjDepthInfo, out vec4 shadowProjInfo, out vec3 shadowViewDir0, out vec3 shadowViewDir1, out vec3 shadowViewDir2, vec3 worldPos) {\n      int layer = -1;\n      highp float layerThreshold = cc_csmViewDir0[0].w;\n      for (int i = 0; i < 4; i++) {\n        vec4 shadowPos = cc_matCSMViewProj[i] * vec4(worldPos.xyz, 1.0);\n        vec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\n        if (clipPos.x >= (0.0 + layerThreshold) && clipPos.x <= (1.0 - layerThreshold) &&\n            clipPos.y >= (0.0 + layerThreshold) && clipPos.y <= (1.0 - layerThreshold) &&\n            clipPos.z >= 0.0 && clipPos.z <= 1.0 && layer < 0) {\n          csmPos = cc_matCSMViewProj[i] * vec4(worldPos.xyz, 1.0);\n          csmPos.xy = csmPos.xy * cc_csmAtlas[i].xy + cc_csmAtlas[i].zw;\n          shadowProjDepthInfo = cc_csmProjDepthInfo[i];\n          shadowProjInfo = cc_csmProjInfo[i];\n          shadowViewDir0 = cc_csmViewDir0[i].xyz;\n          shadowViewDir1 = cc_csmViewDir1[i].xyz;\n          shadowViewDir2 = cc_csmViewDir2[i].xyz;\n          layer = i;\n        }\n      }\n      return layer;\n    }\n    float CCCSMFactorBase(vec3 worldPos, vec3 N, vec2 shadowBias)\n    {\n      vec4 csmPos = vec4(1.0);\n      vec4 shadowProjDepthInfo, shadowProjInfo;\n      vec3 shadowViewDir0, shadowViewDir1, shadowViewDir2;\n      int level = CCGetCSMLevel(csmPos, shadowProjDepthInfo, shadowProjInfo, shadowViewDir0, shadowViewDir1, shadowViewDir2, worldPos);\n      if (level < 0) { return 1.0; }\n      vec4 pos = ApplyShadowDepthBias_FaceNormal(csmPos, N, shadowBias.y, shadowViewDir0, shadowViewDir1, shadowViewDir2, shadowProjInfo.xy);\n      pos = ApplyShadowDepthBias_Orthographic(pos, shadowBias.x, shadowProjDepthInfo.x, shadowProjDepthInfo.y);\n      float realtimeShadow = 1.0;\n      #if CC_DIR_SHADOW_PCF_TYPE == 3\n        realtimeShadow = CCGetDirLightShadowFactorSoft5X(pos);\n      #endif\n      #if CC_DIR_SHADOW_PCF_TYPE == 2\n        realtimeShadow = CCGetDirLightShadowFactorSoft3X(pos);\n      #endif\n      #if CC_DIR_SHADOW_PCF_TYPE == 1\n        realtimeShadow = CCGetDirLightShadowFactorSoft(pos);\n      #endif\n      #if CC_DIR_SHADOW_PCF_TYPE == 0\n        realtimeShadow = CCGetDirLightShadowFactorHard(pos);\n      #endif\n      return mix(realtimeShadow, 1.0, cc_shadowNFLSInfo.w);\n    }\n  #else\n    int CCGetCSMLevel(out vec4 csmPos, out vec4 shadowProjDepthInfo, out vec4 shadowProjInfo, out vec3 shadowViewDir0, out vec3 shadowViewDir1, out vec3 shadowViewDir2, vec3 worldPos) {\n      return -1;\n    }\n    float CCCSMFactorBase(vec3 worldPos, vec3 N, vec2 shadowBias) {\n      vec4 shadowPos = cc_matLightViewProj * vec4(worldPos, 1.0);\n      return CCShadowFactorBase(shadowPos, N, shadowBias);\n    }\n  #endif\n#endif\n#if CC_USE_IBL\n  uniform samplerCube cc_environment;\n  vec4 fragTextureLod (sampler2D tex, vec2 coord, float lod) {\n      #ifdef GL_EXT_shader_texture_lod\n        return texture2DLodEXT(tex, coord, lod);\n      #else\n        return texture2D(tex, coord, lod);\n      #endif\n  }\n  vec4 fragTextureLod (samplerCube tex, vec3 coord, float lod) {\n      #ifdef GL_EXT_shader_texture_lod\n        return textureCubeLodEXT(tex, coord, lod);\n      #else\n        return textureCube(tex, coord, lod);\n      #endif\n  }\n  vec3 unpackRGBE (vec4 rgbe) {\n    return rgbe.rgb * pow(1.1, rgbe.a * 255.0 - 128.0);\n  }\n  #if CC_USE_DIFFUSEMAP\n    uniform samplerCube cc_diffuseMap;\n  #endif\n#endif\nfloat GGXMobile (float roughness, float NoH, vec3 H, vec3 N) {\n  vec3 NxH = cross(N, H);\n  float OneMinusNoHSqr = dot(NxH, NxH);\n  float a = roughness * roughness;\n  float n = NoH * a;\n  float p = a / (OneMinusNoHSqr + n * n);\n  return p * p;\n}\nfloat CalcSpecular (float roughness, float NoH, vec3 H, vec3 N) {\n  return (roughness * 0.25 + 0.25) * GGXMobile(roughness, NoH, H, N);\n}\nvec3 BRDFApprox (vec3 specular, float roughness, float NoV) {\n  const vec4 c0 = vec4(-1.0, -0.0275, -0.572, 0.022);\n  const vec4 c1 = vec4(1.0, 0.0425, 1.04, -0.04);\n  vec4 r = roughness * c0 + c1;\n  float a004 = min(r.x * r.x, exp2(-9.28 * NoV)) * r.x + r.y;\n  vec2 AB = vec2(-1.04, 1.04) * a004 + r.zw;\n  AB.y *= clamp(50.0 * specular.g, 0.0, 1.0);\n  return specular * AB.x + AB.y;\n}\n#if USE_REFLECTION_DENOISE\n  vec3 GetEnvReflectionWithMipFiltering(vec3 R, float roughness, float mipCount, float denoiseIntensity) {\n    #if CC_USE_IBL\n    \tfloat mip = roughness * (mipCount - 1.0);\n    \tfloat delta = (dot(dFdx(R), dFdy(R))) * 1000.0;\n    \tfloat mipBias = mix(0.0, 5.0, clamp(delta, 0.0, 1.0));\n    \tvec4 biased = fragTextureLod(cc_environment, R, mip + mipBias);\n     \tvec4 filtered = textureCube(cc_environment, R);\n      #if CC_USE_IBL == 2\n      \tbiased.rgb = unpackRGBE(biased);\n      \tfiltered.rgb = unpackRGBE(filtered);\n      #else\n      \tbiased.rgb = SRGBToLinear(biased.rgb);\n      \tfiltered.rgb = SRGBToLinear(filtered.rgb);\n      #endif\n      return mix(biased.rgb, filtered.rgb, denoiseIntensity);\n    #else\n      return vec3(0.0, 0.0, 0.0);\n    #endif\n  }\n#endif\nstruct StandardSurface {\n  vec4 albedo;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    vec3 position, position_fract_part;\n    #else\n    vec3 position;\n    #endif\n  vec3 normal;\n  vec3 emissive;\n  vec3 lightmap;\n  float lightmap_test;\n  float roughness;\n  float metallic;\n  float occlusion;\n  float specularIntensity;\n  #if CC_RECEIVE_SHADOW\n    vec2 shadowBias;\n  #endif\n};\nvec4 CCStandardShadingBase (StandardSurface s, vec4 shadowPos) {\n  vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n  vec3 specular = mix(vec3(0.08 * s.specularIntensity), s.albedo.rgb, s.metallic);\n  vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n  vec3 N = normalize(s.normal);\n  vec3 V = normalize(cc_cameraPos.xyz - position);\n  vec3 L = normalize(-cc_mainLitDir.xyz);\n  float NL = max(dot(N, L), 0.0);\n  float shadow = 1.0;\n  #if CC_RECEIVE_SHADOW && CC_SHADOW_TYPE == 2\n    if (NL > 0.0 && cc_mainLitDir.w > 0.0) {\n      if (cc_shadowLPNNInfo.w > 0.0) {\n        #if CC_DIR_LIGHT_SHADOW_TYPE == 2\n          shadow = CCCSMFactorBase(position, N, s.shadowBias);\n        #endif\n      } else {\n        #if CC_DIR_LIGHT_SHADOW_TYPE == 1\n          shadow = CCShadowFactorBase(shadowPos, N, s.shadowBias);\n        #endif\n      }\n    }\n  #endif\n  #if CC_USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    vec3 lightmap = s.lightmap.rgb;\n    #if CC_USE_HDR\n        lightmap.rgb *= cc_exposure.w * cc_exposure.x;\n    #endif\n    vec3 finalColor = diffuse * lightmap.rgb * shadow;\n  #else\n    float NV = max(abs(dot(N, V)), 0.0);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 H = normalize(L + V);\n    float NH = max(dot(N, H), 0.0);\n    vec3 finalColor = NL * cc_mainLitColor.rgb * cc_mainLitColor.w;\n    vec3 diffuseContrib = diffuse / PI;\n    vec3 specularContrib = specular * CalcSpecular(s.roughness, NH, H, N);\n    vec3 dirlightContrib = (diffuseContrib + specularContrib);\n    dirlightContrib *= shadow;\n    finalColor *= dirlightContrib;\n  #endif\n  float fAmb = 0.5 - N.y * 0.5;\n  vec3 ambDiff = mix(cc_ambientSky.rgb, cc_ambientGround.rgb, fAmb);\n  #if CC_USE_IBL\n    #if CC_USE_DIFFUSEMAP\n      vec4 diffuseMap = textureCube(cc_diffuseMap, N);\n      #if CC_USE_DIFFUSEMAP == 2\n        ambDiff = unpackRGBE(diffuseMap);\n      #else\n        ambDiff = SRGBToLinear(diffuseMap.rgb);\n      #endif\n    #endif\n    vec3 R = normalize(reflect(-V, N));\n    vec3 rotationDir = RotationVecFromAxisY(R.xyz, cc_surfaceTransform.z, cc_surfaceTransform.w);\n    #if USE_REFLECTION_DENOISE && !CC_IBL_CONVOLUTED\n      vec3 env = GetEnvReflectionWithMipFiltering(rotationDir, s.roughness, cc_ambientGround.w, 0.6);\n    #else\n      vec4 envmap = fragTextureLod(cc_environment, rotationDir, s.roughness * (cc_ambientGround.w - 1.0));\n      #if CC_USE_IBL == 2\n        vec3 env = unpackRGBE(envmap);\n      #else\n        vec3 env = SRGBToLinear(envmap.rgb);\n      #endif\n    #endif\n    finalColor += env * cc_ambientSky.w * specular * s.occlusion;\n  #endif\n  finalColor += ambDiff.rgb * cc_ambientSky.w * diffuse * s.occlusion;\n  finalColor += s.emissive;\n  return vec4(finalColor, s.albedo.a);\n}\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = ACESToneMap(color.rgb);\n  #endif\n  color.rgb = LinearToSRGB(color.rgb);\n  return color;\n}\nvarying highp vec4 v_shadowPos;\n#if CC_RECEIVE_SHADOW && CC_SHADOW_TYPE == 2\n#endif\nbool GetMetallicAlbedoFromDiffuseSpecularWithoutColor(out float metallic, out vec3 albedo, vec3 diffuse, vec3 specular, float f0 )\n{\n\tfloat d = max(max(diffuse.x, diffuse.y), diffuse.z);\n\tvec3 normalizedColor = diffuse / (d + (d < EPSILON_LOWP ? EPSILON_LOWP : 0.0));\n\tnormalizedColor = d < EPSILON_LOWP ? specular : normalizedColor;\n\tfloat s = max(max(specular.x, specular.y), specular.z);\n\tfloat delta = (d + s) * (d + s)  - 4.0 * f0 * d;\n\tfloat deltaSqrt = sqrt(max(0.0, delta));\n\tfloat solverMetallic = (-d - s + 2.0 * f0 + deltaSqrt) / (2.0 * f0);\n\tvec3 solverAlbedo = (d + s) * normalizedColor - vec3(f0 * (1.0 - solverMetallic));\n\tbool isValidSolver = delta >= 0.0;\n\tmetallic = isValidSolver ? clamp(solverMetallic, 0.0, 1.0) : 0.0;\n\talbedo = isValidSolver ? vec3(max(0.0, solverAlbedo.x), max(0.0, solverAlbedo.y), max(0.0, solverAlbedo.z)) : diffuse;\n\treturn isValidSolver;\n}\n#if CC_USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  varying vec3 v_luv;\n  uniform sampler2D cc_lightingMap;\n#endif\nvarying vec3 v_position;\nvarying vec2 v_uv;\nvarying vec2 v_uv1;\nvarying vec3 v_normal;\n#if CC_RECEIVE_SHADOW\n  varying mediump vec2 v_shadowBias;\n#endif\n#define DCC_APP_OTHERS 0\n#define DCC_APP_AUTODESK 1\n#define DCC_APP_BLENDER 2\n#define DCC_APP_CINEMA4D 3\n#define DCC_APP_GLTF 4\n#if USE_SHININESS_MAP\n  uniform sampler2D shininessExponentMap;\n#endif\n#if USE_SPECULAR_GLOSSINESS_MAP\n  uniform sampler2D specularGlossinessMap;\n#endif\n#if USE_SPECULAR_MAP\n  uniform sampler2D specularMap;\n#endif\n #if USE_METALLIC_MAP\n  uniform sampler2D metallicMap;\n#endif\n#if USE_VERTEX_COLOR\n  varying vec4 v_color;\n#endif\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_TRANSPARENCY_MAP\n  uniform sampler2D transparencyMap;\n#endif\n#if USE_NORMAL_MAP\n  varying vec3 v_tangent;\n  varying vec3 v_bitangent;\n  uniform sampler2D normalMap;\n#endif\n#if USE_EMISSIVE_MAP\n  uniform sampler2D emissiveMap;\n#endif\nfloat discolor(vec3 srcColor) {\n  return dot(GRAY_VECTOR, srcColor);\n}\nfloat convertShininessExponent(float shininessExp)\n{\n  #if DCC_APP_NAME == DCC_APP_BLENDER\n    float glossiness = clamp(sqrt(shininessExp) * 0.1, 0.0, 0.95);\n  #elif DCC_APP_NAME == DCC_APP_AUTODESK\n    float l2 = clamp(log(shininessExp + EPSILON) * 0.1442695 , 0.0, 1.0);\n    float glossiness = pow(l2, 0.5);\n  #else\n    float glossiness = clamp(log(shininessExp + EPSILON) * 0.1442695 , 0.0, 1.0);\n  #endif\n    return glossiness;\n}\nfloat getSpecularIntensityFromRoughness(float roughness)\n{\n  #if DCC_APP_NAME == DCC_APP_BLENDER\n    float specularIntensityMultiplier = mix(1.0, 5.0, roughness);\n  #elif DCC_APP_NAME == DCC_APP_CINEMA4D\n    float specularIntensityMultiplier = mix(1.0, 50.0, roughness);\n  #elif DCC_APP_NAME == DCC_APP_AUTODESK\n    float specularIntensityMultiplier = mix(1.0, 20.0, roughness);\n  #else\n    float specularIntensityMultiplier = 1.0;\n  #endif\n    return specularIntensityMultiplier;\n}\nvec4 getSpecularColorAndFactor()\n{\n  vec3 inSpecular = specularColor.rgb;\n  #if USE_SPECULAR_GLOSSINESS_MAP\n    inSpecular = SRGBToLinear(texture2D(specularGlossinessMap, TEXTURE_UV).rgb);\n  #endif\n  #if USE_SPECULAR_MAP\n      vec4 specularTex = texture2D(specularMap, TEXTURE_UV);\n      specularTex.rgb = SRGBToLinear(specularTex.rgb);\n      inSpecular = specularTex.rgb;\n  #endif\n  return vec4(inSpecular, specularFactor);\n}\nvoid surf (out StandardSurface s) {\n  vec4 baseColor = vec4(1.0);\n  #if USE_VERTEX_COLOR\n    baseColor.rgb *= SRGBToLinear(v_color.rgb);\n    baseColor.a *= v_color.a;\n  #endif\n  #if USE_ALBEDO_MAP\n    vec4 texColor = texture2D(albedoMap, TEXTURE_UV);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    texColor.a *= transparencyFactor;\n    baseColor *= texColor;\n  #else\n    baseColor *= diffuseColor;\n  #endif\n  baseColor.rgb *= diffuseFactor;\n  #if USE_TRANSPARENCY_MAP\n    baseColor.a = texture2D(transparencyMap, TEXTURE_UV).a;\n  #endif\n  #if USE_ALPHA_TEST\n    if (baseColor.a < alphaThreshold) discard;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    s.shadowBias = v_shadowBias;\n  #endif\n  vec4 specularColorAndFactor = getSpecularColorAndFactor();\n  float inGlossiness = 0.0, inSpecularIntensity = specularColorAndFactor.w;\n  #if HAS_EXPORTED_GLOSSINESS\n    #if USE_SPECULAR_GLOSSINESS_MAP\n      inGlossiness = 1.0 - texture2D(specularGlossinessMap, TEXTURE_UV).a;\n    #else\n      inGlossiness = glossiness;\n    #endif\n  #else\n    #if USE_SHININESS_MAP\n      #if USE_SHININESS_MAP_CHANNEL\n        inGlossiness = 1.0 - texture2D(shininessExponentMap, TEXTURE_UV).SHININESS_MAP_CHANNEL;\n      #else\n        inGlossiness = 1.0 - discolor(texture2D(shininessExponentMap, TEXTURE_UV).rgb);\n      #endif\n    #else\n      inGlossiness = convertShininessExponent(shininessExponent);\n    #endif\n    inSpecularIntensity *= getSpecularIntensityFromRoughness(1.0 - inGlossiness);\n  #endif\n  float inMetallic = 0.0;\n  vec4 albedo = baseColor;\n  #if HAS_EXPORTED_METALLIC\n    inMetallic = metallic;\n    float spec = specularFactor;\n    #if USE_SPECULAR_MAP\n      spec = dot(GRAY_VECTOR, texture2D(specularMap, TEXTURE_UV).rgb);\n    #endif\n    inSpecularIntensity *= spec * 0.5;\n  #else\n    GetMetallicAlbedoFromDiffuseSpecularWithoutColor(inMetallic, albedo.rgb, baseColor.rgb, specularColorAndFactor.rgb, 0.04);\n    inSpecularIntensity *= inMetallic;\n  #endif\n  s.normal = v_normal;\n  #if USE_NORMAL_MAP\n    vec3 nmmp = texture2D(normalMap, TEXTURE_UV).xyz - vec3(0.5);\n    s.normal =\n      (nmmp.x * normalScale) * normalize(v_tangent) +\n      (nmmp.y * normalScale) * normalize(v_bitangent) +\n      nmmp.z * normalize(s.normal);\n  #endif\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    packHighpData(s.position, s.position_fract_part, v_position);\n    #else\n    s.position = v_position;\n    #endif\n  s.albedo = albedo;\n  s.occlusion = 1.0;\n  s.roughness = 1.0 - inGlossiness;\n  s.metallic = inMetallic;\n  s.specularIntensity = inSpecularIntensity * 0.5;\n  s.emissive = vec3(0.0);\n#if USE_EMISSIVE_MAP\n  s.emissive = texture2D(emissiveMap, TEXTURE_UV).xyz;\n#endif\n  #if CC_USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    vec4 lightColor = texture2D(cc_lightingMap, v_luv.xy);\n    s.lightmap = lightColor.xyz * v_luv.z;\n    s.lightmap_test = v_luv.z;\n  #endif\n}\n#if CC_FORWARD_ADD\n  #if CC_PIPELINE_TYPE == 0\n    #define LIGHTS_PER_PASS 1\n  #else\n    #define LIGHTS_PER_PASS 10\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  uniform highp vec4 cc_lightPos[LIGHTS_PER_PASS];\n  uniform vec4 cc_lightColor[LIGHTS_PER_PASS];\n  uniform vec4 cc_lightSizeRangeAngle[LIGHTS_PER_PASS];\n  uniform vec4 cc_lightDir[LIGHTS_PER_PASS];\n  #endif\n  float SmoothDistAtt (float distSqr, float invSqrAttRadius) {\n    float factor = distSqr * invSqrAttRadius;\n    float smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\n    return smoothFactor * smoothFactor;\n  }\n  float GetDistAtt (float distSqr, float invSqrAttRadius) {\n    float attenuation = 1.0 / max(distSqr, 0.01*0.01);\n    attenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\n    return attenuation;\n  }\n  float GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\n    float cd = dot(litDir, L);\n    float attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\n    return (attenuation * attenuation);\n  }\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  vec4 CCStandardShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 position;\n      #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n      position = unpackHighpData(s.position, s.position_fract_part);\n      #else\n      position = s.position;\n      #endif\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / PI;\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    float NV = max(abs(dot(N, V)), 0.0);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    int numLights = CC_PIPELINE_TYPE == 0 ? LIGHTS_PER_PASS : int(cc_lightDir[0].w);\n    for (int i = 0; i < LIGHTS_PER_PASS; i++) {\n      if (i >= numLights) break;\n      vec3 SLU = cc_lightPos[i].xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.0);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = cc_lightSizeRangeAngle[i].x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = litRadiusSqr / max(litRadiusSqr, distSqr);\n      float attRadiusSqrInv = 1.0 / max(cc_lightSizeRangeAngle[i].y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (cc_lightPos[i].w > 0.0) {\n        float cosInner = max(dot(-cc_lightDir[i].xyz, SL), 0.01);\n        float cosOuter = cc_lightSizeRangeAngle[i].z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -cc_lightDir[i].xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = cc_lightColor[i].rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW  && CC_SHADOW_TYPE == 2\n        if (cc_lightPos[i].w > 0.0 && cc_lightSizeRangeAngle[i].w > 0.0) {\n          shadow = CCSpotShadowFactorBase(shadowPos, position, s.shadowBias);\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * cc_lightColor[i].w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n  readonly buffer b_ccLightsBuffer { vec4 b_ccLights[]; };\n  readonly buffer b_clusterLightIndicesBuffer { uint b_clusterLightIndices[]; };\n  readonly buffer b_clusterLightGridBuffer { uvec4 b_clusterLightGrid[]; };\n  struct CCLight\n  {\n    vec4 cc_lightPos;\n    vec4 cc_lightColor;\n    vec4 cc_lightSizeRangeAngle;\n    vec4 cc_lightDir;\n  };\n  struct Cluster\n  {\n    vec3 minBounds;\n    vec3 maxBounds;\n  };\n  struct LightGrid\n  {\n    uint offset;\n    uint ccLights;\n  };\n  CCLight getCCLight(uint i)\n  {\n    CCLight light;\n    light.cc_lightPos = b_ccLights[4u * i + 0u];\n    light.cc_lightColor = b_ccLights[4u * i + 1u];\n    light.cc_lightSizeRangeAngle = b_ccLights[4u * i + 2u];\n    light.cc_lightDir = b_ccLights[4u * i + 3u];\n    return light;\n  }\n  LightGrid getLightGrid(uint cluster)\n  {\n    uvec4 gridvec = b_clusterLightGrid[cluster];\n    LightGrid grid;\n    grid.offset = gridvec.x;\n    grid.ccLights = gridvec.y;\n    return grid;\n  }\n  uint getGridLightIndex(uint start, uint offset)\n  {\n    return b_clusterLightIndices[start + offset];\n  }\n  uint getClusterZIndex(vec4 worldPos)\n  {\n    float scale = float(24) / log(cc_nearFar.y / cc_nearFar.x);\n    float bias = -(float(24) * log(cc_nearFar.x) / log(cc_nearFar.y / cc_nearFar.x));\n    float eyeDepth = -(cc_matView * worldPos).z;\n    uint zIndex = uint(max(log(eyeDepth) * scale + bias, 0.0));\n    return zIndex;\n  }\n  uint getClusterIndex(vec4 fragCoord, vec4 worldPos)\n  {\n    uint zIndex = getClusterZIndex(worldPos);\n    float clusterSizeX = ceil(cc_viewPort.z / float(16));\n    float clusterSizeY = ceil(cc_viewPort.w / float(8));\n    uvec3 indices = uvec3(uvec2(fragCoord.xy / vec2(clusterSizeX, clusterSizeY)), zIndex);\n    uint cluster = (16u * 8u) * indices.z + 16u * indices.y + indices.x;\n    return cluster;\n  }\n  vec4 CCClusterShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / PI;\n    vec3 position;\n      #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n      position = unpackHighpData(s.position, s.position_fract_part);\n      #else\n      position = s.position;\n      #endif\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    float NV = max(abs(dot(N, V)), 0.001);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    uint cluster = getClusterIndex(gl_FragCoord, vec4(position, 1.0));\n    LightGrid grid = getLightGrid(cluster);\n    uint numLights = grid.ccLights;\n    for (uint i = 0u; i < 100u; i++) {\n      if (i >= numLights) break;\n      uint lightIndex = getGridLightIndex(grid.offset, i);\n      CCLight light = getCCLight(lightIndex);\n      vec3 SLU = light.cc_lightPos.xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.001);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = light.cc_lightSizeRangeAngle.x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = PI * (litRadiusSqr / max(litRadiusSqr , distSqr));\n      float attRadiusSqrInv = 1.0 / max(light.cc_lightSizeRangeAngle.y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (light.cc_lightPos.w > 0.0) {\n        float cosInner = max(dot(-light.cc_lightDir.xyz, SL), 0.01);\n        float cosOuter = light.cc_lightSizeRangeAngle.z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -light.cc_lightDir.xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = light.cc_lightColor.rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW && CC_SHADOW_TYPE == 2\n        if (light.cc_lightPos.w > 0.0) {\n          shadow = CCSpotShadowFactorBase(shadowPos, position, s.shadowBias);\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * light.cc_lightColor.w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  #endif\n  void main () {\n    StandardSurface s; surf(s);\n    #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n    vec4 color = CCClusterShadingAdditive(s, v_shadowPos);\n    #else\n    vec4 color = CCStandardShadingAdditive(s, v_shadowPos);\n    #endif\n    gl_FragData[0] = CCFragOutput(color);\n  }\n#elif (CC_PIPELINE_TYPE == 0 || CC_FORCE_FORWARD_SHADING)\n  void main () {\n    StandardSurface s; surf(s);\n    vec4 color = CCFragOutput(CCStandardShadingBase(s, v_shadowPos));\n    #if CC_USE_FOG != 4\n      CC_APPLY_FOG(color, s.position.xyz);\n    #endif\n    gl_FragData[0] = color;\n  }\n#elif CC_PIPELINE_TYPE == 1\n  vec2 signNotZero(vec2 v) {\n    return vec2((v.x >= 0.0) ? +1.0 : -1.0, (v.y >= 0.0) ? +1.0 : -1.0);\n  }\n  vec2 float32x3_to_oct(in vec3 v) {\n    vec2 p = v.xy * (1.0 / (abs(v.x) + abs(v.y) + abs(v.z)));\n    return (v.z <= 0.0) ? ((1.0 - abs(p.yx)) * signNotZero(p)) : p;\n  }\n  void main () {\n    StandardSurface s; surf(s);\n    gl_FragData[0] = s.albedo;\n    gl_FragData[1] = vec4(float32x3_to_oct(s.normal), s.roughness, s.metallic);\n    gl_FragData[2] = vec4(s.emissive, s.occlusion);\n  }\n#endif"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]},{"name":"CCShadow","defines":[]},{"name":"CCCSM","defines":["CC_SUPPORT_CASCADED_SHADOW_MAP"]}],"samplerTextures":[{"name":"cc_shadowMap","defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_spotShadowMap","defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_environment","defines":["CC_USE_IBL"]},{"name":"cc_diffuseMap","defines":["CC_USE_DIFFUSEMAP"]}],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","!CC_USE_REAL_TIME_JOINT_TEXTURE"]},{"name":"CCLocalBatched","defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"CCLocal","defines":["!USE_INSTANCING","!USE_BATCHING"]},{"name":"CCForwardLight","defines":["CC_FORWARD_ADD","CC_ENABLE_CLUSTERED_LIGHT_CULLING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"cc_realtimeJoint","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","CC_USE_REAL_TIME_JOINT_TEXTURE"]},{"name":"cc_lightingMap","defines":["CC_USE_LIGHTMAP","!USE_BATCHING","!CC_FORWARD_ADD"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":181,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":113}},"defines":[{"name":"USE_INSTANCING","type":"boolean"},{"name":"USE_BATCHING","type":"boolean"},{"name":"CC_USE_SKINNING","type":"boolean"},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean"},{"name":"CC_USE_LIGHTMAP","type":"boolean"},{"name":"CC_RECEIVE_SHADOW","type":"boolean"},{"name":"CC_USE_MORPH","type":"boolean"},{"name":"CC_MORPH_TARGET_COUNT","type":"number","range":[2,8]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean"},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean"},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean"},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean"},{"name":"CC_USE_REAL_TIME_JOINT_TEXTURE","type":"boolean"},{"name":"CC_USE_FOG","type":"number","range":[0,4]},{"name":"CC_USE_ACCURATE_FOG","type":"boolean"},{"name":"CC_SUPPORT_CASCADED_SHADOW_MAP","type":"boolean"},{"name":"USE_VERTEX_COLOR","type":"boolean"},{"name":"USE_NORMAL_MAP","type":"boolean"},{"name":"HAS_SECOND_UV","type":"boolean"},{"name":"CC_FORWARD_ADD","type":"boolean"},{"name":"USE_TWOSIDE","type":"boolean"},{"name":"CC_USE_DEBUG_VIEW","type":"number","range":[0,3]},{"name":"CC_SHADOWMAP_FORMAT","type":"number","range":[0,3]},{"name":"CC_SHADOWMAP_USE_LINEAR_DEPTH","type":"boolean"},{"name":"CC_DIR_SHADOW_PCF_TYPE","type":"number","range":[0,3]},{"name":"CC_USE_IBL","type":"number","range":[0,2]},{"name":"CC_USE_DIFFUSEMAP","type":"number","range":[0,2]},{"name":"USE_REFLECTION_DENOISE","type":"boolean"},{"name":"CC_SHADOW_TYPE","type":"number","range":[0,3]},{"name":"CC_DIR_LIGHT_SHADOW_TYPE","type":"number","range":[0,3]},{"name":"CC_USE_HDR","type":"boolean"},{"name":"CC_IBL_CONVOLUTED","type":"boolean"},{"name":"TEXTURE_UV","type":"string","options":["v_uv","v_uv1"]},{"name":"DCC_APP_NAME","type":"number","range":[0,4]},{"name":"USE_SHININESS_MAP","type":"boolean"},{"name":"SHININESS_MAP_CHANNEL","type":"string","options":["a","r","g","b"]},{"name":"USE_SPECULAR_GLOSSINESS_MAP","type":"boolean"},{"name":"USE_SPECULAR_MAP","type":"boolean"},{"name":"USE_METALLIC_MAP","type":"boolean"},{"name":"USE_ALBEDO_MAP","type":"boolean"},{"name":"USE_TRANSPARENCY_MAP","type":"boolean"},{"name":"USE_EMISSIVE_MAP","type":"boolean"},{"name":"USE_ALPHA_TEST","type":"boolean"},{"name":"HAS_EXPORTED_GLOSSINESS","type":"boolean"},{"name":"USE_SHININESS_MAP_CHANNEL","type":"boolean"},{"name":"HAS_EXPORTED_METALLIC","type":"boolean"},{"name":"CC_PIPELINE_TYPE","type":"number","range":[0,1]},{"name":"CC_FORCE_FORWARD_SHADING","type":"boolean"}]},{"hash":2706003509,"name":"dcc/imported-specular-glossiness|shadow-caster-vs:vert|shadow-caster-fs:frag","blocks":[{"name":"Constants","stageFlags":17,"binding":0,"members":[{"name":"tilingOffset","type":16,"count":1},{"name":"diffuseColor","type":16,"count":1},{"name":"specularColor","type":16,"count":1},{"name":"emissive","type":16,"count":1},{"name":"alphaThreshold","type":13,"count":1},{"name":"shininessExponent","type":13,"count":1},{"name":"glossiness","type":13,"count":1},{"name":"metallic","type":13,"count":1},{"name":"normalScale","type":13,"count":1},{"name":"transparencyFactor","type":13,"count":1},{"name":"diffuseFactor","type":13,"count":1},{"name":"specularFactor","type":13,"count":1}],"defines":[]}],"samplerTextures":[{"name":"albedoMap","type":28,"count":1,"stageFlags":16,"binding":1,"defines":["USE_ALBEDO_MAP"]},{"name":"transparencyMap","type":28,"count":1,"stageFlags":16,"binding":2,"defines":["USE_TRANSPARENCY_MAP"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_normal","format":32,"location":1,"defines":[]},{"name":"a_texCoord","format":21,"location":2,"defines":[]},{"name":"a_tangent","format":44,"location":3,"defines":[]},{"name":"a_joints","location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","format":44,"isInstanced":true,"location":6,"defines":["USE_INSTANCING","CC_USE_BAKED_ANIMATION"]},{"name":"a_matWorld0","format":44,"isInstanced":true,"location":7,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING","CC_USE_LIGHTMAP"]},{"name":"a_localShadowBias","format":21,"isInstanced":true,"location":11,"defines":["USE_INSTANCING","CC_RECEIVE_SHADOW"]},{"name":"a_dyn_batch_id","format":11,"location":12,"defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"a_vertexId","format":11,"location":13,"defines":["CC_USE_MORPH"]},{"name":"a_texCoord1","format":21,"location":14,"defines":[]},{"name":"a_color","format":44,"location":15,"defines":["USE_VERTEX_COLOR"]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"glsl3":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\nin vec4 a_tangent;\n#if CC_USE_SKINNING\n    in vec4 a_joints;\n  in vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    in highp vec4 a_jointAnimInfo;\n  #endif\n  in vec4 a_matWorld0;\n  in vec4 a_matWorld1;\n  in vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    in vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    in vec2 a_localShadowBias;\n  #endif\n#elif USE_BATCHING\n  in float a_dyn_batch_id;\n#endif\n#if CC_USE_MORPH\n    in float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\n#if CC_USE_MORPH\n  layout(std140) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n  #endif\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n  vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n  vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n  vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n  }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    layout(std140) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(std140) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      uniform highp sampler2D cc_realtimeJoint;\n    #else\n      layout(std140) uniform CCSkinning {\n        highp vec4 cc_joints[CC_JOINT_UNIFORM_CAPACITY * 3];\n      };\n    #endif\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n        mat4 getJointMatrix (float i) {\n          float x = i;\n          vec4 v1 = texture(cc_realtimeJoint, vec2( x / 256.0, 0.5 / 3.0));\n          vec4 v2 = texture(cc_realtimeJoint, vec2( x / 256.0, 1.5 / 3.0));\n          vec4 v3 = texture(cc_realtimeJoint, vec2( x / 256.0, 2.5 / 3.0));\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #else\n        mat4 getJointMatrix (float i) {\n         float x = 4.0 * i;\n          vec4 v1 = vec4(\n            decode32(texture(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 0.5 / 3.0)))\n          );\n          vec4 v2 = vec4(\n            decode32(texture(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 1.5 / 3.0)))\n          );\n          vec4 v3 = vec4(\n            decode32(texture(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 2.5 / 3.0)))\n          );\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #endif\n    #else\n      mat4 getJointMatrix (float i) {\n        int idx = int(i);\n        vec4 v1 = cc_joints[idx * 3];\n        vec4 v2 = cc_joints[idx * 3 + 1];\n        vec4 v3 = cc_joints[idx * 3 + 2];\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\n#if !USE_INSTANCING\n  #if USE_BATCHING\n    layout(std140) uniform CCLocalBatched {\n      highp mat4 cc_matWorlds[10];\n    };\n  #else\n    layout(std140) uniform CCLocal {\n      highp mat4 cc_matWorld;\n      highp mat4 cc_matWorldIT;\n      highp vec4 cc_lightingMapUVParam;\n      highp vec4 cc_localShadowBias;\n    };\n  #endif\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\nlayout(std140) uniform Constants {\n  vec4  tilingOffset;\n  vec4  diffuseColor;\n  vec4  specularColor;\n  vec4  emissive;\n  float alphaThreshold;\n  float shininessExponent;\n  float glossiness;\n  float metallic;\n  float normalScale;\n  float transparencyFactor;\n  float diffuseFactor;\n  float specularFactor;\n};\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n#if HAS_SECOND_UV || CC_USE_LIGHTMAP\n  in vec2 a_texCoord1;\n#endif\nout vec2 v_uv;\nout vec2 v_uv1;\nout vec4 v_worldPos;\nout highp vec2 v_clip_depth;\n#if USE_VERTEX_COLOR\n  in vec4 a_color;\n  out lowp vec4 v_color;\n#endif\nvec4 vert () {\n  StandardVertInput In;\n  CCVertInput(In);\n  mat4 matWorld, matWorldIT;\n  CCGetWorldMatrixFull(matWorld, matWorldIT);\n  v_worldPos = matWorld * In.position;\n  vec4 clipPos = cc_matLightViewProj * v_worldPos;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  v_clip_depth = clipPos.zw;\n  return clipPos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(std140) uniform Constants {\n  vec4  tilingOffset;\n  vec4  diffuseColor;\n  vec4  specularColor;\n  vec4  emissive;\n  float alphaThreshold;\n  float shininessExponent;\n  float glossiness;\n  float metallic;\n  float normalScale;\n  float transparencyFactor;\n  float diffuseFactor;\n  float specularFactor;\n};\nvec4 packDepthToRGBA (float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 16581375.0) * depth;\n  ret = fract(ret);\n  ret -= vec4(ret.yzw, 0.0) / 255.0;\n  return ret;\n}\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n#if CC_SUPPORT_CASCADED_SHADOW_MAP\n  layout(std140) uniform CCCSM {\n    highp vec4 cc_csmViewDir0[4];\n    highp vec4 cc_csmViewDir1[4];\n    highp vec4 cc_csmViewDir2[4];\n    highp vec4 cc_csmAtlas[4];\n    highp mat4 cc_matCSMViewProj[4];\n    highp vec4 cc_csmProjDepthInfo[4];\n    highp vec4 cc_csmProjInfo[4];\n    highp vec4 cc_csmSplitsInfo;\n  };\n#endif\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nfloat GetLinearDepthFromViewSpace(vec3 viewPos, float near, float far) {\n  float dist = length(viewPos);\n  return (dist - near) / (far - near);\n}\nfloat CCGetLinearDepth(vec3 worldPos, float viewSpaceBias) {\n\tvec4 viewPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  viewPos.z += viewSpaceBias;\n\treturn GetLinearDepthFromViewSpace(viewPos.xyz, cc_shadowNFLSInfo.x, cc_shadowNFLSInfo.y);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n\treturn CCGetLinearDepth(worldPos, 0.0);\n}\n#if CC_RECEIVE_SHADOW\n  layout(std140) uniform CCGlobal {\n    highp   vec4 cc_time;\n    mediump vec4 cc_screenSize;\n    mediump vec4 cc_nativeSize;\n    mediump vec4 cc_debug_view_mode;\n    mediump vec4 cc_debug_view_composite_pack_1;\n    mediump vec4 cc_debug_view_composite_pack_2;\n    mediump vec4 cc_debug_view_composite_pack_3;\n  };\n  layout(std140) uniform CCCamera {\n    highp   mat4 cc_matView;\n    highp   mat4 cc_matViewInv;\n    highp   mat4 cc_matProj;\n    highp   mat4 cc_matProjInv;\n    highp   mat4 cc_matViewProj;\n    highp   mat4 cc_matViewProjInv;\n    highp   vec4 cc_cameraPos;\n    mediump vec4 cc_surfaceTransform;\n    mediump vec4 cc_screenScale;\n    mediump vec4 cc_exposure;\n    mediump vec4 cc_mainLitDir;\n    mediump vec4 cc_mainLitColor;\n    mediump vec4 cc_ambientSky;\n    mediump vec4 cc_ambientGround;\n    mediump vec4 cc_fogColor;\n    mediump vec4 cc_fogBase;\n    mediump vec4 cc_fogAdd;\n    mediump vec4 cc_nearFar;\n    mediump vec4 cc_viewPort;\n  };\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotShadowMap;\n  #if CC_SUPPORT_CASCADED_SHADOW_MAP\n  #else\n  #endif\n#endif\nin vec2 v_uv;\nin vec2 v_uv1;\nin vec4 v_worldPos;\nin highp vec2 v_clip_depth;\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_TRANSPARENCY_MAP\n  uniform sampler2D transparencyMap;\n#endif\n#if USE_VERTEX_COLOR\n  in lowp vec4 v_color;\n#endif\nvec4 frag () {\n  #if USE_ALPHA_TEST\n    float alpha = diffuseColor.a;\n    #if USE_VERTEX_COLOR\n      alpha *= v_color.a;\n    #endif\n    #if USE_ALBEDO_MAP\n      alpha *= texture(albedoMap, TEXTURE_UV).a * transparencyFactor;\n    #endif\n    #if USE_TRANSPARENCY_MAP\n      alpha = texture(transparencyMap, TEXTURE_UV).a;\n    #endif\n    if (alpha < alphaThreshold) discard;\n  #endif\n  highp float clipDepth = v_clip_depth.x / v_clip_depth.y * 0.5 + 0.5;\n  if(cc_shadowLPNNInfo.x > 0.000001 && cc_shadowLPNNInfo.x < 1.999999) {\n    #if CC_SHADOWMAP_USE_LINEAR_DEPTH\n      clipDepth = CCGetLinearDepth(v_worldPos.xyz);\n    #endif\n  }\n  #if CC_SHADOWMAP_FORMAT == 1\n    return packDepthToRGBA(clipDepth);\n  #else\n    return vec4(clipDepth, 1.0, 1.0, 1.0);\n  #endif\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\n#if CC_USE_SKINNING\n    attribute vec4 a_joints;\n  attribute vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    attribute highp vec4 a_jointAnimInfo;\n  #endif\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    attribute vec2 a_localShadowBias;\n  #endif\n#elif USE_BATCHING\n  attribute float a_dyn_batch_id;\n#endif\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\n#if CC_USE_MORPH\n  uniform vec4 cc_displacementWeights[15];\n  uniform vec4 cc_displacementTextureInfo;\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n  #endif\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n        return texture2D(tex, uv);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture2D(tex, x)),\n        decode32(texture2D(tex, y)),\n        decode32(texture2D(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n  vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n  vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n  vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n  }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    uniform highp vec4 cc_jointTextureInfo;\n    uniform highp vec4 cc_jointAnimInfo;\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      uniform highp sampler2D cc_realtimeJoint;\n    #else\n      uniform highp vec4 cc_joints[CC_JOINT_UNIFORM_CAPACITY * 3];\n    #endif\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n        mat4 getJointMatrix (float i) {\n          float x = i;\n          vec4 v1 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 0.5 / 3.0));\n          vec4 v2 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 1.5 / 3.0));\n          vec4 v3 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 2.5 / 3.0));\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #else\n        mat4 getJointMatrix (float i) {\n         float x = 4.0 * i;\n          vec4 v1 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 0.5 / 3.0)))\n          );\n          vec4 v2 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 1.5 / 3.0)))\n          );\n          vec4 v3 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 2.5 / 3.0)))\n          );\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #endif\n    #else\n      mat4 getJointMatrix (float i) {\n        int idx = int(i);\n        vec4 v1 = cc_joints[idx * 3];\n        vec4 v2 = cc_joints[idx * 3 + 1];\n        vec4 v3 = cc_joints[idx * 3 + 2];\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\n#if !USE_INSTANCING\n  #if USE_BATCHING\n    uniform highp mat4 cc_matWorlds[10];\n  #else\n    uniform highp mat4 cc_matWorld;\n  uniform highp mat4 cc_matWorldIT;\n  #endif\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\n    uniform vec4 tilingOffset;\nuniform highp mat4 cc_matLightViewProj;\n#if HAS_SECOND_UV || CC_USE_LIGHTMAP\n  attribute vec2 a_texCoord1;\n#endif\nvarying vec2 v_uv;\nvarying vec2 v_uv1;\nvarying vec4 v_worldPos;\nvarying highp vec2 v_clip_depth;\n#if USE_VERTEX_COLOR\n  attribute vec4 a_color;\n  varying lowp vec4 v_color;\n#endif\nvec4 vert () {\n  StandardVertInput In;\n  CCVertInput(In);\n  mat4 matWorld, matWorldIT;\n  CCGetWorldMatrixFull(matWorld, matWorldIT);\n  v_worldPos = matWorld * In.position;\n  vec4 clipPos = cc_matLightViewProj * v_worldPos;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  v_clip_depth = clipPos.zw;\n  return clipPos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\n   uniform vec4 diffuseColor;\n   uniform float alphaThreshold;\n   uniform float transparencyFactor;\nvec4 packDepthToRGBA (float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 16581375.0) * depth;\n  ret = fract(ret);\n  ret -= vec4(ret.yzw, 0.0) / 255.0;\n  return ret;\n}\nuniform highp mat4 cc_matLightView;\n  uniform mediump vec4 cc_shadowNFLSInfo;\n  uniform mediump vec4 cc_shadowLPNNInfo;\n#if CC_SUPPORT_CASCADED_SHADOW_MAP\n  #endif\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nfloat GetLinearDepthFromViewSpace(vec3 viewPos, float near, float far) {\n  float dist = length(viewPos);\n  return (dist - near) / (far - near);\n}\nfloat CCGetLinearDepth(vec3 worldPos, float viewSpaceBias) {\n\tvec4 viewPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  viewPos.z += viewSpaceBias;\n\treturn GetLinearDepthFromViewSpace(viewPos.xyz, cc_shadowNFLSInfo.x, cc_shadowNFLSInfo.y);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n\treturn CCGetLinearDepth(worldPos, 0.0);\n}\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotShadowMap;\n  #if CC_SUPPORT_CASCADED_SHADOW_MAP\n  #else\n  #endif\n#endif\nvarying vec2 v_uv;\nvarying vec2 v_uv1;\nvarying vec4 v_worldPos;\nvarying highp vec2 v_clip_depth;\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_TRANSPARENCY_MAP\n  uniform sampler2D transparencyMap;\n#endif\n#if USE_VERTEX_COLOR\n  varying lowp vec4 v_color;\n#endif\nvec4 frag () {\n  #if USE_ALPHA_TEST\n    float alpha = diffuseColor.a;\n    #if USE_VERTEX_COLOR\n      alpha *= v_color.a;\n    #endif\n    #if USE_ALBEDO_MAP\n      alpha *= texture2D(albedoMap, TEXTURE_UV).a * transparencyFactor;\n    #endif\n    #if USE_TRANSPARENCY_MAP\n      alpha = texture2D(transparencyMap, TEXTURE_UV).a;\n    #endif\n    if (alpha < alphaThreshold) discard;\n  #endif\n  highp float clipDepth = v_clip_depth.x / v_clip_depth.y * 0.5 + 0.5;\n  if(cc_shadowLPNNInfo.x > 0.000001 && cc_shadowLPNNInfo.x < 1.999999) {\n    #if CC_SHADOWMAP_USE_LINEAR_DEPTH\n      clipDepth = CCGetLinearDepth(v_worldPos.xyz);\n    #endif\n  }\n  #if CC_SHADOWMAP_FORMAT == 1\n    return packDepthToRGBA(clipDepth);\n  #else\n    return vec4(clipDepth, 1.0, 1.0, 1.0);\n  #endif\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCShadow","defines":[]},{"name":"CCCSM","defines":["CC_SUPPORT_CASCADED_SHADOW_MAP"]},{"name":"CCGlobal","defines":["CC_RECEIVE_SHADOW"]},{"name":"CCCamera","defines":["CC_RECEIVE_SHADOW"]}],"samplerTextures":[{"name":"cc_shadowMap","defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_spotShadowMap","defines":["CC_RECEIVE_SHADOW"]}],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","!CC_USE_REAL_TIME_JOINT_TEXTURE"]},{"name":"CCLocalBatched","defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"CCLocal","defines":["!USE_INSTANCING","!USE_BATCHING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"cc_realtimeJoint","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","CC_USE_REAL_TIME_JOINT_TEXTURE"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":96,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":113}},"defines":[{"name":"USE_INSTANCING","type":"boolean"},{"name":"USE_BATCHING","type":"boolean"},{"name":"CC_USE_SKINNING","type":"boolean"},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean"},{"name":"CC_USE_LIGHTMAP","type":"boolean"},{"name":"CC_RECEIVE_SHADOW","type":"boolean"},{"name":"CC_USE_MORPH","type":"boolean"},{"name":"CC_MORPH_TARGET_COUNT","type":"number","range":[2,8]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean"},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean"},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean"},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean"},{"name":"CC_USE_REAL_TIME_JOINT_TEXTURE","type":"boolean"},{"name":"HAS_SECOND_UV","type":"boolean"},{"name":"USE_VERTEX_COLOR","type":"boolean"},{"name":"CC_SUPPORT_CASCADED_SHADOW_MAP","type":"boolean"},{"name":"TEXTURE_UV","type":"string","options":["v_uv","v_uv1"]},{"name":"USE_ALBEDO_MAP","type":"boolean"},{"name":"USE_TRANSPARENCY_MAP","type":"boolean"},{"name":"USE_ALPHA_TEST","type":"boolean"},{"name":"CC_SHADOWMAP_USE_LINEAR_DEPTH","type":"boolean"},{"name":"CC_SHADOWMAP_FORMAT","type":"number","range":[0,3]}]}],[{"name":"opaque","passes":[{"program":"dcc/imported-specular-glossiness|standard-vs|standard-fs","properties":{"mainTexture":{"value":"grey","type":28,"handleInfo":["albedoMap",0,28]},"mainColor":{"linear":true,"type":16,"value":[1,1,1,1],"handleInfo":["diffuseColor",0,16]},"albedoScale":{"type":13,"value":[1],"handleInfo":["diffuseFactor",0,13]},"alphaThreshold":{"type":13,"value":[0.5]},"emissive":{"linear":true,"type":16,"value":[0,0,0,1]},"emissiveMap":{"value":"grey","type":28},"shininessExponentMap":{"value":"grey","type":28},"shininessExponent":{"type":13,"value":[100]},"specularGlossinessMap":{"value":"grey","type":28},"specularColor":{"linear":true,"type":16,"value":[0,0,0,0]},"specularMap":{"value":"grey","type":28},"specularFactor":{"type":13,"value":[1]},"transparencyMap":{"value":"grey","type":28},"transparencyFactor":{"type":13,"value":[1]},"tilingOffset":{"type":16,"value":[1,1,0,0]},"normalStrength":{"type":13,"value":[1],"handleInfo":["normalScale",0,13]},"normalMap":{"value":"normal","type":28},"glossiness":{"type":13,"value":[0]},"metallic":{"type":13,"value":[0]},"metallicMap":{"value":"grey","type":28},"albedoMap":{"type":28,"value":"grey"},"diffuseColor":{"type":16,"value":[1,1,1,1]},"diffuseFactor":{"type":13,"value":[1]},"normalScale":{"type":13,"value":[1]}}},{"phase":"forward-add","propertyIndex":0,"program":"dcc/imported-specular-glossiness|standard-vs|standard-fs","embeddedMacros":{"CC_FORWARD_ADD":true},"blendState":{"targets":[{"blend":true,"blendSrc":1,"blendDst":1,"blendSrcAlpha":0,"blendDstAlpha":1}]},"depthStencilState":{"depthFunc":2,"depthTest":true,"depthWrite":false}},{"phase":"shadow-caster","propertyIndex":0,"program":"dcc/imported-specular-glossiness|shadow-caster-vs:vert|shadow-caster-fs:frag","rasterizerState":{"cullMode":1},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"type":16,"value":[1,1,1,1],"handleInfo":["diffuseColor",0,16]},"albedoScale":{"type":13,"value":[1],"handleInfo":["diffuseFactor",0,13]},"alphaThreshold":{"type":13,"value":[0.5]},"mainTexture":{"value":"grey","type":28,"handleInfo":["albedoMap",0,28]},"transparencyMap":{"value":"grey","type":28},"transparencyFactor":{"type":13,"value":[1]},"diffuseColor":{"type":16,"value":[1,1,1,1]},"diffuseFactor":{"type":13,"value":[1]},"albedoMap":{"type":28,"value":"grey"}}}]},{"name":"transparent","passes":[{"program":"dcc/imported-specular-glossiness|standard-vs|standard-fs","embeddedMacros":{"CC_FORCE_FORWARD_SHADING":true},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendDstAlpha":4}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28,"handleInfo":["albedoMap",0,28]},"mainColor":{"linear":true,"type":16,"value":[1,1,1,1],"handleInfo":["diffuseColor",0,16]},"albedoScale":{"type":13,"value":[1],"handleInfo":["diffuseFactor",0,13]},"alphaThreshold":{"type":13,"value":[0.5]},"emissive":{"linear":true,"type":16,"value":[0,0,0,1]},"emissiveMap":{"value":"grey","type":28},"shininessExponentMap":{"value":"grey","type":28},"shininessExponent":{"type":13,"value":[100]},"specularGlossinessMap":{"value":"grey","type":28},"specularColor":{"linear":true,"type":16,"value":[0,0,0,0]},"specularMap":{"value":"grey","type":28},"specularFactor":{"type":13,"value":[1]},"transparencyMap":{"value":"grey","type":28},"transparencyFactor":{"type":13,"value":[1]},"tilingOffset":{"type":16,"value":[1,1,0,0]},"normalStrength":{"type":13,"value":[1],"handleInfo":["normalScale",0,13]},"normalMap":{"value":"normal","type":28},"glossiness":{"type":13,"value":[0]},"metallic":{"type":13,"value":[0]},"metallicMap":{"value":"grey","type":28},"albedoMap":{"type":28,"value":"grey"},"diffuseColor":{"type":16,"value":[1,1,1,1]},"diffuseFactor":{"type":13,"value":[1]},"normalScale":{"type":13,"value":[1]}}},{"phase":"forward-add","propertyIndex":0,"program":"dcc/imported-specular-glossiness|standard-vs|standard-fs","embeddedMacros":{"CC_FORWARD_ADD":true},"blendState":{"targets":[{"blend":true,"blendSrc":1,"blendDst":1,"blendSrcAlpha":0,"blendDstAlpha":1}]},"depthStencilState":{"depthFunc":2,"depthTest":true,"depthWrite":false}},{"phase":"shadow-caster","propertyIndex":0,"program":"dcc/imported-specular-glossiness|shadow-caster-vs:vert|shadow-caster-fs:frag","rasterizerState":{"cullMode":1},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"type":16,"value":[1,1,1,1],"handleInfo":["diffuseColor",0,16]},"albedoScale":{"type":13,"value":[1],"handleInfo":["diffuseFactor",0,13]},"alphaThreshold":{"type":13,"value":[0.5]},"mainTexture":{"value":"grey","type":28,"handleInfo":["albedoMap",0,28]},"transparencyMap":{"value":"grey","type":28},"transparencyFactor":{"type":13,"value":[1]},"diffuseColor":{"type":16,"value":[1,1,1,1]},"diffuseFactor":{"type":13,"value":[1]},"albedoMap":{"type":28,"value":"grey"}}}]}]]],0,0,[],[],[]],[[[35,"Paint_04"],[30,"Paint_04",[-2],[0,"9aHHfOVMdT7qPax9QpzJnz",-1,0],[1,-15.865,3.01,20.253],[3,0.09243666501669831,0.09243666501669832,-0.7010388455432343,-0.7010388455432344],[1,2.078,2.078,2.078],[1,0,344.977,90]],[23,"Paint_03",1,[[4,-3,[1,"eef7bjqL1f3qYcPmR2mUiT"],[0],[3],1]],[0,"39Yx/R27lU5K+R6IjwZTgy",1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]]],0,[0,7,1,0,-1,2,0,0,2,0,12,1,3],[0,0],[-1,1],[29,159]],[[{"fmt":"1","w":0,"h":0},-1],[1],0,[],[],[]],[[[15,"SUV_Carpaint",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_ALBEDO_MAP":true},{},{}],[[[{"roughness":0.3,"metallic":0.75,"SpecularIntensity":1,"fresnelHard":5,"reflEnvMapScale":0.1,"reflScale":0.6,"reflHard":4,"reflLightScale":0.2,"coatNormalScale":0.75,"flakeSize":10,"flakeDist":10},"mainColor",8,[4,4284703587],"secondPaintColor",8,[4,4286545792],"coatTiling",8,[2,4,2,0,0],"flakeTiling",8,[2,2,1,0,0],"mainTexture",6,0,"reflEnvMap",6,1,"reflLightMap",6,2,"coatNormal",6,3,"flakeMask",6,4,"flakeNormal",6,5],{},{}],11,0,0]]],0,0,[0,0,0,0,0,0,0],[8,27,28,29,30,31,5],[54,28,28,50,51,52,53]]]]
